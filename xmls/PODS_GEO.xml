<root version="6.0.3.0">
    <data id="PODS_ACTIVITY_ZONE" comment="PODS.ACTIVITY_ZONE" schema="PODS" table="ACTIVITY_ZONE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,"LABEL"
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "LABEL"
                    FROM PODS.ACTIVITY_ZONE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ANODE" comment="PODS.ANODE" schema="PODS" table="ANODE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "LABEL", d.TYPE_CL "TYPE"
                    FROM PODS.ANODE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_BOND_LEAD" comment="PODS.BOND_LEAD" schema="PODS" table="BOND_LEAD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.BOND_LEAD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_BRANCH_CONNECT" comment="PODS.BRANCH_CONNECT" schema="PODS" table="BRANCH_CONNECT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.BRANCH_CONNECT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CASING" comment="PODS.CASING" schema="PODS" table="CASING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
                    FROM PODS.CASING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CATHODIC_PROTECTION_RANGE" comment="PODS.CATHODIC_PROTECTION_RANGE" schema="PODS" table="CATHODIC_PROTECTION_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    ,d.CATHODICALLY_PROTECTED_LF "type"
                    FROM PODS.CATHODIC_PROTECTION_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CHEMICAL_INJECTION_LOG" comment="PODS.CHEMICAL_INJECTION_LOG" schema="PODS" table="CHEMICAL_INJECTION_LOG">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.CHEMICAL_INJECTION_LOG d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CHEMICAL_INJECTOR" comment="PODS.CHEMICAL_INJECTOR" schema="PODS" table="CHEMICAL_INJECTOR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.CHEMICAL_INJECTOR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CLOSURE" comment="PODS.CLOSURE" schema="PODS" table="CLOSURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.CLOSURE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_COLLAR" comment="PODS.COLLAR" schema="PODS" table="COLLAR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.COLLAR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_COLLET_CONNECTOR" comment="PODS.COLLET_CONNECTOR" schema="PODS" table="COLLET_CONNECTOR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "TYPE"
                    FROM PODS.COLLET_CONNECTOR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CONCRETE_SLAB" comment="PODS.CONCRETE_SLAB" schema="PODS" table="CONCRETE_SLAB">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
                    FROM PODS.CONCRETE_SLAB d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_COUNTY_BOUNDARY" comment="PODS.COUNTY_BOUNDARY" schema="PODS" table="COUNTY_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.COUNTY_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_COUPON_SITE" comment="PODS.COUPON_SITE" schema="PODS" table="COUPON_SITE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.COUPON_SITE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CUSTOMER_INTERRUPT" comment="PODS.CUSTOMER_INTERRUPT" schema="PODS" table="CUSTOMER_INTERRUPT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.CUSTOMER_INTERRUPT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_DEPTH_OF_COVER" comment="PODS.DEPTH_OF_COVER" schema="PODS" table="DEPTH_OF_COVER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label",
                    CASE
                    WHEN d.MEASUREMENT &gt; 0 then '1'
                    WHEN d.MEASUREMENT = 0 then '0'
                    WHEN d.MEASUREMENT &lt;= -1 and d.MEASUREMENT &gt; -6  then '-1'
                    WHEN d.MEASUREMENT &lt;= -6 then '-6'
                    END "type"
                    FROM PODS.DEPTH_OF_COVER d

                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_DOT_CLASS" comment="PODS.DOT_CLASS" schema="PODS" table="DOT_CLASS">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
         WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
          SELECT ID,X,Y
          FROM
          (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE
          FROM PODS.DOT_CLASS d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
          JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
          JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
          JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
          JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
          JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
          AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
          AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
          WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
          WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          IF :SEQ=0 OR :BACK_SEQ=0 THEN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          IF :SEQ=0 THEN
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id 
          WHERE EVENT_ID = :ID;
          ELSE
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END IF;
          END IF;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          IF :SEQ=0 OR :BACK_SEQ=0 THEN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          IF :SEQ=0 THEN
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id 
          WHERE EVENT_ID = :ID;
          ELSE
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END IF;
          END IF;
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DOT_CLASS'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_DRAG_REDUCING_AGENT" comment="PODS.DRAG_REDUCING_AGENT" schema="PODS" table="DRAG_REDUCING_AGENT">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.DRAG_REDUCING_AGENT d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_DRIP" comment="PODS.DRIP" schema="PODS" table="DRIP">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.DRIP d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_DRIP_RISER" comment="PODS.DRIP_RISER" schema="PODS" table="DRIP_RISER">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.DRIP_RISER d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DRIP_RISER'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_ELBOW" comment="PODS.ELBOW" schema="PODS" table="ELBOW">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
        WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                      SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.description "LABEL"
                      FROM PODS.ELBOW d
                      JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                      JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                      JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                      WHERE sp.LINE_ID != 0  
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = c.location_id)) d
                    WHERE {FILTER}
                    ORDER BY ID, MEASURE
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_ELBOW'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;

        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_EXPOSURE" comment="PODS.EXPOSURE" schema="PODS" table="EXPOSURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.EXPOSURE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)

                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_EXTERNAL_COATING" comment="PODS.EXTERNAL_COATING" schema="PODS" table="EXTERNAL_COATING">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
        WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                      SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.description "LABEL"
                      FROM PODS.EXTERNAL_COATING d
                      JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                      JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                      JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                      WHERE sp.LINE_ID != 0  and e.length&lt;50
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = c.location_id)) d
                    WHERE {FILTER}
                    ORDER BY ID, MEASURE
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          IF :SEQ=0 OR :BACK_SEQ=0 THEN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          IF :SEQ=0 THEN
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id 
          WHERE EVENT_ID = :ID;
          ELSE
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END IF;
          END IF;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          IF :SEQ=0 OR :BACK_SEQ=0 THEN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          IF :SEQ=0 THEN
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id 
          WHERE EVENT_ID = :ID;
          ELSE
          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END IF;
          END IF;
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_EXTRUSION" comment="PODS.EXTRUSION" schema="PODS" table="EXTRUSION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.EXTRUSION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_EXTRUSION_OPENING" comment="PODS.EXTRUSION_OPENING" schema="PODS" table="EXTRUSION_OPENING">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.EXTRUSION_OPENING d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_FABRICATION" comment="PODS.FABRICATION" schema="PODS" table="FABRICATION">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.FABRICATION d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_FABRICATION'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_FACILITY_RANKING" comment="PODS.FACILITY_RANKING" schema="PODS" table="FACILITY_RANKING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.FACILITY_RANKING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FACILITY_RATING" comment="PODS.FACILITY_RATING" schema="PODS" table="FACILITY_RATING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.FACILITY_RATING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FACILITY_RATING_VARIANCE" comment="PODS.FACILITY_RATING_VARIANCE" schema="PODS" table="FACILITY_RATING_VARIANCE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.FACILITY_RATING_VARIANCE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FAIRING" comment="PODS.FAIRING" schema="PODS" table="FAIRING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.FAIRING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FLANGE" comment="PODS.FLANGE" schema="PODS" table="FLANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.FLANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FLEXIBLE_JOINT" comment="PODS.FLEXIBLE_JOINT" schema="PODS" table="FLEXIBLE_JOINT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
                    FROM PODS.FLEXIBLE_JOINT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FLOW_DIRECTION_RANGE" comment="PODS.FLOW_DIRECTION_RANGE" schema="PODS" table="FLOW_DIRECTION_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL,TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label", d.TYPE_CL "type"
                    FROM PODS.FLOW_DIRECTION_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FLOW_MEASUREMENT" comment="PODS.FLOW_MEASUREMENT" schema="PODS" table="FLOW_MEASUREMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.FLOW_MEASUREMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_GRANDFATHER_PRESSURE" comment="PODS.GRANDFATHER_PRESSURE" schema="PODS" table="GRANDFATHER_PRESSURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.GRANDFATHER_PRESSURE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_GROUND_BED" comment="PODS.GROUND_BED" schema="PODS" table="GROUND_BED">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.GROUND_BED d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_HCA_CA_SEGMENT" comment="PODS.HCA_CA_SEGMENT" schema="PODS" table="HCA_CA_SEGMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.HCA_CA_SEGMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)

                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_HORIZONTAL_DIRECTIONAL_DRILL" comment="PODS.HORIZONTAL_DIRECTIONAL_DRILL" schema="PODS" table="HORIZONTAL_DIRECTIONAL_DRILL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.HORIZONTAL_DIRECTIONAL_DRILL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_CLUSTER" comment="PODS.ILI_CLUSTER" schema="PODS" table="ILI_CLUSTER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y
                    FROM
                    (SELECT d.ILI_CLUSTER_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE,d.ili_inspection_id
                    FROM PODS.ILI_CLUSTER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03','ST_POINT_TYPE_04')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE d.ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_PIPE_LENGTH" comment="PODS.ILI_PIPE_LENGTH" schema="PODS" table="ILI_PIPE_LENGTH">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.WELD_NUMBER "LABEL", round(d.NOMINAL_WALL_THICKNESS/10) "type"
                    FROM PODS.ILI_PIPE_LENGTH d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                    JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                    JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                    WHERE sp.LINE_ID != 0
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_RANGE" comment="PODS.ILI_RANGE" schema="PODS" table="ILI_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    ,d.PIGGABLE_LF "type"
                    FROM PODS.ILI_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_INJECTOR" comment="PODS.INJECTOR" schema="PODS" table="INJECTOR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.INJECTOR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_INSPECTION_INTERVAL" comment="PODS.INSPECTION_INTERVAL" schema="PODS" table="INSPECTION_INTERVAL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE
                    FROM PODS.INSPECTION_INTERVAL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN

                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_INTERFACE_DETECTOR" comment="PODS.INTERFACE_DETECTOR" schema="PODS" table="INTERFACE_DETECTOR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.INTERFACE_DETECTOR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_INTERNAL_COATING" comment="PODS.INTERNAL_COATING" schema="PODS" table="INTERNAL_COATING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.description "LABEL"
                    FROM PODS.INTERNAL_COATING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                    JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                    JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                    WHERE sp.LINE_ID != 0  and e.length&lt;50
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = c.location_id)) d
                    WHERE {FILTER}
                    ORDER BY ID, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_JUNCTION_BOX" comment="PODS.JUNCTION_BOX" schema="PODS" table="JUNCTION_BOX">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.NAME "LABEL"
                    FROM PODS.JUNCTION_BOX d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_LAND_USE" comment="PODS.LAND_USE" schema="PODS" table="LAND_USE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.LAND_USE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_LAUNCHER_RECEIVER" comment="PODS.LAUNCHER_RECEIVER" schema="PODS" table="LAUNCHER_RECEIVER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.NAME"label", d.TYPE_CL "type"
                    FROM PODS.LAUNCHER_RECEIVER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_LEAK_HISTORY" comment="PODS.LEAK_HISTORY" schema="PODS" table="LEAK_HISTORY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.LEAK_HISTORY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_LEGACY_LINE_BOUNDARY" comment="PODS.LEGACY_LINE_BOUNDARY" schema="PODS" table="LEGACY_LINE_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.LEGACY_LINE_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_MAINTENANCE" comment="PODS.MAINTENANCE" schema="PODS" table="MAINTENANCE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.MAINTENANCE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_MAOP_RATING" comment="PODS.MAOP_RATING" schema="PODS" table="MAOP_RATING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.MAOP_RATING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_METER" comment="PODS.METER" schema="PODS" table="METER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.METER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_METER_STATION" comment="PODS.METER_STATION" schema="PODS" table="METER_STATION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.METER_STATION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_NETWORK_SEGMENT" comment="PODS.NETWORK_SEGMENT" schema="PODS" table="NETWORK_SEGMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE
                    FROM PODS.NETWORK_SEGMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ODORANT_MEASUREMENT" comment="PODS.ODORANT_MEASUREMENT" schema="PODS" table="ODORANT_MEASUREMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, d.TYPE_CL "type"
                    FROM PODS.ODORANT_MEASUREMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN


                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ODORANT_RANGE" comment="PODS.ODORANT_RANGE" schema="PODS" table="ODORANT_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.ODORANT_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_OFFSHORE_RISER" comment="PODS.OFFSHORE_RISER" schema="PODS" table="OFFSHORE_RISER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.OFFSHORE_RISER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_OWNER_OPERATOR_RANGE" comment="PODS.OWNER_OPERATOR_RANGE" schema="PODS" table="OWNER_OPERATOR_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.OWNER_OPERATOR_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PHYSICAL_INSPECTION" comment="PODS.PHYSICAL_INSPECTION" schema="PODS" table="PHYSICAL_INSPECTION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    ,to_char(d.INSPECTION_START_DATE, 'yyyy') "type"
                    FROM PODS.PHYSICAL_INSPECTION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_ADJACENT_CONSTRUCTION" comment="PODS.PI_ADJACENT_CONSTRUCTION" schema="PODS" table="PI_ADJACENT_CONSTRUCTION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.PI_ADJACENT_CONSTRUCTION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_ANODE_READING" comment="PODS.PI_ANODE_READING" schema="PODS" table="PI_ANODE_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_ANODE_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_BOND_READING" comment="PODS.PI_BOND_READING" schema="PODS" table="PI_BOND_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_BOND_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CASING_READING" comment="PODS.PI_CASING_READING" schema="PODS" table="PI_CASING_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_CASING_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CIS_READING" comment="PODS.PI_CIS_READING" schema="PODS" table="PI_CIS_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_CIS_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_COATING_DATA" comment="PODS.PI_COATING_DATA" schema="PODS" table="PI_COATING_DATA">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_COATING_DATA d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CORROSION" comment="PODS.PI_CORROSION" schema="PODS" table="PI_CORROSION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_CORROSION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CP_INSPECTION" comment="PODS.PI_CP_INSPECTION" schema="PODS" table="PI_CP_INSPECTION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL,TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    ,to_char(d.INSPECTION_DATE, 'yyyy') "type"
                    FROM PODS.PI_CP_INSPECTION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.line ln ON ln.line_id = r.line_id
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE  ln.type_cl = CASE r.type_cl
                    WHEN 'ROUTE_TYPE_10' THEN 'LINE_TYPE_01'
                    WHEN 'ROUTE_TYPE_11' THEN 'LINE_TYPE_02'
                    WHEN 'ROUTE_TYPE_12' THEN 'LINE_TYPE_03'
                    WHEN 'ROUTE_TYPE_04' THEN 'LINE_TYPE_04'
                    END
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CP_READING" comment="PODS.PI_CP_READING" schema="PODS" table="PI_CP_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, 'Uвкл=' || CAST(d.ps_on as VARCHAR(50)) || ' В на ' || d.description "label"
                    , TO_CHAR(i.inspection_date,'YYYY ') "type"
                    FROM PODS.PI_CP_READING d
                    JOIN pods.pi_cp_inspection i ON d.pi_cp_event_id = i.event_id
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_CRACK" comment="PODS.PI_CRACK" schema="PODS" table="PI_CRACK">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PI_CRACK d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_DEBRIS" comment="PODS.PI_DEBRIS" schema="PODS" table="PI_DEBRIS">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PI_DEBRIS d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_ENVIRONMENT" comment="PODS.PI_ENVIRONMENT" schema="PODS" table="PI_ENVIRONMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_ENVIRONMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_EXCAVATION" comment="PODS.PI_EXCAVATION" schema="PODS" table="PI_EXCAVATION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_EXCAVATION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)

                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_GIRTH_WELD" comment="PODS.PI_GIRTH_WELD" schema="PODS" table="PI_GIRTH_WELD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_GIRTH_WELD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN

                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_GROUND_BED_READING" comment="PODS.PI_GROUND_BED_READING" schema="PODS" table="PI_GROUND_BED_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_GROUND_BED_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIG_SIGNAL" comment="PODS.PIG_SIGNAL" schema="PODS" table="PIG_SIGNAL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PIG_SIGNAL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_IC_COUPON_READING" comment="PODS.PI_IC_COUPON_READING" schema="PODS" table="PI_IC_COUPON_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_IC_COUPON_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_LEAK_SURVEY" comment="PODS.PI_LEAK_SURVEY" schema="PODS" table="PI_LEAK_SURVEY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL,TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label", to_char(d.INSPECTION_DATE, 'yyyy') "type"
                    FROM PODS.PI_LEAK_SURVEY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_LEAK_SURVEY_READING" comment="PODS.PI_LEAK_SURVEY_READING" schema="PODS" table="PI_LEAK_SURVEY_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_LEAK_SURVEY_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_LONG_WELD" comment="PODS.PI_LONG_WELD" schema="PODS" table="PI_LONG_WELD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_LONG_WELD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_MARINE_GROWTH" comment="PODS.PI_MARINE_GROWTH" schema="PODS" table="PI_MARINE_GROWTH">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PI_MARINE_GROWTH d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_MATERIAL_DEFECT" comment="PODS.PI_MATERIAL_DEFECT" schema="PODS" table="PI_MATERIAL_DEFECT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_MATERIAL_DEFECT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_MECHANICAL_DAMAGE" comment="PODS.PI_MECHANICAL_DAMAGE" schema="PODS" table="PI_MECHANICAL_DAMAGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_MECHANICAL_DAMAGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_METAL_LOSS" comment="PODS.PI_METAL_LOSS" schema="PODS" table="PI_METAL_LOSS">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PI_METAL_LOSS d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_BEND" comment="PODS.PIPE_BEND" schema="PODS" table="PIPE_BEND">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.description"label"
                    FROM PODS.PIPE_BEND d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                    JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                    JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                    WHERE sp.LINE_ID != 0
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = c.location_id)) d
                    WHERE {FILTER}
                    ORDER BY ID, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_JOIN" comment="PODS.PIPE_JOIN" schema="PODS" table="PIPE_JOIN">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.PIPE_JOIN d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_LENGTH" comment="PODS.PIPE_LENGTH" schema="PODS" table="PIPE_LENGTH">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.LENGTH_IDENTIFIER"label"
                    FROM PODS.PIPE_LENGTH d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                    JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                    JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                    WHERE sp.LINE_ID != 0
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_OPERATING_HISTORY" comment="PODS.PIPE_OPERATING_HISTORY" schema="PODS" table="PIPE_OPERATING_HISTORY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description"label"
                    FROM PODS.PIPE_OPERATING_HISTORY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_SEGMENT" comment="PODS.PIPE_SEGMENT" schema="PODS" table="PIPE_SEGMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, sp.LINE_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.description"label"
                    FROM PODS.PIPE_SEGMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID
                    JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                    JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                    WHERE sp.LINE_ID != 0  and e.length&lt;50
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = c.location_id)) d
                    WHERE {FILTER}
                    ORDER BY ID, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_PIPE_CONDITION" comment="PODS.PI_PIPE_CONDITION" schema="PODS" table="PI_PIPE_CONDITION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_PIPE_CONDITION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_PIPELINE_MOVEMENT" comment="PODS.PI_PIPELINE_MOVEMENT" schema="PODS" table="PI_PIPELINE_MOVEMENT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_PIPELINE_MOVEMENT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_RECTIFIER_READING" comment="PODS.PI_RECTIFIER_READING" schema="PODS" table="PI_RECTIFIER_READING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, d.PI_CP_EVENT_ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_RECTIFIER_READING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_RELIEF_VALVE" comment="PODS.PI_RELIEF_VALVE" schema="PODS" table="PI_RELIEF_VALVE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_RELIEF_VALVE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_RIGHT_OF_WAY" comment="PODS.PI_RIGHT_OF_WAY" schema="PODS" table="PI_RIGHT_OF_WAY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label"
                    FROM PODS.PI_RIGHT_OF_WAY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted

                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_SOIL" comment="PODS.PI_SOIL" schema="PODS" table="PI_SOIL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION"label", d.TYPE_CL "type"
                    FROM PODS.PI_SOIL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PI_SUBSEA_INSPECTION" comment="PODS.PI_SUBSEA_INSPECTION" schema="PODS" table="PI_SUBSEA_INSPECTION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", to_char(d.INSPECTION_DATE, 'yyyy') "type"
                    FROM PODS.PI_SUBSEA_INSPECTION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_PI_TANK" comment="PODS.PI_TANK" schema="PODS" table="PI_TANK">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "LABEL"
          FROM PODS.PI_TANK d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_TANK'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
  <data id="PODS_PI_WATER" comment="PODS.PI_WATER" schema="PODS" table="PI_WATER">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "LABEL"
          FROM PODS.PI_WATER d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PI_WATER'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_PRESSURE_CAP" comment="PODS.PRESSURE_CAP" schema="PODS" table="PRESSURE_CAP">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.PRESSURE_CAP d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_PRESSURE_MEASUREMENT" comment="PODS.PRESSURE_MEASUREMENT" schema="PODS" table="PRESSURE_MEASUREMENT">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.PRESSURE_MEASUREMENT d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_PRODUCT_RANGE" comment="PODS.PRODUCT_RANGE" schema="PODS" table="PRODUCT_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.PRODUCT_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PROFILE" comment="PODS.PROFILE" schema="PODS" table="PROFILE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label",
                    CASE
                    WHEN d.ELEVATION &lt;= -50 then '-50'
                    WHEN d.ELEVATION &gt; -50 and d.ELEVATION &lt;= -25 then '-25'
                    WHEN d.ELEVATION &gt; -25 and d.ELEVATION &lt;= 0 then '0'
                    WHEN d.ELEVATION &gt; 0 and d.ELEVATION &lt;=25 then '25'
                    WHEN d.ELEVATION &gt; 0 and d.ELEVATION &lt;=50 then '50'
                    WHEN d.ELEVATION &gt; 50 and d.ELEVATION &lt;=100 then '100'
                    WHEN d.ELEVATION &gt; 100 and d.ELEVATION &lt;=150 then '150'
                    WHEN d.ELEVATION &gt; 150 and d.ELEVATION &lt;=200 then '200'
                    WHEN d.ELEVATION &gt; 200 and d.ELEVATION &lt;=250 then '250'
                    WHEN d.ELEVATION &gt; 250 and d.ELEVATION &lt;= 500 then '500'
                    WHEN d.ELEVATION &gt; 500 and d.ELEVATION &lt;=750 then '750'
                    WHEN d.ELEVATION &gt; 750 and d.ELEVATION &lt;= 1000 then '1000'
                    WHEN d.ELEVATION &gt; 1000 and d.ELEVATION &lt;=1250 then '1250'
                    WHEN d.ELEVATION &gt; 1250 and d.ELEVATION &lt;=1500 then '1500'
                    WHEN d.ELEVATION &gt; 1500 and d.ELEVATION &lt;=1750 then '1750'
                    WHEN d.ELEVATION &gt; 1750 and d.ELEVATION &lt;=2000 then '2000'
                    WHEN d.ELEVATION &gt; 2000 and d.ELEVATION &lt;=2250 then '2250'
                    WHEN d.ELEVATION &gt; 2250 and d.ELEVATION &lt;=2500 then '2500'
                    WHEN d.ELEVATION &gt;2500 then '3000'
                    END "type"
                    FROM PODS.PROFILE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_RECTIFIER" comment="PODS.RECTIFIER" schema="PODS" table="RECTIFIER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.RECTIFIER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_RECTIFIER_ENCLOSURE" comment="PODS.RECTIFIER_ENCLOSURE" schema="PODS" table="RECTIFIER_ENCLOSURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.RECTIFIER_ENCLOSURE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_REDUCER" comment="PODS.REDUCER" schema="PODS" table="REDUCER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.REDUCER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_REPAIR_CLAMP" comment="PODS.REPAIR_CLAMP" schema="PODS" table="REPAIR_CLAMP">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.REPAIR_CLAMP d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_RIVER_WEIGHT" comment="PODS.RIVER_WEIGHT" schema="PODS" table="RIVER_WEIGHT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.RIVER_WEIGHT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'

                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ROUTING_NOTE" comment="PODS.ROUTING_NOTE" schema="PODS" table="ROUTING_NOTE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.ROUTING_NOTE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SCC_PIPE_SUSCEPTIBILITY" comment="PODS.SCC_PIPE_SUSCEPTIBILITY" schema="PODS" table="SCC_PIPE_SUSCEPTIBILITY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.SCC_PIPE_SUSCEPTIBILITY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SCC_SOIL_POTENTIAL" comment="PODS.SCC_SOIL_POTENTIAL" schema="PODS" table="SCC_SOIL_POTENTIAL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.SCC_SOIL_POTENTIAL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SHEET_NOTE" comment="PODS.SHEET_NOTE" schema="PODS" table="SHEET_NOTE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.SHEET_NOTE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID)
                    AND d.TYPE_CL IN ('C1400057','C1400058') ) d
                    WHERE {FILTER}
                    ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SLEEVE" comment="PODS.SLEEVE" schema="PODS" table="SLEEVE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.SLEEVE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SRV_DISTRICT_BOUNDARY" comment="PODS.SRV_DISTRICT_BOUNDARY" schema="PODS" table="SRV_DISTRICT_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.SRV_DISTRICT_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    JOIN PODS.LINE ln ON LN.LINE_ID = r1.line_id
                    WHERE ((r.type_cl = 'ROUTE_TYPE_04' AND ln.type_cl = 'LINE_TYPE_04') OR
                    (r.type_cl = 'ROUTE_TYPE_12' AND ln.type_cl = 'LINE_TYPE_03') OR
                    (r.type_cl = 'ROUTE_TYPE_10' AND ln.type_cl = 'LINE_TYPE_01'))
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STABILIZATION" comment="PODS.STABILIZATION" schema="PODS" table="STABILIZATION">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.STABILIZATION d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STATUS_RANGE" comment="PODS.STATUS_RANGE" schema="PODS" table="STATUS_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.STATUS_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STRAIGHTENING_VANES" comment="PODS.STRAIGHTENING_VANES" schema="PODS" table="STRAIGHTENING_VANES">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.STRAIGHTENING_VANES d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_STRAKE" comment="PODS.STRAKE" schema="PODS" table="STRAKE">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.STRAKE d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_STRAKE'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_STRUCTURE_SUPPORT" comment="PODS.STRUCTURE_SUPPORT" schema="PODS" table="STRUCTURE_SUPPORT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.STRUCTURE_SUPPORT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SUBSEA_SLED_ASSEMBLY" comment="PODS.SUBSEA_SLED_ASSEMBLY" schema="PODS" table="SUBSEA_SLED_ASSEMBLY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.SUBSEA_SLED_ASSEMBLY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TAP" comment="PODS.TAP" schema="PODS" table="TAP">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.TAP d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TAPERED_STRESS_JOINT" comment="PODS.TAPERED_STRESS_JOINT" schema="PODS" table="TAPERED_STRESS_JOINT">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.TAPERED_STRESS_JOINT d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TAX_DISTRICT_BOUNDARY" comment="PODS.TAX_DISTRICT_BOUNDARY" schema="PODS" table="TAX_DISTRICT_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.TAX_DISTRICT_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TEE" comment="PODS.TEE" schema="PODS" table="TEE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.TEE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
  <data id="PODS_TEMPERATURE_MEASUREMENT" comment="PODS.TEMPERATURE_MEASUREMENT" schema="PODS" table="TEMPERATURE_MEASUREMENT">
    <select>
      <geoQuery idField="ID" geoField="X,Y">
        <param name="USER_ID" default="-1" type="Int64"/>
        <var name="FILTER" default="1=1"/>
        <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
        <query>
          WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
          SELECT * FROM
          (
          SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
          FROM PODS.TEMPERATURE_MEASUREMENT d
          JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
          JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
          JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
          WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
          WHERE {FILTER} ORDER BY Y desc, X
        </query>
      </geoQuery>
    </select>
    <insert>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.INSERT_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
          AND pr.INSERT_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          DECLARE
          loc_id   NUMERIC (16, 0);
          sp_id    NUMERIC (16, 0);
          BEGIN
          SELECT MAX(sp.station_id) INTO sp_id
          FROM pods.coordinate  c
          JOIN pods.station_point sp ON sp.location_id = c.location_id
          WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
          AND sp.route_id != 0;

          IF sp_id IS NULL THEN
          INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
          VALUES (:LPU_ID)
          RETURNING LOCATION_ID INTO loc_id;

          INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
          LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
          VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
          VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

          INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
          SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
          VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
          RETURNING STATION_ID INTO sp_id;
          END IF;

          UPDATE PODS.EVENT_RANGE
          SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
          WHERE EVENT_ID = :ID;
          END;
        
        END;
</coord>
      </geoCommand>
    </insert>
    <update>
      <geoCommand proc="GET_LPU">
        <param name="ID" type="Int64"/>
        <param name="PODS_USER" type="String"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <object>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.UPDATE_PERMITTED = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
          AND pr.UPDATE_PERMITTED = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
          END IF;
          END;
        </object>
        <coord>
          DECLARE
  v_grant VARCHAR2(7);
BEGIN
  BEGIN
    WITH granted_lpu 
         AS (SELECT rf.value srv_district_id
               FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                      ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                      ON r2p.policy_id = pr.policy_id  
                    JOIN web50.b_policy_rule_filters rf
                      ON pr.rule_id = rf.rule_id  
             WHERE user_id = :USER_ID
               AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' 
               AND rf.operator = '='),
        some_grants
        AS (SELECT 1
              FROM web50.b_user_to_b_role u2r
                   JOIN web50.b_role_to_b_policy r2p
                     ON u2r.role_id = r2p.role_id
                   JOIN web50.b_policy_rules pr
                     ON r2p.policy_id = pr.policy_id 
            WHERE user_id = :USER_ID
              AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
    SELECT 'Granted' status
      INTO v_grant
      FROM dual
     WHERE (EXISTS (SELECT 1
                     FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
            AND EXISTS (SELECT 1 FROM some_grants))
        OR NOT EXISTS (SELECT 1 FROM some_grants);


    EXCEPTION 
       WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
       WHEN OTHERS THEN
         RAISE;
    END;
    
    
          BEGIN
          UPDATE PODS.COORDINATE
          SET X_COORD = :X,
          Y_COORD = :Y
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE EVENT_ID = :ID);

          UPDATE PODS.LOCATION
          SET SRV_DISTRICT_GCL = :LPU_ID
          WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
          FROM pods.event_range e
          JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
          WHERE e.event_id = :ID);
          END;
        
        END;
</coord>
      </geoCommand>
    </update>
    <delete>
      <dbCommand>
        <param name="ID" type="Int64"/>
        <param name="USER_ID" default="-1" type="Int64"/>
        <query>
          DECLARE
          v_permission_granted NUMBER;
          BEGIN

          SELECT COUNT(*)
          INTO v_permission_granted
          FROM WEB50.B_USER_TO_B_ROLE u2r
          WHERE u2r.USER_ID = :USER_ID
          AND ((EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_DATA'
          AND pr.DELETE_PERMITTED  = 1)
          AND NOT EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
          OR EXISTS (SELECT 1
          FROM WEB50.B_ROLE_TO_B_POLICY r2p
          JOIN WEB50.B_POLICY_RULES pr
          ON r2p.POLICY_ID = pr.POLICY_ID
          WHERE r2p.role_id = u2r.role_id
          AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
          AND pr.DELETE_PERMITTED  = 1));

          IF v_permission_granted &gt; 0
          THEN
          NULL;

          BEGIN
          UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
          END;

          ELSE
          RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
          END IF;
          END;
        </query>
      </dbCommand>
    </delete>
  </data>
    <data id="PODS_TEST_LEAD" comment="PODS.TEST_LEAD" schema="PODS" table="TEST_LEAD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.dESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.TEST_LEAD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;

                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TEST_PRESSURE" comment="PODS.TEST_PRESSURE" schema="PODS" table="TEST_PRESSURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.TEST_PRESSURE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TOWNSHIP_BOUNDARY" comment="PODS.TOWNSHIP_BOUNDARY" schema="PODS" table="TOWNSHIP_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    FROM PODS.TOWNSHIP_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_VALVE" comment="PODS.VALVE" schema="PODS" table="VALVE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.VALVE_IDENTIFIER "label", d.TYPE_CL "type"
                    FROM PODS.VALVE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_VALVE_OPERATOR" comment="PODS.VALVE_OPERATOR" schema="PODS" table="VALVE_OPERATOR">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y
                    FROM PODS.VALVE_OPERATOR d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_VENT_PIPE" comment="PODS.VENT_PIPE" schema="PODS" table="VENT_PIPE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.NAME "label"
                    FROM PODS.VENT_PIPE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_VESSEL" comment="PODS.VESSEL" schema="PODS" table="VESSEL">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.VESSEL d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_WELLHEAD_ASSEMBLY" comment="PODS.WELLHEAD_ASSEMBLY" schema="PODS" table="WELLHEAD_ASSEMBLY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.TYPE_CL "type"
                    FROM PODS.WELLHEAD_ASSEMBLY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CP_FOREIGN_LINE_CROSSING" comment="PODS.FOREIGN_LINE_CROSSING" schema="PODS" table="FOREIGN_LINE_CROSSING">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, LABEL, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type",d.DESCRIPTION "label"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.FOREIGN_LINE_CROSSING d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    WHERE (d.TYPE_CL = 'FL_CROSS_TYPE_11' OR d.TYPE_CL = 'FL_CROSS_TYPE_12')
                    AND EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FOREIGN_LINE_CROSSING" comment="PODS.FOREIGN_LINE_CROSSING" schema="PODS" table="FOREIGN_LINE_CROSSING">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || 'км. ' || d.description "label"
                    ,d.TYPE_CL "type"
                    FROM PODS.FOREIGN_LINE_CROSSING d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FOREIGN_LINE_CROSSING_COR" comment="PODS.FOREIGN_LINE_CROSSING" schema="PODS" table="FOREIGN_LINE_CROSSING">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT ID, P_ID, X, Y, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.FOREIGN_LINE_CROSSING d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    ) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_HCA_BOUNDARY" comment="PODS.HCA_BOUNDARY" schema="PODS" table="HCA_BOUNDARY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || 'км. ' || d.description "label"
                    ,d.TYPE_CL "type"
                    FROM PODS.HCA_BOUNDARY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;

                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;

                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;


                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    v_geographic_entity_id NUMBER;
                    var_shape_id numeric(16,0);
                    BEGIN

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    SELECT MIN(geographic_entity_id) /* avoid nodatafound exception*/
                    INTO v_geographic_entity_id
                    FROM PODS.HCA_BOUNDARY
                    WHERE EVENT_ID = :ID;


                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = v_geographic_entity_id;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = v_geographic_entity_id;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_RAILROAD" comment="PODS.RAILROAD" schema="PODS" table="RAILROAD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || '-' || CAST(FLOOR(sp2.station) as VARCHAR(50)) || ' ' || d.description "label"
                    ,d.TYPE_CL "type"
                    FROM PODS.RAILROAD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;

                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ROAD_ENTITY" comment="PODS.ROAD" schema="PODS" table="ROAD">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.ROAD d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    WHERE EVENT_ID&lt;0 AND EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_WATERWAY_ENTITY" comment="PODS.WATERWAY" schema="PODS" table="WATERWAY">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.WATERWAY d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    WHERE EVENT_ID&lt;0 AND EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_RIGHT_OF_WAY" comment="PODS.RIGHT_OF_WAY" schema="PODS" table="RIGHT_OF_WAY">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.RIGHT_OF_WAY d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ROAD" comment="PODS.ROAD" schema="PODS" table="ROAD">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || ' км. ' || d.description "label"
                    ,d.TYPE_CL "type"
                    FROM PODS.ROAD d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_WATERWAY" comment="PODS.WATERWAY" schema="PODS" table="WATERWAY">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE, CAST(FLOOR(sp1.station) as VARCHAR(50)) || ' км. ' || d.description "label"
                    ,d.TYPE_CL "type"
                    FROM PODS.WATERWAY d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_COMPRESSOR_STATION" comment="PODS.COMPRESSOR_STATION" schema="PODS" table="COMPRESSOR_STATION">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    ,granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y, "LABEL"
                    FROM (
                    SELECT ROW_NUMBER() OVER (PARTITION BY  p.shape_id ORDER BY p.hole_fl,v.sequence_no) RWN
                    ,d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.STATION_NAME "LABEL"
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p
                    ON p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v
                    ON v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c
                    ON c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.COMPRESSOR_STATION d
                    ON d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE rwn = 1
                    AND {FILTER}
                    ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_DISTRIBUTION_PLANT" comment="PODS.DISTRIBUTION_PLANT" schema="PODS" table="DISTRIBUTION_PLANT">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    ,granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y, LABEL,TYPE
                    FROM (
                    SELECT ROW_NUMBER() OVER (PARTITION BY  p.shape_id ORDER BY p.hole_fl,v.sequence_no) RWN
                    ,d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.NAME "label", d.TYPE_CL "type"
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p
                    ON p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v
                    ON v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c
                    ON c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.DISTRIBUTION_PLANT d
                    ON d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE rwn = 1
                    AND {FILTER}
                    ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_HCA_IDENTIFIED_SITE" comment="PODS.HCA_IDENTIFIED_SITE" schema="PODS" table="HCA_IDENTIFIED_SITE">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.HCA_IDENTIFIED_SITE d on d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_POPULATED_AREA" comment="PODS.POPULATED_AREA" schema="PODS" table="POPULATED_AREA">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.POPULATED_AREA d on d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PUMP_STATION" comment="PODS.PUMP_STATION" schema="PODS" table="PUMP_STATION">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.PUMP_STATION d on d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STRUCTURE" comment="PODS.STRUCTURE" schema="PODS" table="STRUCTURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y, LABEL, TYPE
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.NAME "label", d.TYPE_CL "type"
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.STRUCTURE d on d.offline_id = e.offline_id
                    WHERE d.type_cl NOT IN ('STRUCT_TYPE_16','STRUCT_TYPE_17')
                    AND EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_TANK" comment="PODS.TANK" schema="PODS" table="TANK">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.TANK d on d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_UMBILICAL" comment="PODS.UMBILICAL" schema="PODS" table="UMBILICAL">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y
                    FROM(
                    SELECT d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.UMBILICAL d on d.offline_id = e.offline_id
                    WHERE EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE {FILTER} order by ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ROUTE" comment="PODS.ROUTE" schema="PODS" table="ROUTE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, X, Y, TYPE, LABEL
                    FROM(
                    SELECT sp.ROUTE_ID ID, c.X_COORD X, c.Y_COORD Y, r.TYPE_CL "type", r.description "label", r.SEQUENCE, sp.MEASURE
                    FROM PODS.COORDINATE c
                    JOIN PODS.STATION_POINT sp on sp.LOCATION_ID = c.location_id
                    JOIN PODS.ROUTE r on r.ROUTE_ID = sp.ROUTE_ID
                    WHERE c.X_COORD != -1 AND c.Y_COORD != -1 AND sp.ROUTE_ID != 0 AND sp.type_cl IN ('ST_POINT_TYPE_01', 'ST_POINT_TYPE_02', 'ST_POINT_TYPE_03')
                    AND R.CURRENT_INDICATOR_LF = 'Y'
                    AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY TYPE, ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64" direction="Input"/>
                <param name="LINE_ID" type="Int64" direction="InputOutput"/>
                <param name="SERIES_ID" type="Int64" direction="InputOutput"/>
                <param name="LPU_ID" type="Int64" direction="Input" default="0"/>
                <param name="HAS_NEW" type="Int32" direction="InputOutput" default="0"/>
                <param name="PREV_MEASURE" type="Double" direction="InputOutput" default="-1"/>
                <param name="PREV_KM" type="Double" direction="InputOutput" default="-1"/>
                <param name="SERIES" type="Double" direction="InputOutput" default="10"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT line_id INTO :LINE_ID
                    FROM pods.route WHERE route_id = :ID;

                    SELECT MIN(series_id),MIN(series) INTO :SERIES_ID, :SERIES
                    FROM pods.series WHERE route_id = :ID;

                    UPDATE pods.station_point
                    SET measure = 0, route_id = 0, series_id = 0, line_id = 0
                    WHERE route_id = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id  NUMERIC (16, 0);
                    km NUMERIC(16,0);
                    BEGIN
                    SELECT MAX(c.location_id) INTO loc_id
                    FROM pods.coordinate  c
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND EXISTS(SELECT 1 FROM pods.station_point sp
                    WHERE sp.location_id = c.location_id AND sp.route_id IN (0,:ID));

                    IF loc_id IS NULL THEN
                    INSERT INTO pods.LOCATION (srv_district_gcl ) VALUES (:LPU_ID )
                    RETURNING location_id INTO loc_id;
                    UPDATE pods.LOCATION SET srv_district_gcl = 0 where srv_district_gcl IS NULL AND location_id = loc_id;

                    INSERT INTO pods.coordinate
                    (coordinate_source_id, type_cl, location_id, x_coord, y_coord,
                    z_coord, horiz_indicator_lf, vert_indicator_lf,
                    current_indicator_lf, effective_from_date, accuracy_cl, validity_tolerance, pods_user, create_date)
                    VALUES (0, 'USR', loc_id, round(:X,6), round(:Y,6), round(:Z,2), 'Y', CASE WHEN :Z IS NOT NULL THEN 'Y' ELSE 'N' END, 'Y', SYSDATE, 'UNKNOWN', 0, :PODS_USER, SYSDATE );

                    INSERT INTO pods.station_point
                    (type_cl, location_id, line_id, series, station, series_id, route_id, measure, pods_user, create_date )
                    VALUES ('ST_POINT_TYPE_02', loc_id, :LINE_ID, :SERIES, 0, :SERIES_ID, :ID, :MEASURE, :PODS_USER, SYSDATE );

                    :HAS_NEW := 1;
                    ELSE
                    UPDATE pods.station_point
                    SET line_id = :LINE_ID
                    ,route_id = :ID
                    ,measure = :MEASURE
                    ,SERIES = :SERIES
                    ,SERIES_ID = :SERIES_ID
                    WHERE location_id = loc_id AND route_id IN (0,:ID);

                    SELECT station INTO km
                    FROM pods.station_point sp
                    WHERE sp.location_id = loc_id AND route_id = :ID;

                    IF :HAS_NEW=1 AND :PREV_KM!=-1 THEN
                    UPDATE pods.station_point SET station = :PREV_KM+(km-:PREV_KM)*(measure-:PREV_MEASURE)/(:MEASURE-:PREV_MEASURE)
                    WHERE route_id = :ID AND measure &gt; :PREV_MEASURE AND measure &lt; :MEASURE;
                    END IF;

                    :PREV_KM :=  km;
                    :PREV_MEASURE :=  :MEASURE;
                    :HAS_NEW :=  0;
                    END IF;

                    IF km IS NOT NULL THEN
                    UPDATE pods.series
                    SET station_begin = CASE WHEN station_begin IS NULL THEN km WHEN station_begin&gt;km THEN km ELSE station_begin END,
                    station_end = CASE WHEN station_begin IS NULL THEN km WHEN km&gt;station_begin THEN km ELSE station_begin END
                    WHERE series_id = :SERIES_ID;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64" direction="Input"/>
                <param name="LINE_ID" type="Int64" direction="InputOutput"/>
                <param name="SERIES_ID" type="Int64" direction="InputOutput"/>
                <param name="LPU_ID" type="Int64" direction="Input" default="0"/>
                <param name="HAS_NEW" type="Int32" direction="InputOutput" default="0"/>
                <param name="PREV_MEASURE" type="Double" direction="InputOutput" default="-1"/>
                <param name="PREV_KM" type="Double" direction="InputOutput" default="-1"/>
                <param name="SERIES" type="Double" direction="InputOutput" default="10"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    return;

                    SELECT line_id INTO :LINE_ID
                    FROM pods.route WHERE route_id = :ID;

                    SELECT MIN(series_id),MIN(series) INTO :SERIES_ID, :SERIES
                    FROM pods.series WHERE route_id = :ID;

                    UPDATE pods.station_point
                    SET measure = 0, route_id = 0, series_id = 0, line_id = 0
                    WHERE route_id = :ID AND type_cl IN ('ST_POINT_TYPE_01', 'ST_POINT_TYPE_02', 'ST_POINT_TYPE_03');
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id  NUMERIC (16, 0);
                    km NUMERIC(16,0);
                    BEGIN
                    return;

                    SELECT MAX(c.location_id) INTO loc_id
                    FROM pods.coordinate  c
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND EXISTS(SELECT 1 FROM pods.station_point sp
                    WHERE sp.location_id = c.location_id AND sp.route_id IN (0,:ID));

                    IF loc_id IS NULL THEN
                    INSERT INTO pods.LOCATION (srv_district_gcl ) VALUES (:LPU_ID )
                    RETURNING location_id INTO loc_id;
                    UPDATE pods.LOCATION SET srv_district_gcl = 0 where srv_district_gcl IS NULL AND location_id = loc_id;

                    INSERT INTO pods.coordinate
                    (coordinate_source_id, type_cl, location_id, x_coord, y_coord,
                    z_coord, horiz_indicator_lf, vert_indicator_lf,
                    current_indicator_lf, effective_from_date, accuracy_cl, validity_tolerance, pods_user, create_date)
                    VALUES (0, 'USR', loc_id, round(:X,6), round(:Y,6), round(:Z,2), 'Y', CASE WHEN :Z IS NOT NULL THEN 'Y' ELSE 'N' END, 'Y', SYSDATE, 'UNKNOWN', 0, :PODS_USER, SYSDATE );

                    INSERT INTO pods.station_point
                    (type_cl, location_id, line_id, series, station, series_id, route_id, measure, pods_user, create_date )
                    VALUES ('ST_POINT_TYPE_02', loc_id, :LINE_ID, :SERIES, 0, :SERIES_ID, :ID, :MEASURE, :PODS_USER, SYSDATE );

                    :HAS_NEW := 1;
                    ELSE
                    UPDATE pods.station_point SET line_id = :LINE_ID, route_id = :ID, measure = :MEASURE,series_id = :SERIES_ID
                    WHERE location_id = loc_id AND route_id IN (0,:ID);

                    SELECT station INTO km
                    FROM pods.station_point sp
                    WHERE sp.location_id = loc_id AND route_id = :ID;

                    IF :HAS_NEW=1 AND :PREV_KM!=-1 THEN
                    UPDATE pods.station_point SET station = :PREV_KM+(km-:PREV_KM)*(measure-:PREV_MEASURE)/(:MEASURE-:PREV_MEASURE)
                    WHERE route_id = :ID AND measure &gt; :PREV_MEASURE AND measure &lt; :MEASURE;
                    END IF;

                    :PREV_KM :=  km;
                    :PREV_MEASURE :=  :MEASURE;
                    :HAS_NEW :=  0;
                    END IF;

                    IF km IS NOT NULL THEN
                    UPDATE pods.series
                    SET station_begin = CASE WHEN station_begin IS NULL THEN km WHEN station_begin&gt;km THEN km ELSE station_begin END,
                    station_end = CASE WHEN station_begin IS NULL THEN km WHEN km&gt;station_begin THEN km ELSE station_begin END
                    WHERE series_id = :SERIES_ID;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STATION_POINT
                    SET ROUTE_ID  = 0
                    ,LINE_ID = 0
                    ,SERIES = 0
                    ,SERIES_ID=0
                    ,MEASURE = 0
                    WHERE ROUTE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');

                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SITE" comment="PODS.SITE" schema="PODS" table="SITE" descr="Здания и сооружения инфраструктуры">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH
                    granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, TYPE, LABEL
                    FROM (
                    SELECT e.SITE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, e.TYPE_CL "type", e.NAME "label", p.HOLE_FL, v.SEQUENCE_NO
                    FROM pods.SITE e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.SITE SET SHAPE_ID = :SHAPE_ID WHERE SITE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO  LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER, SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" default="" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.site WHERE site_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO  LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id NUMERIC(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.site WHERE site_id = :ID;

                    UPDATE pods.site SET shape_id = NULL WHERE site_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id  = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SRV_DISTRICT_GCL" comment="PODS.SRV_DISTRICT_GCL" schema="PODS" table="SRV_DISTRICT_GCL">
        <select>
            <geoQuery idField="ID" geoField="WKB_GEOMETRY">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM
                    (SELECT GID ID, XMIN, XMAX, YMIN, YMAX, WKB_GEOMETRY, STYLE FROM PODS.SRV_DISTRICT_G
                    WHERE GID IN ({LPU_ACCESS_FILTER})) d
                    WHERE {FILTER} </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand>
                <param name="ID" type="Int64"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SRV_DISTRICT_G(GID, WKB_GEOMETRY,XMIN,XMAX,YMIN,YMAX,STYLE)
                    VALUES(:ID, :WKB, :XMIN, :XMAX, :YMIN, :YMAX, :STYLE);

                    UPDATE PODS.SRV_DISTRICT_GCL SET GID = :ID WHERE SRV_DISTRICT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </insert>
        <update>
            <geoCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SRV_DISTRICT_G SET WKB_GEOMETRY=:WKB, XMIN=:XMIN, XMAX=:XMAX, YMIN=:YMIN, YMAX=:YMAX, STYLE=:STYLE
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SRV_DISTRICT_GCL SET GID = NULL WHERE SRV_DISTRICT_ID = :ID;

                    DELETE FROM PODS.SRV_DISTRICT_G
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_SYSTEM_CL" comment="PODS.PIPE_SYSTEM_CL" schema="PODS" table="PIPE_SYSTEM_CL">
        <select>
            <geoQuery idField="ID" geoField="WKB_GEOMETRY">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_ps AS (SELECT  psb.pipe_system_id
                    FROM pods.pipe_system_boundary psb
                    JOIN pods.station_point sp
                    ON sp.line_id = psb.line_id
                    AND sp.station BETWEEN psb.km_begin AND psb.km_end
                    JOIN pods.location l
                    ON sp.location_Id = l.location_Id
                    WHERE psb.title_event_indicator_lf = 'Y'
                    AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (SELECT GID ID, XMIN, XMAX, YMIN, YMAX, WKB_GEOMETRY, STYLE FROM PODS.PIPE_SYSTEM_BUFFER_G d
                    WHERE EXISTS (SELECT 1 FROM granted_ps gp WHERE gp.pipe_system_id = d.gid )) d
                    WHERE {FILTER} </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand>
                <param name="ID" type="Int64"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.PIPE_SYSTEM_BUFFER_G(GID, WKB_GEOMETRY,XMIN,XMAX,YMIN,YMAX,STYLE)
                    VALUES(:ID, :WKB, :XMIN, :XMAX, :YMIN, :YMAX, :STYLE);

                    UPDATE PODS.PIPE_SYSTEM_CL SET BUFFER_GID = :ID WHERE PIPE_SYSTEM_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </insert>
        <update>
            <geoCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SYSTEM_BUFFER_G SET WKB_GEOMETRY=:WKB, XMIN=:XMIN, XMAX=:XMAX, YMIN=:YMIN, YMAX=:YMAX, STYLE=:STYLE
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SYSTEM_CL SET BUFFER_GID = NULL WHERE PIPE_SYSTEM_ID = :ID;

                    DELETE FROM PODS.PIPE_SYSTEM_BUFFER_G
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_PIPE_SYSTEM_AXIS_G" comment="PODS.PIPE_SYSTEM_CL" schema="PODS" table="PIPE_SYSTEM_CL">
        <select>
            <geoQuery idField="ID" geoField="WKB_GEOMETRY">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_ps AS (SELECT  psb.pipe_system_id
                    FROM pods.pipe_system_boundary psb
                    JOIN pods.station_point sp
                    ON sp.line_id = psb.line_id
                    AND sp.station BETWEEN psb.km_begin AND psb.km_end
                    JOIN pods.location l
                    ON sp.location_Id = l.location_Id
                    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT * FROM
                    (SELECT GID ID, XMIN, XMAX, YMIN, YMAX, WKB_GEOMETRY, STYLE FROM PODS.PIPE_SYSTEM_AXIS_G d
                    WHERE EXISTS (SELECT 1 FROM granted_ps gp WHERE gp.pipe_system_id = d.gid )) d
                    WHERE {FILTER} </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand>
                <param name="ID" type="Int64"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.PIPE_SYSTEM_AXIS_G(GID, WKB_GEOMETRY,XMIN,XMAX,YMIN,YMAX,STYLE)
                    VALUES(:ID, :WKB, :XMIN, :XMAX, :YMIN, :YMAX, :STYLE);

                    UPDATE PODS.PIPE_SYSTEM_CL SET AXIS_GID = :ID WHERE PIPE_SYSTEM_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </insert>
        <update>
            <geoCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="STYLE" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SYSTEM_AXIS_G SET WKB_GEOMETRY=:WKB, XMIN=:XMIN, XMAX=:XMAX, YMIN=:YMIN, YMAX=:YMAX, STYLE=:STYLE
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_AXIS_G'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SYSTEM_CL SET AXIS_GID = NULL WHERE PIPE_SYSTEM_ID = :ID;

                    DELETE FROM PODS.PIPE_SYSTEM_AXIS_G
                    WHERE GID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_DATA" comment="PODS.ILI_DATA" schema="PODS" table="ILI_DATA">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, 'Труба№'||d.weld_number||', '||d.FEATURE_DESCRIPTION "label", d.ANOMALY_TYPE_CL "type"
                    FROM PODS.ILI_DATA d
                    JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                    JOIN PODS.ILI_ANOMALY_TYPE_CL ia on d.anomaly_type_cl=ia.code and ia.category_cl=1
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    c_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id), MAX(c.coordinate_id) INTO sp_id,c_id
                    FROM pods.coordinate c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE)
                    RETURNING COORDINATE_ID INTO c_id;

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    UPDATE PODS.ILI_DATA SET coordinate_id = c_id WHERE ILI_DATA_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE COORDINATE_ID IN (SELECT d.COORDINATE_ID
                    FROM PODS.ILI_DATA d
                    WHERE d.ili_data_id = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT c.LOCATION_ID
                    FROM PODS.ILI_DATA d
                    JOIN pods.coordinate c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE d.ili_data_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_DATA_FEATURE" comment="PODS.ILI_DATA" schema="PODS" table="ILI_DATA">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH   granted_station  AS (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, d.FEATURE_DESCRIPTION "label", d.ANOMALY_TYPE_CL "type"
                    FROM PODS.ILI_DATA d
                    JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                    JOIN PODS.ILI_ANOMALY_TYPE_CL ia on d.anomaly_type_cl=ia.code and ia.category_cl=2
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    c_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id), MAX(c.coordinate_id) INTO sp_id,c_id
                    FROM pods.coordinate c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE)
                    RETURNING COORDINATE_ID INTO c_id;

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    UPDATE PODS.ILI_DATA SET coordinate_id = c_id WHERE ILI_DATA_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE COORDINATE_ID IN (SELECT d.COORDINATE_ID
                    FROM PODS.ILI_DATA d
                    WHERE d.ili_data_id = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT c.LOCATION_ID
                    FROM PODS.ILI_DATA d
                    JOIN pods.coordinate c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE d.ili_data_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_DATA_JUNCTION" comment="PODS.ILI_DATA" schema="PODS" table="ILI_DATA">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, d.FEATURE_DESCRIPTION "label", d.ANOMALY_TYPE_CL "type"
                    FROM PODS.ILI_DATA d
                    JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE d.anomaly_type_cl= 5001
                    AND c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    c_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id), MAX(c.coordinate_id) INTO sp_id,c_id
                    FROM pods.coordinate c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE)
                    RETURNING COORDINATE_ID INTO c_id;

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    UPDATE PODS.ILI_DATA SET coordinate_id = c_id WHERE ILI_DATA_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE COORDINATE_ID IN (SELECT d.COORDINATE_ID
                    FROM PODS.ILI_DATA d
                    WHERE d.ili_data_id = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT c.LOCATION_ID
                    FROM PODS.ILI_DATA d
                    JOIN pods.coordinate c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE d.ili_data_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_ILI_INSPECTION_RANGE" comment="PODS.ILI_INSPECTION_RANGE" schema="PODS" table="ILI_INSPECTION_RANGE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE
                    FROM
                    (SELECT d.ILI_INSPECTION_ID, d.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, r.SEQUENCE
                    ,to_char(f.BEGIN_DATE, 'DD.MM.YYYY')||','||TVC.DESCRIPTION "label"
                    ,to_char(f.BEGIN_DATE, 'yyyy') "type"
                    FROM PODS.ILI_INSPECTION_RANGE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    JOIN PODS.ILI_INSPECTION f on f.ILI_INSPECTION_ID = d.ILI_INSPECTION_ID
                    JOIN PODS.ILI_TOOL_VENDOR_CL TVC ON F.TOOL_VENDOR_CL = TVC.CODE
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID  = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID  = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID  = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0
                    WHERE EVENT_ID  = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STRUCTURE_CP_BLOCK" comment="PODS.STRUCTURE" schema="PODS" table="STRUCTURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    ,granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y, LABEL, TYPE
                    FROM (
                    SELECT ROW_NUMBER() OVER (PARTITION BY  p.shape_id ORDER BY p.hole_fl,v.sequence_no) RWN
                    ,d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.NAME "label", d.TYPE_CL "type"
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p
                    ON p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v
                    ON v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c
                    ON c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.STRUCTURE d
                    ON d.offline_id = e.offline_id
                    WHERE d.type_cl = 'STRUCT_TYPE_16'
                    AND EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE rwn = 1
                    AND {FILTER}
                    ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STRUCTURE_CP_TRANS" comment="PODS.STRUCTURE" schema="PODS" table="STRUCTURE">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    ,granted_offline AS (SELECT offline_id FROM PODS.OFFLINE_EVENT oe  WHERE EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = oe.shape_id))
                    SELECT ID, P_ID, X, Y, LABEL, TYPE
                    FROM (
                    SELECT ROW_NUMBER() OVER (PARTITION BY  p.shape_id ORDER BY p.hole_fl,v.sequence_no) RWN
                    ,d.OFFLINE_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.NAME "label", d.TYPE_CL "type"
                    FROM pods.OFFLINE_EVENT e
                    JOIN pods.PART p
                    ON p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v
                    ON v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c
                    ON c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.STRUCTURE d
                    ON d.offline_id = e.offline_id
                    WHERE d.type_cl = 'STRUCT_TYPE_17'
                    AND EXISTS (SELECT 1 FROM granted_offline go WHERE go.offline_id = d.offline_id )) d
                    WHERE rwn = 1
                    AND {FILTER}
                    ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.OFFLINE_EVENT SET SHAPE_ID = :SHAPE_ID WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL)
                    VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID NUMERIC(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.offline_event
                    WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.offline_event WHERE offline_id = :ID;

                    UPDATE pods.offline_event SET shape_id = NULL WHERE offline_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SHEET_NOTE_LINK" comment="PODS.SHEET_NOTE" schema="PODS" table="SHEET_NOTE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.SHEET_NOTE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID)
                    AND d.TYPE_CL IN ('C1400059')) d
                    WHERE {FILTER}
                    ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_FOREIGN_LINE_CROSSING_LINK" comment="PODS.FOREIGN_LINE_CROSSING" schema="PODS" table="FOREIGN_LINE_CROSSING">
        <select>
            <geoQuery idField="ID" geoField="X,Y" partField="P_ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_shapes AS (SELECT shape_id FROM PODS.LOCATION l  JOIN PODS.VERTEX v ON L.LOCATION_ID = v.LOCATION_ID  JOIN PODS.PART p ON v.PART_ID = p.PART_ID    WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID, P_ID, X, Y, LABEL, TYPE
                    FROM(
                    SELECT d.GEOGRAPHIC_ENTITY_ID ID, p.PART_ID P_ID, c.X_COORD X, c.Y_COORD Y, p.HOLE_FL, v.SEQUENCE_NO, d.TYPE_CL "type",d.DESCRIPTION "label"
                    FROM pods.GEOGRAPHIC_ENTITY e
                    JOIN pods.PART p on p.SHAPE_ID = e.SHAPE_ID
                    JOIN pods.VERTEX v on v.PART_ID = p.PART_ID
                    JOIN pods.COORDINATE c on c.LOCATION_ID = v.LOCATION_ID
                    JOIN PODS.FOREIGN_LINE_CROSSING d on d.GEOGRAPHIC_ENTITY_ID = e.ENTITY_ID
                    WHERE d.TYPE_CL = 'FL_CROSS_TYPE_13'
                    AND EXISTS (SELECT 1 FROM granted_shapes gs WHERE gs.shape_id = e.shape_id)) d
                    WHERE {FILTER} ORDER BY ID, HOLE_FL, P_ID, SEQUENCE_NO
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SHAPE(SHAPE_GUID) VALUES(NULL)
                    RETURNING SHAPE_ID INTO :SHAPE_ID;

                    UPDATE PODS.GEOGRAPHIC_ENTITY SET SHAPE_ID = :SHAPE_ID WHERE ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE)
                    RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="SHAPE_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PART_ID" type="Int64" direction="InputOutput" default=""/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    SELECT MAX(shape_id) INTO :SHAPE_ID
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = :SHAPE_ID);

                    DELETE FROM pods.part WHERE shape_id = :SHAPE_ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <part>
                    BEGIN
                    INSERT INTO PODS.PART(SHAPE_ID, HOLE_FL) VALUES(:SHAPE_ID, :HOLE) RETURNING PART_ID INTO :PART_ID;
                    END;
                </part>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    LOC_ID numeric(16,0);
                    BEGIN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID) RETURNING LOCATION_ID INTO LOC_ID;

                    INSERT INTO PODS.VERTEX (PART_ID, LOCATION_ID, SEQUENCE_NO, MEASURE)
                    VALUES(:PART_ID, LOC_ID, :SEQ, :MEASURE);

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', LOC_ID, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    var_shape_id numeric(16,0);
                    BEGIN
                    SELECT MAX(shape_id) INTO var_shape_id
                    FROM pods.geographic_entity WHERE entity_id = :ID;

                    UPDATE pods.geographic_entity SET shape_id = NULL WHERE entity_id = :ID;

                    UPDATE pods.coordinate
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE location_id IN (SELECT v.location_id
                    FROM pods.vertex v
                    JOIN pods.part p ON p.part_id = v.part_id
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.vertex WHERE part_id IN (SELECT p.part_id
                    FROM pods.part p
                    WHERE p.shape_id = var_shape_id);

                    DELETE FROM pods.part WHERE shape_id = var_shape_id;

                    DELETE FROM pods.shape WHERE shape_id = var_shape_id;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_SHEET_NOTE_FUND" comment="PODS.SHEET_NOTE" schema="PODS" table="SHEET_NOTE">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, d.DESCRIPTION "label", d.TYPE_CL "type"
                    FROM PODS.SHEET_NOTE d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID)
                    AND d.TYPE_CL IN ('C1400014')) d
                    WHERE {FILTER}
                    ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_MARKER" comment="PODS.MARKER" schema="PODS" table="MARKER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, CASE WHEN sp.STATION = 0 OR sp.STATION=-1 THEN '' ELSE CAST(FLOOR(sp.STATION) AS VARCHAR(50)) || 'км. № ' || CAST(d.MARKER_NUMBER as VARCHAR(50)) END "label", d.MARKER_TYPE_GCL "type"
                    FROM PODS.MARKER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE d.MARKER_TYPE_GCL = 'MARKER_TYPE_01'
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_MARKER_POINT" comment="PODS.MARKER" schema="PODS" table="MARKER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, CASE WHEN sp.STATION = 0 OR sp.STATION=-1 THEN '' ELSE CAST(FLOOR(sp.STATION) AS VARCHAR(50)) || 'км. № ' || CAST(d.MARKER_NUMBER as VARCHAR(50)) END "label", d.MARKER_TYPE_GCL "type"
                    FROM PODS.MARKER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE d.MARKER_TYPE_GCL = 'MARKER_TYPE_06'
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_MARKER_KM" comment="PODS.MARKER" schema="PODS" table="MARKER">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, CASE WHEN sp.STATION = 0 OR sp.STATION=-1 THEN '' ELSE CAST(FLOOR(sp.STATION) AS VARCHAR(50)) || 'км. № ' || CAST(d.MARKER_NUMBER as VARCHAR(50)) END "label", d.MARKER_TYPE_GCL "type"
                    FROM PODS.MARKER d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp ON sp.STATION_ID = e.STATION_ID_BEGIN
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID
                    WHERE d.MARKER_TYPE_GCL = 'MARKER_TYPE_05'
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    BEGIN
                    UPDATE PODS.COORDINATE
                    SET X_COORD = :X,
                    Y_COORD = :Y
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.LOCATION
                    SET SRV_DISTRICT_GCL = :LPU_ID
                    WHERE LOCATION_ID IN (SELECT sp.LOCATION_ID
                    FROM pods.event_range e
                    JOIN pods.station_point sp ON sp.station_id = e.station_id_begin
                    WHERE e.event_id = :ID);
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_STO_REPAIR_METHOD" comment="Р Газпром 2-2.3-595-2011.  Методы ремонта" schema="PODS" table="STO_ILI_DATA_CALC">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, R_595_2011_REPAIR_METHOD "label",R_595_2011_REPAIR_METHOD  "type"
                    FROM PODS.ILI_DATA d
                    JOIN PODS.STO_ILI_DATA_CALC dc on d.ili_data_id=dc.ili_data_id and dc.R_595_2011_REPAIR_METHOD is not null
                    JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
    </data>
    <data id="PODS_STO_PERFORMANCE_EVAL" comment="СТО Газпром 2-2.3-112-2007. Оценка работоспособности" schema="PODS" table="STO_ILI_DATA_CALC">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                    SELECT * FROM
                    (
                    SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sto_112_2007_performance_eval "label",sto_112_2007_performance_eval  "type"
                    FROM PODS.ILI_DATA d
                    JOIN PODS.STO_ILI_DATA_CALC dc on d.ili_data_id=dc.ili_data_id and dc.sto_112_2007_performance_eval  is not null
                    JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                    WHERE c.LOCATION_ID != -1
                    AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                    WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
                </query>
            </geoQuery>
        </select>
    </data>

<data id="PODS_STO_DANGER_DEGREE" comment="СТО Газпром 2-2.3-173-2007. Степень опасности дефекта" schema="PODS" table="STO_ILI_DATA_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, STO_173_2007_DANGER_DEGREE "label",STO_173_2007_DANGER_DEGREE  "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC dc on d.ili_data_id=dc.ili_data_id and dc.STO_173_2007_DANGER_DEGREE is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_DANGER_RANK" comment="СТО Газпром 2-2.3-292-2009. Ранги опасности дефектов" schema="PODS" table="STO_ILI_DATA_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, round(dc.STO_292_2007_DANGER_RANK,3) "label",
                CASE WHEN dc.STO_292_2007_DANGER_RANK &lt;= 0.3 THEN 0
                WHEN dc.STO_292_2007_DANGER_RANK &lt;= 0.6 AND dc.STO_292_2007_DANGER_RANK > 0.3 THEN 0.5
                WHEN dc.STO_292_2007_DANGER_RANK &lt;= 1 AND dc.STO_292_2007_DANGER_RANK > 0.6 THEN 1
                ELSE null END "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC dc on d.ili_data_id=dc.ili_data_id and dc.STO_292_2007_DANGER_RANK is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_FAIL_PROBABILITY" comment="Р Газпром 2-2.3-401-2009. Вероятности отказов" schema="PODS" table="STO_ILI_DATA_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, round(dc.STO_401_2009_FAIL_PROBABILITY,3) "label",
                CASE WHEN dc.STO_401_2009_FAIL_PROBABILITY &lt;= 0.3 THEN 0
                WHEN dc.STO_401_2009_FAIL_PROBABILITY &lt;= 0.6 AND dc.STO_401_2009_FAIL_PROBABILITY > 0.3 THEN 0.5
                WHEN dc.STO_401_2009_FAIL_PROBABILITY &lt;= 1 AND dc.STO_401_2009_FAIL_PROBABILITY > 0.6 THEN 1
                ELSE null END "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC dc on d.ili_data_id=dc.ili_data_id and dc.STO_401_2009_FAIL_PROBABILITY is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_100_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, round(d.STO_292_2007_VALUE_CONDITION,3) "label",
                CASE WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.03 THEN 'Исправное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.06 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.03 THEN 'Неисправное-работоспособное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.3 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.06 THEN 'Неработоспособное-ремонтнопригодное'
                WHEN d.STO_292_2007_VALUE_CONDITION &gt; 0.3 THEN 'Предельное'
                ELSE 'не рассчитано' END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID and e.current_indicator_lf='Y' and e.FEATURE_ID='INTERVAL_REGULAR' and e.length=100
                JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                WHERE sp.LINE_ID != 0
                AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_100_DANGER_DEG" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, DANGER_DEG "label", DANGER_DEG "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID and e.current_indicator_lf='Y' and e.FEATURE_ID='INTERVAL_REGULAR' and e.length=100
                JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                WHERE sp.LINE_ID != 0
                AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_100_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, SEGMENT_CATEGORY "label", SEGMENT_CATEGORY "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID and e.current_indicator_lf='Y' and e.FEATURE_ID='INTERVAL_REGULAR' and e.length=100
                JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                WHERE sp.LINE_ID != 0
                AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_100_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, d.CORR_TIME_TO_CRITICAL_DEPTH "label",
                CASE WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 2 THEN 0
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 4 AND d.CORR_TIME_TO_CRITICAL_DEPTH > 2 THEN 1
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH > 4 THEN 2
                ELSE d.CORR_TIME_TO_CRITICAL_DEPTH END "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID and e.current_indicator_lf='Y' and e.FEATURE_ID='INTERVAL_REGULAR' and e.length=100
                JOIN PODS.STATION_POINT sp ON sp.STATION_ID IN(e.STATION_ID_BEGIN, e.STATION_ID_END)
                JOIN PODS.COORDINATE c ON c.location_id = sp.location_id
                WHERE sp.LINE_ID != 0
                AND EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_VALVE_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_292_2007_VALUE_CONDITION,3) "label",
                CASE WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.03 THEN 'Исправное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.06 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.03 THEN 'Неисправное-работоспособное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.3 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.06 THEN 'Неработоспособное-ремонтнопригодное'
                WHEN d.STO_292_2007_VALUE_CONDITION &gt; 0.3 THEN 'Предельное'
                ELSE 'не рассчитано' END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_PER_OBJ'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_VALVE_DANGER_DEG" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, DANGER_DEG "label", DANGER_DEG "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_PER_OBJ'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_VALVE_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE,r.SEQUENCE,  SEGMENT_CATEGORY "label", SEGMENT_CATEGORY "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_PER_OBJ'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_VALVE_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, d.CORR_TIME_TO_CRITICAL_DEPTH "label",
                CASE WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 2 THEN 0
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 4 AND d.CORR_TIME_TO_CRITICAL_DEPTH > 2 THEN 1
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH > 4 THEN 2
                ELSE d.CORR_TIME_TO_CRITICAL_DEPTH END "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_PER_OBJ'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_292_2007_VALUE_CONDITION,3) "label",
                CASE WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.03 THEN 'Исправное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.06 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.03 THEN 'Неисправное-работоспособное'
                WHEN d.STO_292_2007_VALUE_CONDITION &lt;= 0.3 AND d.STO_292_2007_VALUE_CONDITION &gt; 0.06 THEN 'Неработоспособное-ремонтнопригодное'
                WHEN d.STO_292_2007_VALUE_CONDITION &gt; 0.3 THEN 'Предельное'
                ELSE 'не рассчитано' END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_TIME_LIMIT_EXPL" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_TIME_LIMIT_EXPL,5) "label",
                CASE WHEN d.STO_401_2003_TIME_LIMIT_EXPL &lt;= 2 THEN 0
                WHEN d.STO_401_2003_TIME_LIMIT_EXPL &lt;= 4 AND d.STO_401_2003_TIME_LIMIT_EXPL > 2 THEN 1
                WHEN d.STO_401_2003_TIME_LIMIT_EXPL > 4 THEN 1
                ELSE d.STO_401_2003_TIME_LIMIT_EXPL END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_OPTIM_TIM_BFR_ILI" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_OPTIM_TIM_BFR_ILI,5) "label",
                CASE WHEN d.STO_401_2003_OPTIM_TIM_BFR_ILI &lt;= 2 THEN 0
                WHEN d.STO_401_2003_OPTIM_TIM_BFR_ILI &lt;= 4 AND d.STO_401_2003_OPTIM_TIM_BFR_ILI > 2 THEN 1
                WHEN d.STO_401_2003_OPTIM_TIM_BFR_ILI > 4 THEN 2
                ELSE d.STO_401_2003_OPTIM_TIM_BFR_ILI END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_MIN_UNIT_COST_YKM" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_MIN_UNIT_COST_YKM,5) "label",
                CASE WHEN d.STO_401_2003_MIN_UNIT_COST_YKM &lt;= 100 THEN 2
                WHEN d.STO_401_2003_MIN_UNIT_COST_YKM &lt;= 1000 AND d.STO_401_2003_MIN_UNIT_COST_YKM > 100 THEN 1
                WHEN d.STO_401_2003_MIN_UNIT_COST_YKM > 1000 THEN 0
                ELSE d.STO_401_2003_MIN_UNIT_COST_YKM END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_FAILURE_PROBABLY" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_FAILURE_PROBABLY,5) "label",
                CASE WHEN d.STO_401_2003_FAILURE_PROBABLY &lt;= 0.3 THEN 0
                WHEN d.STO_401_2003_FAILURE_PROBABLY &lt;= 0.6 THEN 0.5
                WHEN d.STO_401_2003_FAILURE_PROBABLY &lt;= 1 THEN 1
                ELSE d.STO_401_2003_FAILURE_PROBABLY END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_OP_REP_PIPE_COUNT" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_OP_REP_PIPE_COUNT) "label",
                CASE WHEN d.STO_401_2003_OP_REP_PIPE_COUNT &lt;= 100 THEN 2
                WHEN d.STO_401_2003_OP_REP_PIPE_COUNT &lt;= 150 AND d.STO_401_2003_OP_REP_PIPE_COUNT > 100 THEN 1
                WHEN d.STO_401_2003_OP_REP_PIPE_COUNT > 150 THEN 0
                ELSE d.STO_401_2003_OP_REP_PIPE_COUNT END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_MEAN_TIME_FAIL" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_401_2003_MEAN_TIME_FAIL) "label",
                CASE WHEN d.STO_401_2003_MEAN_TIME_FAIL &lt;= 10 THEN 0
                WHEN d.STO_401_2003_MEAN_TIME_FAIL &lt;= 15 AND d.STO_401_2003_MEAN_TIME_FAIL > 10 THEN 1
                WHEN d.STO_401_2003_MEAN_TIME_FAIL > 15 THEN 2
                ELSE d.STO_401_2003_MEAN_TIME_FAIL END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_PROJECTED_SCC" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_095_2007_PROJECTED_SCC,5) "label",
                CASE WHEN d.STO_095_2007_PROJECTED_SCC &lt;= 0.3 THEN 0
                WHEN d.STO_095_2007_PROJECTED_SCC &lt;= 0.6 AND d.STO_095_2007_PROJECTED_SCC > 0.3 THEN 0.5
                WHEN d.STO_095_2007_PROJECTED_SCC &lt;= 1 AND d.STO_095_2007_PROJECTED_SCC > 0.6 THEN 1
                ELSE d.STO_095_2007_PROJECTED_SCC END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_NEXT_INSP_SCC" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, d.STO_095_2007_NEXT_INSP_SCC "label",
                CASE WHEN d.STO_095_2007_NEXT_INSP_SCC &lt;= 2 THEN 0
                WHEN d.STO_095_2007_NEXT_INSP_SCC &lt;= 4 AND d.STO_095_2007_NEXT_INSP_SCC > 2 THEN 1
                WHEN d.STO_095_2007_NEXT_INSP_SCC > 4 THEN 2
                ELSE d.STO_095_2007_NEXT_INSP_SCC END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_PROJECTED_COR" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, round(d.STO_095_2007_PROJECTED_COR,5) "label",
                CASE WHEN d.STO_095_2007_PROJECTED_COR &lt;= 0.3 THEN 0
                WHEN d.STO_095_2007_PROJECTED_COR &lt;= 0.6 AND d.STO_095_2007_PROJECTED_COR > 0.3 THEN 0.5
                WHEN d.STO_095_2007_PROJECTED_COR &lt;= 1 AND d.STO_095_2007_PROJECTED_COR > 0.6 THEN 1
                ELSE d.STO_095_2007_PROJECTED_COR END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_NEXT_INSP" comment="PODS.STO_ILI_INSPECTION_CALC" schema="PODS" table="STO_ILI_INSPECTION_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, d.STO_095_2007_NEXT_INSP "label",
                CASE WHEN d.STO_095_2007_NEXT_INSP &lt;= 2 THEN 0
                WHEN d.STO_095_2007_NEXT_INSP &lt;= 4 AND d.STO_095_2007_NEXT_INSP > 2 THEN 1
                WHEN d.STO_095_2007_NEXT_INSP > 4 THEN 2
                ELSE d.STO_095_2007_NEXT_INSP END "type"
                FROM PODS.STO_ILI_INSPECTION_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_DANGER_DEG" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, DANGER_DEG "label", DANGER_DEG "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, SEGMENT_CATEGORY "label", SEGMENT_CATEGORY "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="PODS_STO_RANGE_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC" schema="PODS" table="STO_EHZ_CALC">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT e.EVENT_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE MEASURE, r.SEQUENCE, d.CORR_TIME_TO_CRITICAL_DEPTH "label",
                CASE WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 2 THEN 0
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH &lt;= 4 AND d.CORR_TIME_TO_CRITICAL_DEPTH > 2 THEN 1
                WHEN d.CORR_TIME_TO_CRITICAL_DEPTH > 4 THEN 2
                ELSE d.CORR_TIME_TO_CRITICAL_DEPTH END "type"
                FROM PODS.STO_EHZ_CALC d
                JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y' AND e.FEATURE_ID='INTERVAL_LAN_REC'
                JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY ID, SEQUENCE, MEASURE
            </query>
        </geoQuery>
    </select>
</data>
<data id="INFOTEH_REPAIR" comment="GIS_INTEGRATION50.INFOTEH_REPAIR" schema="GIS_INTEGRATION50" table="INFOTEH_REPAIR">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y,  d.descr "label",d.descr "type"
                FROM GIS_INTEGRATION50.INFOTEH_REPAIR d
                JOIN PODS.ILI_DATA dc on d.ili_data_id=dc.ili_data_id
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = dc.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT 1 FROM granted_location ge WHERE c.LOCATION_ID = ge.LOCATION_ID )) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>

<data id="INFOTEH_EXCAVATE" comment="GIS_INTEGRATION50.INFOTEH_EXCAVATE" schema="GIS_INTEGRATION50" table="INFOTEH_EXCAVATE">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y,  coalesce((d.length)::text,'НД')||' х '||coalesce(d.width::text,'НД') "label",null::text "type"
                FROM GIS_INTEGRATION50.INFOTEH_EXCAVATE d
                JOIN PODS.ILI_DATA dc on d.ili_data_id=dc.ili_data_id
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = dc.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT 1 FROM granted_location ge WHERE c.LOCATION_ID = ge.LOCATION_ID )) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>

<data id="PODS_STO_DATE_TEST" comment="Прогнозный год повторной диагностики дефекта " schema="PODS" table="STO_ILI_DATA_CALC_ADV">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, round(dc.R_620_2011_DATE_TEST,1) "label",
                CASE WHEN dc.R_620_2011_DATE_TEST  - extract(year from current_date)::NUMERIC &lt;= 5 THEN 0
                WHEN dc.R_620_2011_DATE_TEST  - extract(year from current_date)::NUMERIC &lt;= 10 AND dc.R_620_2011_DATE_TEST  - extract(year from current_date)::NUMERIC &gt; 5 THEN 0.5
                WHEN dc.R_620_2011_DATE_TEST  - extract(year from current_date)::NUMERIC &lt;= 100 AND dc.R_620_2011_DATE_TEST  - extract(year from current_date)::NUMERIC &gt; 10 THEN 1
                ELSE null END "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC_ADV dc on d.ili_data_id=dc.ili_data_id and dc.R_620_2011_DATE_TEST is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>

<data id="PODS_STO_DATE_REPAIR" comment="Прогнозный год ремонта дефекта" schema="PODS" table="STO_ILI_DATA_CALC_ADV">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, round(dc.R_620_2011_DATE_REPAIR,1) "label",
                CASE WHEN dc.R_620_2011_DATE_REPAIR - extract(year from current_date)::NUMERIC &lt;= 5 THEN 0
                WHEN dc.R_620_2011_DATE_REPAIR - extract(year from current_date)::NUMERIC &lt;= 10 AND dc.R_620_2011_DATE_REPAIR - extract(year from current_date)::NUMERIC &gt; 5 THEN 0.5
                WHEN dc.R_620_2011_DATE_REPAIR - extract(year from current_date)::NUMERIC &lt;= 100 AND dc.R_620_2011_DATE_REPAIR  - extract(year from current_date)::NUMERIC &gt; 10 THEN 1
                ELSE null END "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC_ADV dc on d.ili_data_id=dc.ili_data_id and dc.R_620_2011_DATE_REPAIR is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>

<data id="PODS_LTG_KOCHETKOVA" comment="Метод Кочетковой срок до разрушения" schema="PODS" table="STO_ILI_DATA_CALC_ADV">
    <select>
        <geoQuery idField="ID" geoField="X,Y">
            <param name="USER_ID" type="Int64"/>
            <var name="FILTER" default="1=1"/>
            <var name="ILI_INSP_FILTER" default="SELECT ILI_INSPECTION_ID FROM PODS.ILI_INSPECTION"/>
            <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
            <query>
                WITH granted_station  AS  (SELECT station_id  FROM PODS.LOCATION l  JOIN PODS.STATION_POINT sp  ON L.LOCATION_ID = SP.LOCATION_ID  WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER})),  granted_events  AS (SELECT event_id  FROM PODS.EVENT_RANGE er  WHERE EXISTS (SELECT 1  FROM granted_station gs  WHERE er.station_id_begin = gs.station_id ))
                SELECT * FROM
                (
                SELECT d.ILI_DATA_ID ID, d.ILI_INSPECTION_ID, c.X_COORD X, c.Y_COORD Y, round(dc.LTG_TIME_TO_DESTROY,1) "label",
                CASE WHEN dc.LTG_TIME_TO_DESTROY &lt;= 5 THEN 0
                WHEN dc.LTG_TIME_TO_DESTROY &lt;= 10 AND dc.LTG_TIME_TO_DESTROY &gt; 5 THEN 0.5
                WHEN dc.LTG_TIME_TO_DESTROY &lt;= 100 AND dc.LTG_TIME_TO_DESTROY &gt; 10 THEN 1
                ELSE null END "type"
                FROM PODS.ILI_DATA d
                JOIN PODS.STO_ILI_DATA_CALC_ADV dc on d.ili_data_id=dc.ili_data_id and dc.LTG_TIME_TO_DESTROY is not null
                JOIN PODS.COORDINATE c ON c.COORDINATE_ID = d.COORDINATE_ID
                WHERE c.LOCATION_ID != -1
                AND EXISTS (SELECT event_id FROM granted_events ge WHERE ge.event_id = d.EVENT_ID) ) d
                WHERE ILI_INSPECTION_ID IN ({ILI_INSP_FILTER}) AND {FILTER} ORDER BY Y desc, X
            </query>
        </geoQuery>
    </select>
</data>

    <data id="PODS_STO_PIPE_SEGMENT_PARAMS" comment="PODS.STO_PIPE_SEGMENT_PARAMS" schema="PODS" table="STO_PIPE_SEGMENT_PARAMS">
        <select>
            <geoQuery idField="ID" geoField="X,Y">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    WITH granted_location    AS (SELECT location_id           FROM PODS.LOCATION l          WHERE CASE WHEN L.SRV_DISTRICT_GCL IS NULL THEN 0 ELSE L.SRV_DISTRICT_GCL END IN ({LPU_ACCESS_FILTER}))
                    SELECT ID,X,Y,LABEL, TYPE,line_id
                    FROM
                    (SELECT e.EVENT_ID ID, c.X_COORD X, c.Y_COORD Y, sp.MEASURE, d.route_id "sequence", d.nominal_wall_thickness_gcl||' мм' "label",sp1.line_id
                    ,d.PIPE_SEGMENT_MANUFACTURER_CL "type"
                    FROM PODS.STO_PIPE_SEGMENT_PARAMS d
                    JOIN PODS.EVENT_RANGE e ON e.EVENT_ID = d.EVENT_ID AND e.CURRENT_INDICATOR_LF = 'Y'
                    JOIN pods.STATION_POINT sp1 ON sp1.STATION_ID = e.STATION_ID_BEGIN
                    JOIN pods.STATION_POINT sp2 ON sp2.STATION_ID = e.STATION_ID_END
                    JOIN pods.route r1 ON r1.route_id = sp1.route_id AND r1.line_id != 0
                    JOIN pods.route r2 ON r2.route_id = sp2.route_id AND r2.line_id = r1.line_id
                    JOIN pods.route r ON r.route_id IN (r1.route_id, r2.route_id) OR (r.line_id = r1.line_id AND r.sequence &gt; r1.sequence AND r2.sequence &gt; r.sequence)
                    JOIN pods.station_point sp ON sp.route_id = r.route_id AND sp.type_cl IN ('ST_POINT_TYPE_01','ST_POINT_TYPE_02','ST_POINT_TYPE_03')
                    AND (r.route_id!=r1.route_id OR sp.measure &gt;= sp1.measure)
                    AND (r.route_id!=r2.route_id OR sp.measure &lt;= sp2.measure)
                    JOIN PODS.COORDINATE c ON c.LOCATION_ID = sp.LOCATION_ID  AND c.TYPE_CL != 'ASG'
                    WHERE EXISTS (SELECT 1 FROM granted_location gl WHERE gl.location_id = sp.location_id)) d
                    WHERE {FILTER} ORDER BY ID, SEQUENCE, MEASURE
                </query>
            </geoQuery>
        </select>
        <insert>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;

                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;

                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </insert>
        <update>
            <geoCommand proc="GET_LPU">
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <object>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </object>
                <coord>
                    DECLARE
                    v_grant VARCHAR2(7);
                    BEGIN
                    BEGIN
                    WITH granted_lpu
                    AS (SELECT rf.value srv_district_id
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    JOIN web50.b_policy_rule_filters rf
                    ON pr.rule_id = rf.rule_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL'
                    AND rf.operator = '='),
                    some_grants
                    AS (SELECT 1
                    FROM web50.b_user_to_b_role u2r
                    JOIN web50.b_role_to_b_policy r2p
                    ON u2r.role_id = r2p.role_id
                    JOIN web50.b_policy_rules pr
                    ON r2p.policy_id = pr.policy_id
                    WHERE user_id = :USER_ID
                    AND pr.class_id = 'PODS_SRV_DISTRICT_GCL' and pr.select_permitted &gt; 0)
                    SELECT 'Granted' status
                    INTO v_grant
                    FROM dual
                    WHERE (EXISTS (SELECT 1
                    FROM granted_lpu gl
                    WHERE TO_CHAR(:LPU_ID) = gl.srv_district_id)
                    AND EXISTS (SELECT 1 FROM some_grants))
                    OR NOT EXISTS (SELECT 1 FROM some_grants);


                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20772,'Вы пытаетесь внести данные вне установленных ограничений по геометрии. Бланк объекта сохранен. Свяжитесь с администратором.');
                    WHEN OTHERS THEN
                    RAISE;
                    END;


                    DECLARE
                    loc_id   NUMERIC (16, 0);
                    sp_id    NUMERIC (16, 0);
                    BEGIN
                    IF :SEQ=0 OR :BACK_SEQ=0 THEN
                    SELECT MAX(sp.station_id) INTO sp_id
                    FROM pods.coordinate  c
                    JOIN pods.station_point sp ON sp.location_id = c.location_id
                    WHERE ROUND(c.X_COORD,6)*1000000000+ROUND(c.Y_COORD,6)=ROUND(:X,6)*1000000000+ROUND(:Y,6)
                    AND sp.route_id != 0;

                    IF sp_id IS NULL THEN
                    INSERT INTO PODS.LOCATION(SRV_DISTRICT_GCL)
                    VALUES (:LPU_ID)
                    RETURNING LOCATION_ID INTO loc_id;

                    INSERT INTO PODS.COORDINATE  (COORDINATE_SOURCE_ID, TYPE_CL,
                    LOCATION_ID, X_COORD, Y_COORD, Z_COORD, HORIZ_INDICATOR_LF,
                    VERT_INDICATOR_LF, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES (0, 'USR', loc_id, :X, :Y, :Z, 'Y', 'N', 'Y', SYSDATE, :PODS_USER,SYSDATE);

                    INSERT INTO PODS.STATION_POINT (TYPE_CL, LOCATION_ID, LINE_ID,
                    SERIES, STATION, SERIES_ID, ROUTE_ID, MEASURE, PODS_USER, CREATE_DATE)
                    VALUES ('ST_POINT_TYPE_02', loc_id, 0, 0, 0, 0, 0, 0, :PODS_USER, SYSDATE)
                    RETURNING STATION_ID INTO sp_id;
                    END IF;

                    IF :SEQ=0 THEN
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_BEGIN = sp_id, STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    ELSE
                    UPDATE PODS.EVENT_RANGE
                    SET STATION_ID_END = sp_id
                    WHERE EVENT_ID = :ID;
                    END IF;
                    END IF;
                    END;

                    END;
                </coord>
            </geoCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE SET STATION_ID_BEGIN = 0, STATION_ID_END = 0 WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
</root>
