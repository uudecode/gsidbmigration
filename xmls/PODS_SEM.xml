<root version="6.0.2.7">
    <data table="ACTIVITY_ZONE" schema="PODS" id="PODS_ACTIVITY_ZONE" comment="PODS.ACTIVITY_ZONE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ACTIVITY_ZONE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="ZONE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ACTIVITY_ZONE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ACTIVITY_ZONE(EVENT_ID,EVENT_GUID,ZONE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ZONE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="ZONE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ACTIVITY_ZONE
                    SET EVENT_GUID=:EVENT_GUID,ZONE_CL=:ZONE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ACTIVITY_ZONE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ACTIVITY_ZONE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ACTIVITY_ZONE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ACTIVITY_ZONE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ANODE" schema="PODS" id="PODS_ANODE" comment="PODS.ANODE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ANODE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ANODE_MASS" default="" type="Decimal"/>
                <param name="MODEL" default="" type="String"/>
                <param name="GROUND_BED_EVENT_ID" default="" type="Decimal"/>
                <param name="GROUND_BED_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="ANODE_DIAMETER" default="0" type="Decimal"/>
                <param name="ANODE_LENGTH" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PACKAGE_FILL_CL" default="UNKNOWN" type="String"/>
                <param name="PACKAGE_DIAMETER" default="0" type="Decimal"/>
                <param name="PACKAGE_LENGTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="GALVANIC_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ANODE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ANODE(EVENT_ID,EVENT_GUID,TYPE_CL,ANODE_MASS,MODEL,GROUND_BED_EVENT_ID,GROUND_BED_EVENT_GUID,DESCRIPTION,DEPTH_OF_COVER,BACK_FILL_MATERIAL_GCL,ANODE_DIAMETER,ANODE_LENGTH,MANUFACTURER_CL,MATERIAL_CL,PACKAGE_FILL_CL,PACKAGE_DIAMETER,PACKAGE_LENGTH,DATE_INSTALLED,GALVANIC_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:ANODE_MASS,:MODEL,:GROUND_BED_EVENT_ID,:GROUND_BED_EVENT_GUID,:DESCRIPTION,:DEPTH_OF_COVER,:BACK_FILL_MATERIAL_GCL,:ANODE_DIAMETER,:ANODE_LENGTH,:MANUFACTURER_CL,:MATERIAL_CL,:PACKAGE_FILL_CL,:PACKAGE_DIAMETER,:PACKAGE_LENGTH,:DATE_INSTALLED,:GALVANIC_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ANODE_MASS" default="" type="Decimal"/>
                <param name="MODEL" default="" type="String"/>
                <param name="GROUND_BED_EVENT_ID" default="" type="Decimal"/>
                <param name="GROUND_BED_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="ANODE_DIAMETER" default="0" type="Decimal"/>
                <param name="ANODE_LENGTH" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PACKAGE_FILL_CL" default="UNKNOWN" type="String"/>
                <param name="PACKAGE_DIAMETER" default="0" type="Decimal"/>
                <param name="PACKAGE_LENGTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="GALVANIC_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN
                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ANODE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,ANODE_MASS=:ANODE_MASS,MODEL=:MODEL,GROUND_BED_EVENT_ID=:GROUND_BED_EVENT_ID,GROUND_BED_EVENT_GUID=:GROUND_BED_EVENT_GUID,DESCRIPTION=:DESCRIPTION,DEPTH_OF_COVER=:DEPTH_OF_COVER,BACK_FILL_MATERIAL_GCL=:BACK_FILL_MATERIAL_GCL,ANODE_DIAMETER=:ANODE_DIAMETER,ANODE_LENGTH=:ANODE_LENGTH,MANUFACTURER_CL=:MANUFACTURER_CL,MATERIAL_CL=:MATERIAL_CL,PACKAGE_FILL_CL=:PACKAGE_FILL_CL,PACKAGE_DIAMETER=:PACKAGE_DIAMETER,PACKAGE_LENGTH=:PACKAGE_LENGTH,DATE_INSTALLED=:DATE_INSTALLED,GALVANIC_LF=:GALVANIC_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ANODE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;
                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.PI_ANODE_READING
                    SET REF_ANODE_EVENT_ID = NULL
                    WHERE REF_ANODE_EVENT_ID = :ID;

                    DELETE
                    FROM PODS.ANODE
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_ANODE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_ANODE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="BOND_LEAD" schema="PODS" id="PODS_BOND_LEAD" comment="PODS.BOND_LEAD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.BOND_LEAD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="MAX_RESISTANCE" default="" type="Decimal"/>
                <param name="BONDED_COMPANY_CL" default="UNKNOWN" type="String"/>
                <param name="RESISTOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="RESISTOR_POWER_RATING" default="" type="Decimal"/>
                <param name="GAUGE_SIZE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'BOND_LEAD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.BOND_LEAD(EVENT_ID,EVENT_GUID,NAME,MATERIAL_CL,DESCRIPTION,TYPE_CL,DATE_INSTALLED,REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID,MAX_RESISTANCE,BONDED_COMPANY_CL,RESISTOR_TYPE_CL,RESISTOR_POWER_RATING,GAUGE_SIZE_CL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:MATERIAL_CL,:DESCRIPTION,:TYPE_CL,:DATE_INSTALLED,:REF_TEST_LEAD_EVENT_ID,:REF_TEST_LEAD_EVENT_GUID,:MAX_RESISTANCE,:BONDED_COMPANY_CL,:RESISTOR_TYPE_CL,:RESISTOR_POWER_RATING,:GAUGE_SIZE_CL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="MAX_RESISTANCE" default="" type="Decimal"/>
                <param name="BONDED_COMPANY_CL" default="UNKNOWN" type="String"/>
                <param name="RESISTOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="RESISTOR_POWER_RATING" default="" type="Decimal"/>
                <param name="GAUGE_SIZE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.BOND_LEAD
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,MATERIAL_CL=:MATERIAL_CL,DESCRIPTION=:DESCRIPTION,TYPE_CL=:TYPE_CL,DATE_INSTALLED=:DATE_INSTALLED,REF_TEST_LEAD_EVENT_ID=:REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID=:REF_TEST_LEAD_EVENT_GUID,MAX_RESISTANCE=:MAX_RESISTANCE,BONDED_COMPANY_CL=:BONDED_COMPANY_CL,RESISTOR_TYPE_CL=:RESISTOR_TYPE_CL,RESISTOR_POWER_RATING=:RESISTOR_POWER_RATING,GAUGE_SIZE_CL=:GAUGE_SIZE_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BOND_LEAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.PI_BOND_READING
                    SET REF_BOND_LEAD_EVENT_ID = NULL
                    WHERE REF_BOND_LEAD_EVENT_ID = :ID;

                    DELETE
                    FROM PODS.BOND_LEAD
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_BOND_LEAD/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_BOND_LEAD/'||CAST(:ID AS VARCHAR(30));


                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="BRANCH_CONNECT" schema="PODS" id="PODS_BRANCH_CONNECT" comment="PODS.BRANCH_CONNECT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.BRANCH_CONNECT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="TAP_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'BRANCH_CONNECT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.BRANCH_CONNECT(EVENT_ID,EVENT_GUID,TYPE_CL,NOMINAL_WALL_THICKNESS_GCL,NOMINAL_DIAMETER_GCL,MANUFACTURER_CL,DATE_MANUFACTURED,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,TAP_METHOD_GCL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:NOMINAL_WALL_THICKNESS_GCL,:NOMINAL_DIAMETER_GCL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:TAP_METHOD_GCL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="TAP_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.BRANCH_CONNECT
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,TAP_METHOD_GCL=:TAP_METHOD_GCL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_BRANCH_CONNECT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.BRANCH_CONNECT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_BRANCH_CONNECT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_BRANCH_CONNECT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CASING" schema="PODS" id="PODS_CASING" comment="PODS.CASING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CASING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="CROSSING_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="INSULATOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="VENTED_INDICATOR_LF" default="" type="String"/>
                <param name="QUANTITY_OF_VENTS" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="UNKNOWN" type="Decimal"/>
                <param name="PIPE_GRADE_GCL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CASING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CASING(EVENT_ID,EVENT_GUID,CROSSING_TYPE_GCL,INSULATOR_TYPE_CL,SEAL_TYPE_CL,VENTED_INDICATOR_LF,QUANTITY_OF_VENTS,MANUFACTURER_CL,DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL,MATERIAL_CL,PIPE_SPECIFICATION_GCL,SMYS_GCL,PIPE_GRADE_GCL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,LENGTH,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:CROSSING_TYPE_GCL,:INSULATOR_TYPE_CL,:SEAL_TYPE_CL,:VENTED_INDICATOR_LF,:QUANTITY_OF_VENTS,:MANUFACTURER_CL,:DATE_MANUFACTURED,:PIPE_MILL_LOCATION_GCL,:MATERIAL_CL,:PIPE_SPECIFICATION_GCL,:SMYS_GCL,:PIPE_GRADE_GCL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:LENGTH,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="CROSSING_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="INSULATOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="VENTED_INDICATOR_LF" default="" type="String"/>
                <param name="QUANTITY_OF_VENTS" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="UNKNOWN" type="Decimal"/>
                <param name="PIPE_GRADE_GCL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CASING
                    SET EVENT_GUID=:EVENT_GUID,CROSSING_TYPE_GCL=:CROSSING_TYPE_GCL,INSULATOR_TYPE_CL=:INSULATOR_TYPE_CL,SEAL_TYPE_CL=:SEAL_TYPE_CL,VENTED_INDICATOR_LF=:VENTED_INDICATOR_LF,QUANTITY_OF_VENTS=:QUANTITY_OF_VENTS,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL=:PIPE_MILL_LOCATION_GCL,MATERIAL_CL=:MATERIAL_CL,PIPE_SPECIFICATION_GCL=:PIPE_SPECIFICATION_GCL,SMYS_GCL=:SMYS_GCL,PIPE_GRADE_GCL=:PIPE_GRADE_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,LENGTH=:LENGTH,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CASING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.CASING
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.PI_CASING_READING
                    SET REF_CASING_EVENT_ID = NULL
                    WHERE REF_CASING_EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_CASING/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_CASING/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CATHODIC_PROTECTION_RANGE" schema="PODS" id="PODS_CATHODIC_PROTECTION_RANGE" comment="PODS.CATHODIC_PROTECTION_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CATHODIC_PROTECTION_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CATHODICALLY_PROTECTED_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CATH_PROT_RNG',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CATHODIC_PROTECTION_RANGE(EVENT_ID,EVENT_GUID,TYPE_CL,DESCRIPTION,CATHODICALLY_PROTECTED_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:DESCRIPTION,:CATHODICALLY_PROTECTED_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CATHODICALLY_PROTECTED_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CATHODIC_PROTECTION_RANGE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,CATHODICALLY_PROTECTED_LF=:CATHODICALLY_PROTECTED_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CATHODIC_PROTECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.CATHODIC_PROTECTION_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CATHODIC_PROTECTION_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CATHODIC_PROTECTION_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CHEMICAL_INJECTION_LOG" schema="PODS" id="PODS_CHEMICAL_INJECTION_LOG" comment="PODS.CHEMICAL_INJECTION_LOG">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CHEMICAL_INJECTION_LOG t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CHEMICAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CHEMICAL_MEASUREMENT" default="" type="Decimal"/>
                <param name="REF_CHEMICAL_INJECTOR_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_CHEM_INJECTOR_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CHEM_INJECT_LOG',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CHEMICAL_INJECTION_LOG(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,CHEMICAL_TYPE_CL,CHEMICAL_MEASUREMENT,REF_CHEMICAL_INJECTOR_EVENT_ID,REF_CHEM_INJECTOR_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:CHEMICAL_TYPE_CL,:CHEMICAL_MEASUREMENT,:REF_CHEMICAL_INJECTOR_EVENT_ID,:REF_CHEM_INJECTOR_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CHEMICAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CHEMICAL_MEASUREMENT" default="" type="Decimal"/>
                <param name="REF_CHEMICAL_INJECTOR_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_CHEM_INJECTOR_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CHEMICAL_INJECTION_LOG
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,CHEMICAL_TYPE_CL=:CHEMICAL_TYPE_CL,CHEMICAL_MEASUREMENT=:CHEMICAL_MEASUREMENT,REF_CHEMICAL_INJECTOR_EVENT_ID=:REF_CHEMICAL_INJECTOR_EVENT_ID,REF_CHEM_INJECTOR_EVENT_GUID=:REF_CHEM_INJECTOR_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1

                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTION_LOG'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.CHEMICAL_INJECTION_LOG
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CHEMICAL_INJECTION_LOG/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CHEMICAL_INJECTION_LOG/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CHEMICAL_INJECTOR" schema="PODS" id="PODS_CHEMICAL_INJECTOR" comment="PODS.CHEMICAL_INJECTOR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CHEMICAL_INJECTOR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INJECTOR_NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CHEM_INJECT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CHEMICAL_INJECTOR(EVENT_ID,EVENT_GUID,INJECTOR_NAME,DATE_INSTALLED,DESCRIPTION,TYPE_CL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INJECTOR_NAME,:DATE_INSTALLED,:DESCRIPTION,:TYPE_CL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INJECTOR_NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CHEMICAL_INJECTOR
                    SET EVENT_GUID=:EVENT_GUID,INJECTOR_NAME=:INJECTOR_NAME,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,TYPE_CL=:TYPE_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CHEMICAL_INJECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE EVENT_ID = (SELECT EVENT_ID
                    FROM PODS.CHEMICAL_INJECTION_LOG
                    WHERE REF_CHEMICAL_INJECTOR_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT  'PODS_CHEMICAL_INJECTION_LOG/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.CHEMICAL_INJECTION_LOG
                    WHERE REF_CHEMICAL_INJECTOR_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT  'PODS_CHEMICAL_INJECTION_LOG/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.CHEMICAL_INJECTION_LOG
                    WHERE REF_CHEMICAL_INJECTOR_EVENT_ID = :ID);


                    DELETE
                    FROM PODS.CHEMICAL_INJECTION_LOG
                    WHERE REF_CHEMICAL_INJECTOR_EVENT_ID = :ID;

                    DELETE
                    FROM PODS.CHEMICAL_INJECTOR
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_CHEMICAL_INJECTOR/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_CHEMICAL_INJECTOR/'||CAST(:ID AS VARCHAR(30));



                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CLOSURE" schema="PODS" id="PODS_CLOSURE" comment="PODS.CLOSURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CLOSURE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CLOSURE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CLOSURE(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,DATE_MANUFACTURED,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,MATERIAL_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:MATERIAL_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CLOSURE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CLOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.CLOSURE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CLOSURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CLOSURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COLLAR" schema="PODS" id="PODS_COLLAR" comment="PODS.COLLAR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.COLLAR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="COLLAR_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="HEAT_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="INTERNAL_NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="EXTERNAL_NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FITTING_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'COLLAR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.COLLAR(EVENT_ID,EVENT_GUID,COLLAR_ID,TYPE_CL,SERIAL_NUMBER,HEAT_NUMBER,PART_NUMBER,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,MANUFACTURER_CL,DATE_MANUFACTURED,COATING_TYPE_SCL,COATING_SUBTYPE_SCL,INTERNAL_NOMINAL_DIAMETER_GCL,EXTERNAL_NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,MATERIAL_CL,FITTING_TYPE_CL,MAX_DEPTH,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:TYPE_CL,:SERIAL_NUMBER,:HEAT_NUMBER,:PART_NUMBER,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:MANUFACTURER_CL,:DATE_MANUFACTURED,REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),:INTERNAL_NOMINAL_DIAMETER_GCL,:EXTERNAL_NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:MATERIAL_CL,:FITTING_TYPE_CL,:MAX_DEPTH,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="COLLAR_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="HEAT_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="INTERNAL_NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="EXTERNAL_NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FITTING_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COLLAR
                    SET EVENT_GUID=:EVENT_GUID,COLLAR_ID=:COLLAR_ID,TYPE_CL=:TYPE_CL,SERIAL_NUMBER=:SERIAL_NUMBER,HEAT_NUMBER=:HEAT_NUMBER,PART_NUMBER=:PART_NUMBER,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,COATING_TYPE_SCL=REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),COATING_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),INTERNAL_NOMINAL_DIAMETER_GCL=:INTERNAL_NOMINAL_DIAMETER_GCL,EXTERNAL_NOMINAL_DIAMETER_GCL=:EXTERNAL_NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,MATERIAL_CL=:MATERIAL_CL,FITTING_TYPE_CL=:FITTING_TYPE_CL,MAX_DEPTH=:MAX_DEPTH,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLAR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.COLLAR
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_COLLAR/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_COLLAR/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COLLET_CONNECTOR" schema="PODS" id="PODS_COLLET_CONNECTOR" comment="PODS.COLLET_CONNECTOR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.COLLET_CONNECTOR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="CONNECTOR_ID" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_EXT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_INT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'COLLET_CONNECTOR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.COLLET_CONNECTOR(EVENT_ID,EVENT_GUID,CONNECTOR_ID,SERIAL_NUMBER,PART_NUMBER,TYPE_CL,MATERIAL_CL,MANUFACTURER_CL,DATE_MANUFACTURED,SPECIFICATION_CL,MILL_TEST_PRESSURE,NOMINAL_EXT_PRESSURE_RATING,NOMINAL_INT_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:SERIAL_NUMBER,:PART_NUMBER,:TYPE_CL,:MATERIAL_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SPECIFICATION_CL,:MILL_TEST_PRESSURE,:NOMINAL_EXT_PRESSURE_RATING,:NOMINAL_INT_PRESSURE_RATING,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="CONNECTOR_ID" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_EXT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_INT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COLLET_CONNECTOR
                    SET EVENT_GUID=:EVENT_GUID,CONNECTOR_ID=:CONNECTOR_ID,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,TYPE_CL=:TYPE_CL,MATERIAL_CL=:MATERIAL_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SPECIFICATION_CL=:SPECIFICATION_CL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,NOMINAL_EXT_PRESSURE_RATING=:NOMINAL_EXT_PRESSURE_RATING,NOMINAL_INT_PRESSURE_RATING=:NOMINAL_INT_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COLLET_CONNECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.COLLET_CONNECTOR
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_COLLET_CONNECTOR/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_COLLET_CONNECTOR/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CONCRETE_SLAB" schema="PODS" id="PODS_CONCRETE_SLAB" comment="PODS.CONCRETE_SLAB">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CONCRETE_SLAB t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="WEIGHT" default="" type="Decimal"/>
                <param name="THICKNESS" default="0" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CONCRETE_SLAB',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CONCRETE_SLAB(EVENT_ID,EVENT_GUID,NAME,WEIGHT,THICKNESS,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:WEIGHT,:THICKNESS,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="WEIGHT" default="" type="Decimal"/>
                <param name="THICKNESS" default="0" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CONCRETE_SLAB
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,WEIGHT=:WEIGHT,THICKNESS=:THICKNESS,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CONCRETE_SLAB'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.CONCRETE_SLAB
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CONCRETE_SLAB/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CONCRETE_SLAB/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COUNTY_BOUNDARY" schema="PODS" id="PODS_COUNTY_BOUNDARY" comment="PODS.COUNTY_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.COUNTY_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="FIPS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'COUNTY_BOUNDARY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.COUNTY_BOUNDARY(EVENT_ID,EVENT_GUID,STATE_GCL,FIPS_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:STATE_GCL,:FIPS_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="FIPS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COUNTY_BOUNDARY
                    SET EVENT_GUID=:EVENT_GUID,STATE_GCL=:STATE_GCL,FIPS_CL=:FIPS_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUNTY_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.COUNTY_BOUNDARY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_COUNTY_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_COUNTY_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COUPON_SITE" schema="PODS" id="PODS_COUPON_SITE" comment="PODS.COUPON_SITE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.COUPON_SITE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="BEARING_FROM_LINE" default="" type="String"/>
                <param name="OFFSET" default="" type="Decimal"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="NUMBER_OF_COUPONS" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'COUPON_SITE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.COUPON_SITE(EVENT_ID,EVENT_GUID,TYPE_CL,DESCRIPTION,NAME,MODEL,DIRECTION_GCL,BEARING_FROM_LINE,OFFSET,BACK_FILL_MATERIAL_GCL,NUMBER_OF_COUPONS,DATE_INSTALLED,REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID,MANUFACTURER_CL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:DESCRIPTION,:NAME,:MODEL,:DIRECTION_GCL,:BEARING_FROM_LINE,:OFFSET,:BACK_FILL_MATERIAL_GCL,:NUMBER_OF_COUPONS,:DATE_INSTALLED,:REF_TEST_LEAD_EVENT_ID,:REF_TEST_LEAD_EVENT_GUID,:MANUFACTURER_CL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="BEARING_FROM_LINE" default="" type="String"/>
                <param name="OFFSET" default="" type="Decimal"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="NUMBER_OF_COUPONS" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COUPON_SITE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,NAME=:NAME,MODEL=:MODEL,DIRECTION_GCL=:DIRECTION_GCL,BEARING_FROM_LINE=:BEARING_FROM_LINE,OFFSET=:OFFSET,BACK_FILL_MATERIAL_GCL=:BACK_FILL_MATERIAL_GCL,NUMBER_OF_COUPONS=:NUMBER_OF_COUPONS,DATE_INSTALLED=:DATE_INSTALLED,REF_TEST_LEAD_EVENT_ID=:REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID=:REF_TEST_LEAD_EVENT_GUID,MANUFACTURER_CL=:MANUFACTURER_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.COUPON
                    SET COUPON_SITE_EVENT_ID = NULL
                    WHERE COUPON_SITE_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.COUPON_SITE
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_COUPON_SITE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_COUPON_SITE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="CUSTOMER_INTERRUPT" schema="PODS" id="PODS_CUSTOMER_INTERRUPT" comment="PODS.CUSTOMER_INTERRUPT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.CUSTOMER_INTERRUPT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'CUST_INTER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.CUSTOMER_INTERRUPT(EVENT_ID,EVENT_GUID,STATUS_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:STATUS_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.CUSTOMER_INTERRUPT
                    SET EVENT_GUID=:EVENT_GUID,STATUS_CL=:STATUS_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CUSTOMER_INTERRUPT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.CUSTOMER_INTERRUPT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CUSTOMER_INTERRUPT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CUSTOMER_INTERRUPT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DEPTH_OF_COVER" schema="PODS" id="PODS_DEPTH_OF_COVER" comment="PODS.DEPTH_OF_COVER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.DEPTH_OF_COVER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'DEPTH_OF_COVER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.DEPTH_OF_COVER(EVENT_ID,EVENT_GUID,MEASUREMENT,MEASUREMENT_METHOD_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MEASUREMENT,:MEASUREMENT_METHOD_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DEPTH_OF_COVER
                    SET EVENT_GUID=:EVENT_GUID,MEASUREMENT=:MEASUREMENT,MEASUREMENT_METHOD_CL=:MEASUREMENT_METHOD_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DEPTH_OF_COVER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.DEPTH_OF_COVER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DEPTH_OF_COVER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DEPTH_OF_COVER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DOT_CLASS" schema="PODS" id="PODS_DOT_CLASS" comment="PODS.DOT_CLASS">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.DOT_CLASS t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RATING_CL" default="UNKNOWN" type="String"/>
                <param name="DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'DOT_CLASS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.DOT_CLASS(EVENT_ID,EVENT_GUID,RATING_CL,DESIGN_CL,METHOD_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:RATING_CL,:DESIGN_CL,:METHOD_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RATING_CL" default="UNKNOWN" type="String"/>
                <param name="DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DOT_CLASS
                    SET EVENT_GUID=:EVENT_GUID,RATING_CL=:RATING_CL,DESIGN_CL=:DESIGN_CL,METHOD_CL=:METHOD_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DOT_CLASS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.DOT_CLASS
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DOT_CLASS/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DOT_CLASS/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DRAG_REDUCING_AGENT" schema="PODS" id="PODS_DRAG_REDUCING_AGENT" comment="PODS.DRAG_REDUCING_AGENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.DRAG_REDUCING_AGENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DRA_SKID_ID" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="INJECTION_RATE" default="" type="Decimal"/>
                <param name="INJECTION_RATE_OUOM" default="" type="String"/>
                <param name="TANK_VOLUME" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'DRG_RED_AGNT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.DRAG_REDUCING_AGENT(EVENT_ID,EVENT_GUID,DRA_SKID_ID,MANUFACTURER_CL,MATERIAL_CL,INJECTION_RATE,INJECTION_RATE_OUOM,TANK_VOLUME,SOURCE_GCL,COMMENTS,DESCRIPTION)
                    VALUES(:ID,:EVENT_GUID,:DRA_SKID_ID,:MANUFACTURER_CL,:MATERIAL_CL,:INJECTION_RATE,:INJECTION_RATE_OUOM,:TANK_VOLUME,:SOURCE_GCL,:COMMENTS,:DESCRIPTION);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DRA_SKID_ID" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="INJECTION_RATE" default="" type="Decimal"/>
                <param name="INJECTION_RATE_OUOM" default="" type="String"/>
                <param name="TANK_VOLUME" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DRAG_REDUCING_AGENT
                    SET EVENT_GUID=:EVENT_GUID,DRA_SKID_ID=:DRA_SKID_ID,MANUFACTURER_CL=:MANUFACTURER_CL,MATERIAL_CL=:MATERIAL_CL,INJECTION_RATE=:INJECTION_RATE,INJECTION_RATE_OUOM=:INJECTION_RATE_OUOM,TANK_VOLUME=:TANK_VOLUME,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS,DESCRIPTION=:DESCRIPTION
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRAG_REDUCING_AGENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.DRAG_REDUCING_AGENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DRAG_REDUCING_AGENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DRAG_REDUCING_AGENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DRIP" schema="PODS" id="PODS_DRIP" comment="PODS.DRIP">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.DRIP t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PURCHASE_ORDER_NUMBER" default="" type="String"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'DRIP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.DRIP(EVENT_ID,EVENT_GUID,NAME,MANUFACTURER_CL,DATE_MANUFACTURED,PURCHASE_ORDER_NUMBER,PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE,MATERIAL_CL,PIPE_SPECIFICATION_GCL,SMYS_GCL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:MANUFACTURER_CL,:DATE_MANUFACTURED,:PURCHASE_ORDER_NUMBER,:PIPE_MILL_LOCATION_GCL,:MILL_TEST_PRESSURE,:MATERIAL_CL,:PIPE_SPECIFICATION_GCL,:SMYS_GCL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:PIPE_LONG_SEAM_GCL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PURCHASE_ORDER_NUMBER" default="" type="String"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DRIP
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PURCHASE_ORDER_NUMBER=:PURCHASE_ORDER_NUMBER,PIPE_MILL_LOCATION_GCL=:PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,PIPE_SPECIFICATION_GCL=:PIPE_SPECIFICATION_GCL,SMYS_GCL=:SMYS_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.DRIP
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DRIP/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DRIP/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DRIP_RISER" schema="PODS" id="PODS_DRIP_RISER" comment="PODS.DRIP_RISER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.DRIP_RISER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PURCHASE_ORDER_NUMBER" default="" type="String"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="UNKNOWN" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'DRIP_RISER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.DRIP_RISER(EVENT_ID,EVENT_GUID,NAME,MANUFACTURER_CL,DATE_MANUFACTURED,PURCHASE_ORDER_NUMBER,PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE,MATERIAL_CL,PIPE_SPECIFICATION_GCL,SMYS_GCL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:MANUFACTURER_CL,:DATE_MANUFACTURED,:PURCHASE_ORDER_NUMBER,:PIPE_MILL_LOCATION_GCL,:MILL_TEST_PRESSURE,:MATERIAL_CL,:PIPE_SPECIFICATION_GCL,:SMYS_GCL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:PIPE_LONG_SEAM_GCL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PURCHASE_ORDER_NUMBER" default="" type="String"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="UNKNOWN" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DRIP_RISER
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PURCHASE_ORDER_NUMBER=:PURCHASE_ORDER_NUMBER,PIPE_MILL_LOCATION_GCL=:PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,PIPE_SPECIFICATION_GCL=:PIPE_SPECIFICATION_GCL,SMYS_GCL=:SMYS_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DRIP_RISER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.DRIP_RISER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DRIP_RISER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DRIP_RISER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ELBOW" schema="PODS" id="PODS_ELBOW" comment="PODS.ELBOW">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ELBOW t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="ANGLE" default="" type="Decimal"/>
                <param name="RADIUS" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ELBOW',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ELBOW(EVENT_ID,EVENT_GUID,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_GCL,ANGLE,RADIUS,MANUFACTURER_CL,DATE_MANUFACTURED,MATERIAL_CL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:NOMINAL_WALL_THICKNESS_GCL,:ANGLE,:RADIUS,:MANUFACTURER_CL,:DATE_MANUFACTURED,:MATERIAL_CL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="ANGLE" default="" type="Decimal"/>
                <param name="RADIUS" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ELBOW
                    SET EVENT_GUID=:EVENT_GUID,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,ANGLE=:ANGLE,RADIUS=:RADIUS,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,MATERIAL_CL=:MATERIAL_CL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ELBOW'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ELBOW
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ELBOW/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ELBOW/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="EXPOSURE" schema="PODS" id="PODS_EXPOSURE" comment="PODS.EXPOSURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.EXPOSURE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SUPPORT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INTENTIONAL_LF" default="" type="String"/>
                <param name="ORIGINAL_CONSTRUCTION_LF" default="" type="String"/>
                <param name="ONSHORE_LF" default="" type="String"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'EXPOSURE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.EXPOSURE(EVENT_ID,EVENT_GUID,TYPE_CL,SUPPORT_TYPE_CL,INTENTIONAL_LF,ORIGINAL_CONSTRUCTION_LF,ONSHORE_LF,HEIGHT,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SUPPORT_TYPE_CL,:INTENTIONAL_LF,:ORIGINAL_CONSTRUCTION_LF,:ONSHORE_LF,:HEIGHT,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SUPPORT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INTENTIONAL_LF" default="" type="String"/>
                <param name="ORIGINAL_CONSTRUCTION_LF" default="" type="String"/>
                <param name="ONSHORE_LF" default="" type="String"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EXPOSURE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SUPPORT_TYPE_CL=:SUPPORT_TYPE_CL,INTENTIONAL_LF=:INTENTIONAL_LF,ORIGINAL_CONSTRUCTION_LF=:ORIGINAL_CONSTRUCTION_LF,ONSHORE_LF=:ONSHORE_LF,HEIGHT=:HEIGHT,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXPOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.EXPOSURE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_EXPOSURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_EXPOSURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="EXTERNAL_COATING" schema="PODS" id="PODS_EXTERNAL_COATING" comment="PODS.EXTERNAL_COATING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (
                    SELECT ec.EVENT_ID ID
                    ,ec.DESCRIPTION
                    ,ec.PRODUCT_NAME
                    ,ec.TYPE_SCL||'@'||ec.SUBTYPE_SCL TYPE_SCL
                    ,ec.COATING_MATERIAL_GCL
                    ,ec.COATING_MANUFACTURER_GCL
                    ,ec.DATE_APPLIED
                    ,ec.WHERE_COATING_APPLIED_GCL
                    ,ec.COATING_APPLICATOR_GCL
                    ,ec.SOURCE_GCL
                    ,ec.COMMENTS
                    ,ec.EVENT_ID
                    FROM PODS.EXTERNAL_COATING ec
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="COATING_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="COATING_MANUFACTURER_GCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_NAME" default="" type="String"/>
                <param name="COATING_APPLICATOR_GCL" default="UNKNOWN" type="String"/>
                <param name="WHERE_COATING_APPLIED_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_APPLIED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'EXTERNAL_COATING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.EXTERNAL_COATING(EVENT_ID,EVENT_GUID,TYPE_SCL,SUBTYPE_SCL,COATING_MATERIAL_GCL,COATING_MANUFACTURER_GCL,PRODUCT_NAME,COATING_APPLICATOR_GCL,WHERE_COATING_APPLIED_GCL,DATE_APPLIED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,REGEXP_REPLACE(:TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),:COATING_MATERIAL_GCL,:COATING_MANUFACTURER_GCL,:PRODUCT_NAME,:COATING_APPLICATOR_GCL,:WHERE_COATING_APPLIED_GCL,:DATE_APPLIED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="COATING_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="COATING_MANUFACTURER_GCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_NAME" default="" type="String"/>
                <param name="COATING_APPLICATOR_GCL" default="UNKNOWN" type="String"/>
                <param name="WHERE_COATING_APPLIED_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_APPLIED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EXTERNAL_COATING
                    SET EVENT_GUID=:EVENT_GUID,TYPE_SCL=REGEXP_REPLACE(:TYPE_SCL,'@.*',''),SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),COATING_MATERIAL_GCL=:COATING_MATERIAL_GCL,COATING_MANUFACTURER_GCL=:COATING_MANUFACTURER_GCL,PRODUCT_NAME=:PRODUCT_NAME,COATING_APPLICATOR_GCL=:COATING_APPLICATOR_GCL,WHERE_COATING_APPLIED_GCL=:WHERE_COATING_APPLIED_GCL,DATE_APPLIED=:DATE_APPLIED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTERNAL_COATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.EXTERNAL_COATING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_EXTERNAL_COATING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_EXTERNAL_COATING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="EXTRUSION" schema="PODS" id="PODS_EXTRUSION" comment="PODS.EXTRUSION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.EXTRUSION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_IN_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICK_OUT_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'EXTRUSION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.EXTRUSION(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,DATE_MANUFACTURED,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_IN_GCL,NOMINAL_WALL_THICK_OUT_GCL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,MATERIAL_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:NOMINAL_WALL_THICKNESS_IN_GCL,:NOMINAL_WALL_THICK_OUT_GCL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:MATERIAL_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_IN_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICK_OUT_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EXTRUSION
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_IN_GCL=:NOMINAL_WALL_THICKNESS_IN_GCL,NOMINAL_WALL_THICK_OUT_GCL=:NOMINAL_WALL_THICK_OUT_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.EXTRUSION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_EXTRUSION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_EXTRUSION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="EXTRUSION_OPENING" schema="PODS" id="PODS_EXTRUSION_OPENING" comment="PODS.EXTRUSION_OPENING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.EXTRUSION_OPENING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SERIES_BRANCH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'EXTR_OPEN',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.EXTRUSION_OPENING(EVENT_ID,EVENT_GUID,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,SERIES_BRANCH,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:SERIES_BRANCH,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SERIES_BRANCH" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EXTRUSION_OPENING
                    SET EVENT_GUID=:EVENT_GUID,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,SERIES_BRANCH=:SERIES_BRANCH,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_EXTRUSION_OPENING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.EXTRUSION_OPENING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_EXTRUSION_OPENING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_EXTRUSION_OPENING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FABRICATION" schema="PODS" id="PODS_FABRICATION" comment="PODS.FABRICATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FABRICATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FABRICATOR_NAME" default="" type="String"/>
                <param name="LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="FABRICATION_DATE" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FABRICATION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FABRICATION(EVENT_ID,EVENT_GUID,FABRICATOR_NAME,LOCATION_CL,FABRICATION_DATE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:FABRICATOR_NAME,:LOCATION_CL,:FABRICATION_DATE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FABRICATOR_NAME" default="" type="String"/>
                <param name="LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="FABRICATION_DATE" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FABRICATION
                    SET EVENT_GUID=:EVENT_GUID,FABRICATOR_NAME=:FABRICATOR_NAME,LOCATION_CL=:LOCATION_CL,FABRICATION_DATE=:FABRICATION_DATE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FABRICATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FABRICATION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FABRICATION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FABRICATION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FACILITY_RANKING" schema="PODS" id="PODS_FACILITY_RANKING" comment="PODS.FACILITY_RANKING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FACILITY_RANKING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PURPOSE_CL" default="UNKNOWN" type="String"/>
                <param name="RANKING" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FACILITY_RANKING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FACILITY_RANKING(EVENT_ID,EVENT_GUID,PURPOSE_CL,RANKING,DETERMINATION_METHOD_GCL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:PURPOSE_CL,:RANKING,:DETERMINATION_METHOD_GCL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PURPOSE_CL" default="UNKNOWN" type="String"/>
                <param name="RANKING" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FACILITY_RANKING
                    SET EVENT_GUID=:EVENT_GUID,PURPOSE_CL=:PURPOSE_CL,RANKING=:RANKING,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RANKING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FACILITY_RANKING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FACILITY_RANKING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FACILITY_RANKING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FACILITY_RATING" schema="PODS" id="PODS_FACILITY_RATING" comment="PODS.FACILITY_RATING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FACILITY_RATING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PURPOSE_CL" default="UNKNOWN" type="String"/>
                <param name="RATING" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FACILITY_RATING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FACILITY_RATING(EVENT_ID,EVENT_GUID,PURPOSE_CL,RATING,DETERMINATION_METHOD_GCL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:PURPOSE_CL,:RATING,:DETERMINATION_METHOD_GCL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PURPOSE_CL" default="UNKNOWN" type="String"/>
                <param name="RATING" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FACILITY_RATING
                    SET EVENT_GUID=:EVENT_GUID,PURPOSE_CL=:PURPOSE_CL,RATING=:RATING,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FACILITY_RATING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FACILITY_RATING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FACILITY_RATING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FACILITY_RATING_VARIANCE" schema="PODS" id="PODS_FACILITY_RATING_VARIANCE" comment="PODS.FACILITY_RATING_VARIANCE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FACILITY_RATING_VARIANCE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="UPRATED_PRESSURE" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FACIL_RATING_VAR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FACILITY_RATING_VARIANCE(EVENT_ID,EVENT_GUID,UPRATED_PRESSURE,DETERMINATION_METHOD_CL,DETERMINATION_DATE,VERIFIED_BY,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:UPRATED_PRESSURE,:DETERMINATION_METHOD_CL,:DETERMINATION_DATE,:VERIFIED_BY,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="UPRATED_PRESSURE" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FACILITY_RATING_VARIANCE
                    SET EVENT_GUID=:EVENT_GUID,UPRATED_PRESSURE=:UPRATED_PRESSURE,DETERMINATION_METHOD_CL=:DETERMINATION_METHOD_CL,DETERMINATION_DATE=:DETERMINATION_DATE,VERIFIED_BY=:VERIFIED_BY,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FACILITY_RATING_VARIANCE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FACILITY_RATING_VARIANCE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FACILITY_RATING_VARIANCE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FACILITY_RATING_VARIANCE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FAIRING" schema="PODS" id="PODS_FAIRING" comment="PODS.FAIRING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FAIRING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FAIRING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FAIRING(EVENT_ID,EVENT_GUID,TYPE_CL,COATING_TYPE_SCL,COATING_SUBTYPE_SCL,SERIAL_NUMBER,PART_NUMBER,DATE_INSTALLED,MANUFACTURER_CL,DATE_MANUFACTURED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),:SERIAL_NUMBER,:PART_NUMBER,:DATE_INSTALLED,:MANUFACTURER_CL,:DATE_MANUFACTURED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FAIRING
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,COATING_TYPE_SCL=REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),COATING_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FAIRING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FAIRING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FAIRING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FAIRING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FLANGE" schema="PODS" id="PODS_FLANGE" comment="PODS.FLANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FLANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FLANGE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FLANGE(EVENT_ID,EVENT_GUID,TYPE_CL,NOMINAL_DIAMETER_GCL,MANUFACTURER_CL,DATE_MANUFACTURED,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,MATERIAL_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:NOMINAL_DIAMETER_GCL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:MATERIAL_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FLANGE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FLANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FLANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FLANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FLEXIBLE_JOINT" schema="PODS" id="PODS_FLEXIBLE_JOINT" comment="PODS.FLEXIBLE_JOINT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FLEXIBLE_JOINT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FLEXIBLE_JOINT_ID" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="BODY_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="EXTENSION_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_MAX_ROTATION_ANGLE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FLEXIBLE_JOINT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FLEXIBLE_JOINT(EVENT_ID,EVENT_GUID,FLEXIBLE_JOINT_ID,SERIAL_NUMBER,PART_NUMBER,BODY_MATERIAL_CL,EXTENSION_MATERIAL_CL,MANUFACTURER_CL,DATE_MANUFACTURED,NOMINAL_DIAMETER_GCL,NOMINAL_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,MILL_TEST_PRESSURE,CONNECTION_TYPE_CL,NOMINAL_MAX_ROTATION_ANGLE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:SERIAL_NUMBER,:PART_NUMBER,:BODY_MATERIAL_CL,:EXTENSION_MATERIAL_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:NOMINAL_DIAMETER_GCL,:NOMINAL_PRESSURE_RATING,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:MILL_TEST_PRESSURE,:CONNECTION_TYPE_CL,:NOMINAL_MAX_ROTATION_ANGLE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FLEXIBLE_JOINT_ID" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="BODY_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="EXTENSION_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_MAX_ROTATION_ANGLE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FLEXIBLE_JOINT
                    SET EVENT_GUID=:EVENT_GUID,FLEXIBLE_JOINT_ID=:FLEXIBLE_JOINT_ID,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,BODY_MATERIAL_CL=:BODY_MATERIAL_CL,EXTENSION_MATERIAL_CL=:EXTENSION_MATERIAL_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,CONNECTION_TYPE_CL=:CONNECTION_TYPE_CL,NOMINAL_MAX_ROTATION_ANGLE=:NOMINAL_MAX_ROTATION_ANGLE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLEXIBLE_JOINT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FLEXIBLE_JOINT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FLEXIBLE_JOINT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FLEXIBLE_JOINT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FLOW_DIRECTION_RANGE" schema="PODS" id="PODS_FLOW_DIRECTION_RANGE" comment="PODS.FLOW_DIRECTION_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FLOW_DIRECTION_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ODORANT_GRANDFATHER_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FLOW_DIR_RNG',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FLOW_DIRECTION_RANGE(EVENT_ID,EVENT_GUID,TYPE_CL,DESCRIPTION,ODORANT_GRANDFATHER_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:DESCRIPTION,:ODORANT_GRANDFATHER_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ODORANT_GRANDFATHER_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FLOW_DIRECTION_RANGE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,ODORANT_GRANDFATHER_LF=:ODORANT_GRANDFATHER_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_DIRECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FLOW_DIRECTION_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FLOW_DIRECTION_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FLOW_DIRECTION_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FLOW_MEASUREMENT" schema="PODS" id="PODS_FLOW_MEASUREMENT" comment="PODS.FLOW_MEASUREMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FLOW_MEASUREMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FLOW_MEASUREMENT" default="" type="Decimal"/>
                <param name="UNIT_OF_MEASURE_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FLOW_MEASUREMENT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FLOW_MEASUREMENT(EVENT_ID,EVENT_GUID,FLOW_MEASUREMENT,UNIT_OF_MEASURE_GCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:FLOW_MEASUREMENT,:UNIT_OF_MEASURE_GCL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FLOW_MEASUREMENT" default="" type="Decimal"/>
                <param name="UNIT_OF_MEASURE_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FLOW_MEASUREMENT
                    SET EVENT_GUID=:EVENT_GUID,FLOW_MEASUREMENT=:FLOW_MEASUREMENT,UNIT_OF_MEASURE_GCL=:UNIT_OF_MEASURE_GCL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FLOW_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.FLOW_MEASUREMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FLOW_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FLOW_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="GRANDFATHER_PRESSURE" schema="PODS" id="PODS_GRANDFATHER_PRESSURE" comment="PODS.GRANDFATHER_PRESSURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.GRANDFATHER_PRESSURE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE_RATING" default="" type="Decimal"/>
                <param name="HIGH_PRESSURE_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'GRNDFTHR_PRESS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.GRANDFATHER_PRESSURE(EVENT_ID,EVENT_GUID,PRESSURE_RATING,HIGH_PRESSURE_DATE,DETERMINATION_DATE,VERIFIED_BY,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:PRESSURE_RATING,:HIGH_PRESSURE_DATE,:DETERMINATION_DATE,:VERIFIED_BY,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE_RATING" default="" type="Decimal"/>
                <param name="HIGH_PRESSURE_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.GRANDFATHER_PRESSURE
                    SET EVENT_GUID=:EVENT_GUID,PRESSURE_RATING=:PRESSURE_RATING,HIGH_PRESSURE_DATE=:HIGH_PRESSURE_DATE,DETERMINATION_DATE=:DETERMINATION_DATE,VERIFIED_BY=:VERIFIED_BY,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GRANDFATHER_PRESSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.GRANDFATHER_PRESSURE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_GRANDFATHER_PRESSURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_GRANDFATHER_PRESSURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="GROUND_BED" schema="PODS" id="PODS_GROUND_BED" comment="PODS.GROUND_BED">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.GROUND_BED t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="INSTALLATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANODES_QUANTITY" default="" type="Decimal"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="ANODE_SPACING" default="" type="Decimal"/>
                <param name="POS_CABLE_INSULATION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="POS_CABLE_GAUGE_GCL" default="UNKNOWN" type="String"/>
                <param name="POS_CABLE_INSULATION_COLOR_GCL" default="UNKNOWN" type="String"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="RECTIFIER_ENCLOSURE_ID" default="" type="String"/>
                <param name="HORIZONTAL_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'GROUND_BED',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.GROUND_BED(EVENT_ID,EVENT_GUID,NAME,INSTALLATION_CL,MATERIAL_CL,ANODES_QUANTITY,DEPTH_OF_COVER,DESCRIPTION,TYPE_CL,DATE_INSTALLED,ANODE_SPACING,POS_CABLE_INSULATION_TYPE_GCL,POS_CABLE_GAUGE_GCL,POS_CABLE_INSULATION_COLOR_GCL,BACK_FILL_MATERIAL_GCL,RECTIFIER_ENCLOSURE_ID,HORIZONTAL_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:INSTALLATION_CL,:MATERIAL_CL,:ANODES_QUANTITY,:DEPTH_OF_COVER,:DESCRIPTION,:TYPE_CL,:DATE_INSTALLED,:ANODE_SPACING,:POS_CABLE_INSULATION_TYPE_GCL,:POS_CABLE_GAUGE_GCL,:POS_CABLE_INSULATION_COLOR_GCL,:BACK_FILL_MATERIAL_GCL,:RECTIFIER_ENCLOSURE_ID,:HORIZONTAL_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="INSTALLATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANODES_QUANTITY" default="" type="Decimal"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="ANODE_SPACING" default="" type="Decimal"/>
                <param name="POS_CABLE_INSULATION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="POS_CABLE_GAUGE_GCL" default="UNKNOWN" type="String"/>
                <param name="POS_CABLE_INSULATION_COLOR_GCL" default="UNKNOWN" type="String"/>
                <param name="BACK_FILL_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="RECTIFIER_ENCLOSURE_ID" default="" type="String"/>
                <param name="HORIZONTAL_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.GROUND_BED
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,INSTALLATION_CL=:INSTALLATION_CL,MATERIAL_CL=:MATERIAL_CL,ANODES_QUANTITY=:ANODES_QUANTITY,DEPTH_OF_COVER=:DEPTH_OF_COVER,DESCRIPTION=:DESCRIPTION,TYPE_CL=:TYPE_CL,DATE_INSTALLED=:DATE_INSTALLED,ANODE_SPACING=:ANODE_SPACING,POS_CABLE_INSULATION_TYPE_GCL=:POS_CABLE_INSULATION_TYPE_GCL,POS_CABLE_GAUGE_GCL=:POS_CABLE_GAUGE_GCL,POS_CABLE_INSULATION_COLOR_GCL=:POS_CABLE_INSULATION_COLOR_GCL,BACK_FILL_MATERIAL_GCL=:BACK_FILL_MATERIAL_GCL,RECTIFIER_ENCLOSURE_ID=:RECTIFIER_ENCLOSURE_ID,HORIZONTAL_LF=:HORIZONTAL_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_GROUND_BED'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.PI_GROUND_BED_READING
                    SET REF_GROUND_BED_EVENT_ID = NULL
                    WHERE REF_GROUND_BED_EVENT_ID = :ID;

                    UPDATE PODS.ANODE
                    SET GROUND_BED_EVENT_ID = NULL
                    WHERE GROUND_BED_EVENT_ID = :ID;

                    DELETE
                    FROM PODS.GROUND_BED
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_GROUND_BED/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_GROUND_BED/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="HCA_CA_SEGMENT" schema="PODS" id="PODS_HCA_CA_SEGMENT" comment="PODS.HCA_CA_SEGMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.HCA_CA_SEGMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INTERSECTION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="RUN_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'HCA_CA_SEGMENT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.HCA_CA_SEGMENT(EVENT_ID,EVENT_GUID,INTERSECTION_METHOD_CL,RUN_ID,TYPE_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INTERSECTION_METHOD_CL,:RUN_ID,:TYPE_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INTERSECTION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="RUN_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.HCA_CA_SEGMENT
                    SET EVENT_GUID=:EVENT_GUID,INTERSECTION_METHOD_CL=:INTERSECTION_METHOD_CL,RUN_ID=:RUN_ID,TYPE_CL=:TYPE_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_CA_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.HCA_CA_SEGMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_HCA_CA_SEGMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_HCA_CA_SEGMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="HORIZONTAL_DIRECTIONAL_DRILL" schema="PODS" id="PODS_HORIZONTAL_DIRECTIONAL_DRILL" comment="PODS.HORIZONTAL_DIRECTIONAL_DRILL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.HORIZONTAL_DIRECTIONAL_DRILL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="ENTRY_ANGLE" default="" type="Decimal"/>
                <param name="EXIT_ANGLE" default="" type="Decimal"/>
                <param name="MAX_DEPTH_POINT" default="" type="Decimal"/>
                <param name="DRILL_CONTRACTOR_CL" default="UNKNOWN" type="String"/>
                <param name="RADIUS" default="" type="Decimal"/>
                <param name="LENGTH_OF_BORE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'HORIZ_DIR_DRL',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.HORIZONTAL_DIRECTIONAL_DRILL(EVENT_ID,EVENT_GUID,ENTRY_ANGLE,EXIT_ANGLE,MAX_DEPTH_POINT,DRILL_CONTRACTOR_CL,RADIUS,LENGTH_OF_BORE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ENTRY_ANGLE,:EXIT_ANGLE,:MAX_DEPTH_POINT,:DRILL_CONTRACTOR_CL,:RADIUS,:LENGTH_OF_BORE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="ENTRY_ANGLE" default="" type="Decimal"/>
                <param name="EXIT_ANGLE" default="" type="Decimal"/>
                <param name="MAX_DEPTH_POINT" default="" type="Decimal"/>
                <param name="DRILL_CONTRACTOR_CL" default="UNKNOWN" type="String"/>
                <param name="RADIUS" default="" type="Decimal"/>
                <param name="LENGTH_OF_BORE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.HORIZONTAL_DIRECTIONAL_DRILL
                    SET EVENT_GUID=:EVENT_GUID,ENTRY_ANGLE=:ENTRY_ANGLE,EXIT_ANGLE=:EXIT_ANGLE,MAX_DEPTH_POINT=:MAX_DEPTH_POINT,DRILL_CONTRACTOR_CL=:DRILL_CONTRACTOR_CL,RADIUS=:RADIUS,LENGTH_OF_BORE=:LENGTH_OF_BORE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HORIZONTAL_DIRECTIONAL_DRILL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.HORIZONTAL_DIRECTIONAL_DRILL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_HORIZONTAL_DIRECTIONAL_DRILL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_HORIZONTAL_DIRECTIONAL_DRILL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_CLUSTER" schema="PODS" id="PODS_ILI_CLUSTER" comment="PODS.ILI_CLUSTER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT *
                    FROM (SELECT t.ili_cluster_id ID, t.*,c.cluster_comment,
                    c.r_595_2011_repair_method, c.r_595_2011_depth_abrasion,
                    c.r_595_2011_square_abrasion, c.r_595_2011_length_pipe_repair,
                    c.r_595_2011_comment, c.sto_112_2007_assurance_factor,
                    c.sto_112_2007_destruct_pressure, c.sto_112_2007_allow_pressure,
                    c.sto_112_2007_performance_eval,
                    c.sto_173_2007_critical_pressure, c.sto_173_2007_danger_degree,
                    c.sto_173_2007_safe_pressure, c.sto_292_2007_danger_rank,
                    c.sto_401_2009_fail_probability,ca.r_620_2011_date_test, ca.r_620_2011_date_repair,
                    ca.sto_112_2007_work_press_koef, ca.sto_112_2007_compress_strength,
                    ca.sto_112_2007_length_koef, ca.ltg_thickness_measured,
                    ca.ltg_corrosion_speed, ca.ltg_time_from_last_repair,
                    ca.ltg_thickness_to_destroy, ca.ltg_residual_life,
                    ca.ltg_min_thickness_allow, ca.ltg_actual_res_thickness,
                    ca.ltg_probab_corrosion_speed, ca.ltg_depth_to_destroy,
                    ca.ltg_time_to_destroy, ca.ltg_repair_method, ca.pipe_params
                    FROM pods.ili_cluster t LEFT JOIN pods.sto_ili_cluster_calc c
                    ON c.ili_cluster_id = t.ili_cluster_id
                    LEFT JOIN pods.sto_ili_cluster_calc_adv ca
                    ON ca.ili_cluster_id = t.ili_cluster_id
                    ) d  WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="AVG_BPR_CALCULATED" default="" type="Decimal"/>
                <param name="AVG_BPR_PIG" default="" type="Decimal"/>
                <param name="AVG_BPR_VARIANCE" default="" type="Decimal"/>
                <param name="AVG_DEPTH" default="" type="Decimal"/>
                <param name="AVG_LENGTH" default="" type="Decimal"/>
                <param name="AVG_MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="AVG_MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="AVG_ORIENTATION" default="" type="String"/>
                <param name="AVG_RPR_CALCULATED" default="" type="Decimal"/>
                <param name="AVG_RPR_PIG" default="" type="Decimal"/>
                <param name="AVG_RPR_VARIANCE" default="" type="Decimal"/>
                <param name="AVG_WIDTH" default="" type="Decimal"/>
                <param name="R85_BURST_PRESSURE" default="" type="Decimal"/>
                <param name="EFFECTIVE_LENGTH" default="" type="Decimal"/>
                <param name="EFFECTIVE_WIDTH" default="" type="Decimal"/>
                <param name="EFFECTIVE_AREA" default="" type="String"/>
                <param name="SAFETY_FACTOR" default="" type="String"/>
                <param name="ANOMALY_COUNT" default="" type="Decimal"/>
                <param name="MAX_WALL_LOSS" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_CLUSTER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ILI_CLUSTER(EVENT_ID,ILI_CLUSTER_GUID,EVENT_GUID,DESCRIPTION,CREATE_DATE,AVG_BPR_CALCULATED,AVG_BPR_PIG,AVG_BPR_VARIANCE,AVG_DEPTH,AVG_LENGTH,AVG_MAX_DIAMETER,AVG_MIN_DIAMETER,AVG_ORIENTATION,AVG_RPR_CALCULATED,AVG_RPR_PIG,AVG_RPR_VARIANCE,AVG_WIDTH,R85_BURST_PRESSURE,EFFECTIVE_LENGTH,EFFECTIVE_WIDTH,EFFECTIVE_AREA,SAFETY_FACTOR,ANOMALY_COUNT,MAX_WALL_LOSS,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:ILI_CLUSTER_GUID,:EVENT_GUID,:DESCRIPTION,:CREATE_DATE,:AVG_BPR_CALCULATED,:AVG_BPR_PIG,:AVG_BPR_VARIANCE,:AVG_DEPTH,:AVG_LENGTH,:AVG_MAX_DIAMETER,:AVG_MIN_DIAMETER,:AVG_ORIENTATION,:AVG_RPR_CALCULATED,:AVG_RPR_PIG,:AVG_RPR_VARIANCE,:AVG_WIDTH,:R85_BURST_PRESSURE,:EFFECTIVE_LENGTH,:EFFECTIVE_WIDTH,:EFFECTIVE_AREA,:SAFETY_FACTOR,:ANOMALY_COUNT,:MAX_WALL_LOSS,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="AVG_BPR_CALCULATED" default="" type="Decimal"/>
                <param name="AVG_BPR_PIG" default="" type="Decimal"/>
                <param name="AVG_BPR_VARIANCE" default="" type="Decimal"/>
                <param name="AVG_DEPTH" default="" type="Decimal"/>
                <param name="AVG_LENGTH" default="" type="Decimal"/>
                <param name="AVG_MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="AVG_MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="AVG_ORIENTATION" default="" type="String"/>
                <param name="AVG_RPR_CALCULATED" default="" type="Decimal"/>
                <param name="AVG_RPR_PIG" default="" type="Decimal"/>
                <param name="AVG_RPR_VARIANCE" default="" type="Decimal"/>
                <param name="AVG_WIDTH" default="" type="Decimal"/>
                <param name="R85_BURST_PRESSURE" default="" type="Decimal"/>
                <param name="EFFECTIVE_LENGTH" default="" type="Decimal"/>
                <param name="EFFECTIVE_WIDTH" default="" type="Decimal"/>
                <param name="EFFECTIVE_AREA" default="" type="String"/>
                <param name="SAFETY_FACTOR" default="" type="String"/>
                <param name="ANOMALY_COUNT" default="" type="Decimal"/>
                <param name="MAX_WALL_LOSS" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_CLUSTER
                    SET ILI_CLUSTER_GUID=:ILI_CLUSTER_GUID,EVENT_GUID=:EVENT_GUID,DESCRIPTION=:DESCRIPTION,CREATE_DATE=:CREATE_DATE,AVG_BPR_CALCULATED=:AVG_BPR_CALCULATED,AVG_BPR_PIG=:AVG_BPR_PIG,AVG_BPR_VARIANCE=:AVG_BPR_VARIANCE,AVG_DEPTH=:AVG_DEPTH,AVG_LENGTH=:AVG_LENGTH,AVG_MAX_DIAMETER=:AVG_MAX_DIAMETER,AVG_MIN_DIAMETER=:AVG_MIN_DIAMETER,AVG_ORIENTATION=:AVG_ORIENTATION,AVG_RPR_CALCULATED=:AVG_RPR_CALCULATED,AVG_RPR_PIG=:AVG_RPR_PIG,AVG_RPR_VARIANCE=:AVG_RPR_VARIANCE,AVG_WIDTH=:AVG_WIDTH,R85_BURST_PRESSURE=:R85_BURST_PRESSURE,EFFECTIVE_LENGTH=:EFFECTIVE_LENGTH,EFFECTIVE_WIDTH=:EFFECTIVE_WIDTH,EFFECTIVE_AREA=:EFFECTIVE_AREA,SAFETY_FACTOR=:SAFETY_FACTOR,ANOMALY_COUNT=:ANOMALY_COUNT,MAX_WALL_LOSS=:MAX_WALL_LOSS,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE ILI_CLUSTER_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_CLUSTER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = (SELECT EVENT_ID FROM PODS.ILI_CLUSTER WHERE ILI_CLUSTER_ID = :ID);

                    UPDATE PODS.STO_ILI_DATA_CALC
                    SET ILI_CLUSTER_ID = NULL
                    WHERE ILI_CLUSTER_ID = :ID;

                    UPDATE PODS.STO_ILI_DATA_CALC_ADV
                    SET ILI_CLUSTER_ID = NULL
                    WHERE ILI_CLUSTER_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_CLUSTER_CALC_ADV
                    WHERE ILI_CLUSTER_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_CLUSTER_CALC
                    WHERE ILI_CLUSTER_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_CLUSTER_CALC_ADV
                    WHERE ILI_CLUSTER_ID = :ID;


                    UPDATE PODS.ILI_DATA
                    SET ILI_CLUSTER_ID = NULL
                    WHERE ILI_CLUSTER_ID = :ID;

                    DELETE
                    FROM PODS.ILI_CLUSTER
                    WHERE ILI_CLUSTER_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_ILI_CLUSTER/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_ILI_CLUSTER/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_PIPE_LENGTH" schema="PODS" id="PODS_ILI_PIPE_LENGTH" comment="PODS.ILI_PIPE_LENGTH">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ILI_PIPE_LENGTH t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_PIPE_LENGTH_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="SEQUENCE_NUMBER" default="" type="Decimal"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="START_COORDINATE_ID" default="" type="Decimal"/>
                <param name="START_COORDINATE_GUID" default="" type="String"/>
                <param name="END_COORDINATE_ID" default="" type="Decimal"/>
                <param name="END_COORDINATE_GUID" default="" type="String"/>
                <param name="SEAM_ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_PIPE_LENGTH',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ILI_PIPE_LENGTH(EVENT_ID,ILI_PIPE_LENGTH_GUID,EVENT_GUID,DESCRIPTION,WELD_NUMBER,SEQUENCE_NUMBER,START_ODOMETER,END_ODOMETER,START_COORDINATE_ID,START_COORDINATE_GUID,END_COORDINATE_ID,END_COORDINATE_GUID,SEAM_ORIENTATION_DEG,MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,REF_EVENT_ID,REF_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:ILI_PIPE_LENGTH_GUID,:EVENT_GUID,:DESCRIPTION,:WELD_NUMBER,:SEQUENCE_NUMBER,:START_ODOMETER,:END_ODOMETER,:START_COORDINATE_ID,:START_COORDINATE_GUID,:END_COORDINATE_ID,:END_COORDINATE_GUID,:SEAM_ORIENTATION_DEG,:MEASURED_WALL_THICKNESS,:NOMINAL_WALL_THICKNESS,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:REF_EVENT_ID,:REF_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_PIPE_LENGTH_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="SEQUENCE_NUMBER" default="" type="Decimal"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="START_COORDINATE_ID" default="" type="Decimal"/>
                <param name="START_COORDINATE_GUID" default="" type="String"/>
                <param name="END_COORDINATE_ID" default="" type="Decimal"/>
                <param name="END_COORDINATE_GUID" default="" type="String"/>
                <param name="SEAM_ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_PIPE_LENGTH
                    SET ILI_PIPE_LENGTH_GUID=:ILI_PIPE_LENGTH_GUID,EVENT_GUID=:EVENT_GUID,DESCRIPTION=:DESCRIPTION,WELD_NUMBER=:WELD_NUMBER,SEQUENCE_NUMBER=:SEQUENCE_NUMBER,START_ODOMETER=:START_ODOMETER,END_ODOMETER=:END_ODOMETER,START_COORDINATE_ID=:START_COORDINATE_ID,START_COORDINATE_GUID=:START_COORDINATE_GUID,END_COORDINATE_ID=:END_COORDINATE_ID,END_COORDINATE_GUID=:END_COORDINATE_GUID,SEAM_ORIENTATION_DEG=:SEAM_ORIENTATION_DEG,MEASURED_WALL_THICKNESS=:MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS=:NOMINAL_WALL_THICKNESS,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,REF_EVENT_ID=:REF_EVENT_ID,REF_EVENT_GUID=:REF_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_PIPE_LENGTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ILI_PIPE_LENGTH
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_PIPE_LENGTH/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_PIPE_LENGTH/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_RANGE" schema="PODS" id="PODS_ILI_RANGE" comment="PODS.ILI_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ILI_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SMART_PIGGABLE_LF" default="" type="String"/>
                <param name="PIGGABLE_LF" default="" type="String"/>
                <param name="DATE_LAST_PIGGED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_RANGE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ILI_RANGE(EVENT_ID,EVENT_GUID,SMART_PIGGABLE_LF,PIGGABLE_LF,DATE_LAST_PIGGED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SMART_PIGGABLE_LF,:PIGGABLE_LF,:DATE_LAST_PIGGED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SMART_PIGGABLE_LF" default="" type="String"/>
                <param name="PIGGABLE_LF" default="" type="String"/>
                <param name="DATE_LAST_PIGGED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_RANGE
                    SET EVENT_GUID=:EVENT_GUID,SMART_PIGGABLE_LF=:SMART_PIGGABLE_LF,PIGGABLE_LF=:PIGGABLE_LF,DATE_LAST_PIGGED=:DATE_LAST_PIGGED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ILI_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="INJECTOR" schema="PODS" id="PODS_INJECTOR" comment="PODS.INJECTOR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.INJECTOR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'INJECTOR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.INJECTOR(EVENT_ID,EVENT_GUID,TYPE_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.INJECTOR
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INJECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.INJECTOR
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_INJECTOR/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_INJECTOR/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="INSPECTION_INTERVAL" schema="PODS" id="PODS_INSPECTION_INTERVAL" comment="PODS.INSPECTION_INTERVAL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.INSPECTION_INTERVAL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INTERVAL_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'INSP_INTERV',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.INSPECTION_INTERVAL(EVENT_ID,EVENT_GUID,INTERVAL_CL,SOURCE_GCL,COMMENTS,DESCRIPTION)
                    VALUES(:ID,:EVENT_GUID,:INTERVAL_CL,:SOURCE_GCL,:COMMENTS,:DESCRIPTION);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INTERVAL_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.INSPECTION_INTERVAL
                    SET EVENT_GUID=:EVENT_GUID,INTERVAL_CL=:INTERVAL_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS,DESCRIPTION=:DESCRIPTION
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INSPECTION_INTERVAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.INSPECTION_INTERVAL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_INSPECTION_INTERVAL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_INSPECTION_INTERVAL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="INTERFACE_DETECTOR" schema="PODS" id="PODS_INTERFACE_DETECTOR" comment="PODS.INTERFACE_DETECTOR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.INTERFACE_DETECTOR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'INTERF_DET',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.INTERFACE_DETECTOR(EVENT_ID,EVENT_GUID,MANUFACTURER_CL,TYPE_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MANUFACTURER_CL,:TYPE_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.INTERFACE_DETECTOR
                    SET EVENT_GUID=:EVENT_GUID,MANUFACTURER_CL=:MANUFACTURER_CL,TYPE_CL=:TYPE_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERFACE_DETECTOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.INTERFACE_DETECTOR
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_INTERFACE_DETECTOR/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_INTERFACE_DETECTOR/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="INTERNAL_COATING" schema="PODS" id="PODS_INTERNAL_COATING" comment="PODS.INTERNAL_COATING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.INTERNAL_COATING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="COATING_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="COATING_MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_NAME" default="" type="String"/>
                <param name="DATE_APPLIED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'INTERNAL_COATING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.INTERNAL_COATING(EVENT_ID,EVENT_GUID,TYPE_SCL,SUBTYPE_SCL,COATING_MATERIAL_GCL,COATING_MANUFACTURER_CL,PRODUCT_NAME,DATE_APPLIED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,REGEXP_REPLACE(:TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),:COATING_MATERIAL_GCL,:COATING_MANUFACTURER_CL,:PRODUCT_NAME,:DATE_APPLIED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="COATING_MATERIAL_GCL" default="UNKNOWN" type="String"/>
                <param name="COATING_MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_NAME" default="" type="String"/>
                <param name="DATE_APPLIED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.INTERNAL_COATING
                    SET EVENT_GUID=:EVENT_GUID,TYPE_SCL=REGEXP_REPLACE(:TYPE_SCL,'@.*',''),SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),COATING_MATERIAL_GCL=:COATING_MATERIAL_GCL,COATING_MANUFACTURER_CL=:COATING_MANUFACTURER_CL,PRODUCT_NAME=:PRODUCT_NAME,DATE_APPLIED=:DATE_APPLIED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_INTERNAL_COATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.INTERNAL_COATING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_INTERNAL_COATING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_INTERNAL_COATING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="JUNCTION_BOX" schema="PODS" id="PODS_JUNCTION_BOX" comment="PODS.JUNCTION_BOX">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.JUNCTION_BOX t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="BOX_SIZE" default="" type="String"/>
                <param name="WEATHERPROOF" default="" type="String"/>
                <param name="NEMA_RATING" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POLE" default="" type="String"/>
                <param name="NUMBER_OF_WIRES" default="" type="Decimal"/>
                <param name="NAME" default="" type="String"/>
                <param name="ANODE_CONNECTED_LF" default="" type="String"/>
                <param name="RECTIFIER_CONNECTED_LF" default="" type="String"/>
                <param name="GROUND_BED_CONNECTED_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'JUNCTION_BOX',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.JUNCTION_BOX(EVENT_ID,EVENT_GUID,BOX_SIZE,WEATHERPROOF,NEMA_RATING,DATE_INSTALLED,DESCRIPTION,POLE,NUMBER_OF_WIRES,NAME,ANODE_CONNECTED_LF,RECTIFIER_CONNECTED_LF,GROUND_BED_CONNECTED_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:BOX_SIZE,:WEATHERPROOF,:NEMA_RATING,:DATE_INSTALLED,:DESCRIPTION,:POLE,:NUMBER_OF_WIRES,:NAME,:ANODE_CONNECTED_LF,:RECTIFIER_CONNECTED_LF,:GROUND_BED_CONNECTED_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="BOX_SIZE" default="" type="String"/>
                <param name="WEATHERPROOF" default="" type="String"/>
                <param name="NEMA_RATING" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POLE" default="" type="String"/>
                <param name="NUMBER_OF_WIRES" default="" type="Decimal"/>
                <param name="NAME" default="" type="String"/>
                <param name="ANODE_CONNECTED_LF" default="" type="String"/>
                <param name="RECTIFIER_CONNECTED_LF" default="" type="String"/>
                <param name="GROUND_BED_CONNECTED_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.JUNCTION_BOX
                    SET EVENT_GUID=:EVENT_GUID,BOX_SIZE=:BOX_SIZE,WEATHERPROOF=:WEATHERPROOF,NEMA_RATING=:NEMA_RATING,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,POLE=:POLE,NUMBER_OF_WIRES=:NUMBER_OF_WIRES,NAME=:NAME,ANODE_CONNECTED_LF=:ANODE_CONNECTED_LF,RECTIFIER_CONNECTED_LF=:RECTIFIER_CONNECTED_LF,GROUND_BED_CONNECTED_LF=:GROUND_BED_CONNECTED_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_JUNCTION_BOX'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.JUNCTION_BOX
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_JUNCTION_BOX/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_JUNCTION_BOX/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LAND_USE" schema="PODS" id="PODS_LAND_USE" comment="PODS.LAND_USE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.LAND_USE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="USE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'LAND_USE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.LAND_USE(EVENT_ID,EVENT_GUID,USE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:USE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="USE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LAND_USE
                    SET EVENT_GUID=:EVENT_GUID,USE_CL=:USE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAND_USE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.LAND_USE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_LAND_USE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_LAND_USE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LAUNCHER_RECEIVER" schema="PODS" id="PODS_LAUNCHER_RECEIVER" comment="PODS.LAUNCHER_RECEIVER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.LAUNCHER_RECEIVER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CLOSURE_VALVE_LENGTH" default="" type="Decimal"/>
                <param name="CLOSURE_REDUCER_LENGTH" default="" type="Decimal"/>
                <param name="TRAY_LENGTH" default="" type="Decimal"/>
                <param name="SAG_RADIUS" default="" type="Decimal"/>
                <param name="OVERBEND_RADIUS" default="" type="Decimal"/>
                <param name="WORKSHOP_NEAR_TRAP_LF" default="" type="String"/>
                <param name="TRAP_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="TRAP_CLOSURE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TRAP_STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="ELECTRICITY_AVAILABLE_LF" default="" type="String"/>
                <param name="HOIST_AVAILABLE_LF" default="" type="String"/>
                <param name="TRAP_ANGLE" default="" type="Decimal"/>
                <param name="TRAP_HEIGHT" default="" type="Decimal"/>
                <param name="TRAP_VALVE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="TRAP_VALVE_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="KICKER_BYPASS_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="KICKER_BYPASS_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="BRIDLE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="REDUCER_VALVE_LENGTH" default="" type="Decimal"/>
                <param name="REDUCER_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="REDUCER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="REDUCER_LENGTH" default="" type="Decimal"/>
                <param name="AXIAL_CLEARANCE_WIDTH" default="" type="Decimal"/>
                <param name="AXIAL_CLEARANCE_LENGTH" default="" type="Decimal"/>
                <param name="OVERBORE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="CLOSURE_BRIDLE_LENGTH" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'LAUNC_REC',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.LAUNCHER_RECEIVER(EVENT_ID,EVENT_GUID,TYPE_CL,NAME,DATE_INSTALLED,DESCRIPTION,CLOSURE_VALVE_LENGTH,CLOSURE_REDUCER_LENGTH,TRAY_LENGTH,SAG_RADIUS,OVERBEND_RADIUS,WORKSHOP_NEAR_TRAP_LF,TRAP_PRESSURE_RATING,TRAP_CLOSURE_TYPE_CL,TRAP_STATUS_CL,ELECTRICITY_AVAILABLE_LF,HOIST_AVAILABLE_LF,TRAP_ANGLE,TRAP_HEIGHT,TRAP_VALVE_DIAMETER_GCL,TRAP_VALVE_TYPE_GCL,KICKER_BYPASS_LOCATION_CL,KICKER_BYPASS_DIAMETER_GCL,BRIDLE_DIAMETER_GCL,REDUCER_VALVE_LENGTH,REDUCER_WALL_THICKNESS_GCL,REDUCER_TYPE_GCL,REDUCER_LENGTH,AXIAL_CLEARANCE_WIDTH,AXIAL_CLEARANCE_LENGTH,OVERBORE_DIAMETER_GCL,CLOSURE_BRIDLE_LENGTH,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:NAME,:DATE_INSTALLED,:DESCRIPTION,:CLOSURE_VALVE_LENGTH,:CLOSURE_REDUCER_LENGTH,:TRAY_LENGTH,:SAG_RADIUS,:OVERBEND_RADIUS,:WORKSHOP_NEAR_TRAP_LF,:TRAP_PRESSURE_RATING,:TRAP_CLOSURE_TYPE_CL,:TRAP_STATUS_CL,:ELECTRICITY_AVAILABLE_LF,:HOIST_AVAILABLE_LF,:TRAP_ANGLE,:TRAP_HEIGHT,:TRAP_VALVE_DIAMETER_GCL,:TRAP_VALVE_TYPE_GCL,:KICKER_BYPASS_LOCATION_CL,:KICKER_BYPASS_DIAMETER_GCL,:BRIDLE_DIAMETER_GCL,:REDUCER_VALVE_LENGTH,:REDUCER_WALL_THICKNESS_GCL,:REDUCER_TYPE_GCL,:REDUCER_LENGTH,:AXIAL_CLEARANCE_WIDTH,:AXIAL_CLEARANCE_LENGTH,:OVERBORE_DIAMETER_GCL,:CLOSURE_BRIDLE_LENGTH,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="CLOSURE_VALVE_LENGTH" default="" type="Decimal"/>
                <param name="CLOSURE_REDUCER_LENGTH" default="" type="Decimal"/>
                <param name="TRAY_LENGTH" default="" type="Decimal"/>
                <param name="SAG_RADIUS" default="" type="Decimal"/>
                <param name="OVERBEND_RADIUS" default="" type="Decimal"/>
                <param name="WORKSHOP_NEAR_TRAP_LF" default="" type="String"/>
                <param name="TRAP_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="TRAP_CLOSURE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TRAP_STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="ELECTRICITY_AVAILABLE_LF" default="" type="String"/>
                <param name="HOIST_AVAILABLE_LF" default="" type="String"/>
                <param name="TRAP_ANGLE" default="" type="Decimal"/>
                <param name="TRAP_HEIGHT" default="" type="Decimal"/>
                <param name="TRAP_VALVE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="TRAP_VALVE_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="KICKER_BYPASS_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="KICKER_BYPASS_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="BRIDLE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="REDUCER_VALVE_LENGTH" default="" type="Decimal"/>
                <param name="REDUCER_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="REDUCER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="REDUCER_LENGTH" default="" type="Decimal"/>
                <param name="AXIAL_CLEARANCE_WIDTH" default="" type="Decimal"/>
                <param name="AXIAL_CLEARANCE_LENGTH" default="" type="Decimal"/>
                <param name="OVERBORE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="CLOSURE_BRIDLE_LENGTH" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LAUNCHER_RECEIVER
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,CLOSURE_VALVE_LENGTH=:CLOSURE_VALVE_LENGTH,CLOSURE_REDUCER_LENGTH=:CLOSURE_REDUCER_LENGTH,TRAY_LENGTH=:TRAY_LENGTH,SAG_RADIUS=:SAG_RADIUS,OVERBEND_RADIUS=:OVERBEND_RADIUS,WORKSHOP_NEAR_TRAP_LF=:WORKSHOP_NEAR_TRAP_LF,TRAP_PRESSURE_RATING=:TRAP_PRESSURE_RATING,TRAP_CLOSURE_TYPE_CL=:TRAP_CLOSURE_TYPE_CL,TRAP_STATUS_CL=:TRAP_STATUS_CL,ELECTRICITY_AVAILABLE_LF=:ELECTRICITY_AVAILABLE_LF,HOIST_AVAILABLE_LF=:HOIST_AVAILABLE_LF,TRAP_ANGLE=:TRAP_ANGLE,TRAP_HEIGHT=:TRAP_HEIGHT,TRAP_VALVE_DIAMETER_GCL=:TRAP_VALVE_DIAMETER_GCL,TRAP_VALVE_TYPE_GCL=:TRAP_VALVE_TYPE_GCL,KICKER_BYPASS_LOCATION_CL=:KICKER_BYPASS_LOCATION_CL,KICKER_BYPASS_DIAMETER_GCL=:KICKER_BYPASS_DIAMETER_GCL,BRIDLE_DIAMETER_GCL=:BRIDLE_DIAMETER_GCL,REDUCER_VALVE_LENGTH=:REDUCER_VALVE_LENGTH,REDUCER_WALL_THICKNESS_GCL=:REDUCER_WALL_THICKNESS_GCL,REDUCER_TYPE_GCL=:REDUCER_TYPE_GCL,REDUCER_LENGTH=:REDUCER_LENGTH,AXIAL_CLEARANCE_WIDTH=:AXIAL_CLEARANCE_WIDTH,AXIAL_CLEARANCE_LENGTH=:AXIAL_CLEARANCE_LENGTH,OVERBORE_DIAMETER_GCL=:OVERBORE_DIAMETER_GCL,CLOSURE_BRIDLE_LENGTH=:CLOSURE_BRIDLE_LENGTH,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LAUNCHER_RECEIVER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.ILI_INSPECTION_RANGE
                    SET RECEIVER_EVENT_ID = NULL
                    WHERE RECEIVER_EVENT_ID = :ID;

                    UPDATE PODS.ILI_INSPECTION_RANGE
                    SET LAUNCHER_EVENT_ID = NULL
                    WHERE LAUNCHER_EVENT_ID = :ID;

                    DELETE
                    FROM PODS.LAUNCHER_RECEIVER
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_LAUNCHER_RECEIVER/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_LAUNCHER_RECEIVER/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LEAK_HISTORY" schema="PODS" id="PODS_LEAK_HISTORY" comment="PODS.LEAK_HISTORY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.LEAK_HISTORY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="LEAK_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LEAK_DATE" default="" type="DateTime"/>
                <param name="TELEPHONIC_REPORT_DATE" default="" type="DateTime"/>
                <param name="NRC_REPORT_NUMBER" default="" type="Decimal"/>
                <param name="ENVIRONMENTAL_REMEDIATION_COST" default="" type="Decimal"/>
                <param name="CITY" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="ZIP" default="" type="Decimal"/>
                <param name="LEAK_REPORT_DATE" default="" type="DateTime"/>
                <param name="PRODUCT_TYPE_SCL" default="" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="" type="String"/>
                <param name="VOLUME_LOST" default="" type="Decimal"/>
                <param name="PRIMARY_CAUSE_CL" default="UNKNOWN" type="String"/>
                <param name="LOST_PRODUCT_COST" default="" type="Decimal"/>
                <param name="BUSINESS_INTERRUPTION_COST" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'LEAK_HISTORY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.LEAK_HISTORY(EVENT_ID,LEAK_GUID,EVENT_GUID,LEAK_DATE,TELEPHONIC_REPORT_DATE,NRC_REPORT_NUMBER,ENVIRONMENTAL_REMEDIATION_COST,CITY,STATE_GCL,ZIP,LEAK_REPORT_DATE,PRODUCT_TYPE_SCL,PRODUCT_SUBTYPE_SCL,VOLUME_LOST,PRIMARY_CAUSE_CL,LOST_PRODUCT_COST,BUSINESS_INTERRUPTION_COST,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:LEAK_GUID,:EVENT_GUID,:LEAK_DATE,:TELEPHONIC_REPORT_DATE,:NRC_REPORT_NUMBER,:ENVIRONMENTAL_REMEDIATION_COST,:CITY,:STATE_GCL,:ZIP,:LEAK_REPORT_DATE,REGEXP_REPLACE(:PRODUCT_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:PRODUCT_TYPE_SCL,'@.*'),'@',''),:PRODUCT_SUBTYPE_SCL),:VOLUME_LOST,:PRIMARY_CAUSE_CL,:LOST_PRODUCT_COST,:BUSINESS_INTERRUPTION_COST,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="LEAK_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LEAK_DATE" default="" type="DateTime"/>
                <param name="TELEPHONIC_REPORT_DATE" default="" type="DateTime"/>
                <param name="NRC_REPORT_NUMBER" default="" type="Decimal"/>
                <param name="ENVIRONMENTAL_REMEDIATION_COST" default="" type="Decimal"/>
                <param name="CITY" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="ZIP" default="" type="Decimal"/>
                <param name="LEAK_REPORT_DATE" default="" type="DateTime"/>
                <param name="PRODUCT_TYPE_SCL" default="" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="" type="String"/>
                <param name="VOLUME_LOST" default="" type="Decimal"/>
                <param name="PRIMARY_CAUSE_CL" default="UNKNOWN" type="String"/>
                <param name="LOST_PRODUCT_COST" default="" type="Decimal"/>
                <param name="BUSINESS_INTERRUPTION_COST" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LEAK_HISTORY
                    SET LEAK_GUID=:LEAK_GUID,EVENT_GUID=:EVENT_GUID,LEAK_DATE=:LEAK_DATE,TELEPHONIC_REPORT_DATE=:TELEPHONIC_REPORT_DATE,NRC_REPORT_NUMBER=:NRC_REPORT_NUMBER,ENVIRONMENTAL_REMEDIATION_COST=:ENVIRONMENTAL_REMEDIATION_COST,CITY=:CITY,STATE_GCL=:STATE_GCL,ZIP=:ZIP,LEAK_REPORT_DATE=:LEAK_REPORT_DATE,PRODUCT_TYPE_SCL=REGEXP_REPLACE(:PRODUCT_TYPE_SCL,'@.*',''),PRODUCT_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:PRODUCT_TYPE_SCL,'@.*'),'@',''),:PRODUCT_SUBTYPE_SCL),VOLUME_LOST=:VOLUME_LOST,PRIMARY_CAUSE_CL=:PRIMARY_CAUSE_CL,LOST_PRODUCT_COST=:LOST_PRODUCT_COST,BUSINESS_INTERRUPTION_COST=:BUSINESS_INTERRUPTION_COST,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEAK_HISTORY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = (SELECT EVENT_ID
                    FROM PODS.LEAK_HISTORY_EVENT
                    WHERE LEAK_ID = (SELECT LEAK_ID
                    FROM PODS.LEAK_HISTORY
                    WHERE EVENT_ID =:ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_LEAK_HISTORY_EVENT/'||CAST(LEAK_ID AS VARCHAR(30))||';'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.LEAK_HISTORY_EVENT
                    WHERE LEAK_ID = (SELECT LEAK_ID
                    FROM PODS.LEAK_HISTORY
                    WHERE EVENT_ID =:ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_LEAK_HISTORY_EVENT/'||CAST(LEAK_ID AS VARCHAR(30))||';'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.LEAK_HISTORY_EVENT
                    WHERE LEAK_ID = (SELECT LEAK_ID
                    FROM PODS.LEAK_HISTORY
                    WHERE EVENT_ID =:ID));

                    DELETE
                    FROM PODS.LEAK_HISTORY_EVENT
                    WHERE LEAK_ID = (SELECT LEAK_ID
                    FROM PODS.LEAK_HISTORY
                    WHERE EVENT_ID =:ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.LEAK_HISTORY
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_LEAK_HISTORY/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_LEAK_HISTORY/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LEGACY_LINE_BOUNDARY" schema="PODS" id="PODS_LEGACY_LINE_BOUNDARY" comment="PODS.LEGACY_LINE_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.LEGACY_LINE_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LEGACY_LINE_ID" default="0" type="Decimal"/>
                <param name="LEGACY_LINE_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'LEG_LINE_BND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.LEGACY_LINE_BOUNDARY(EVENT_ID,EVENT_GUID,LEGACY_LINE_ID,LEGACY_LINE_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:LEGACY_LINE_ID,:LEGACY_LINE_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LEGACY_LINE_ID" default="0" type="Decimal"/>
                <param name="LEGACY_LINE_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LEGACY_LINE_BOUNDARY
                    SET EVENT_GUID=:EVENT_GUID,LEGACY_LINE_ID=:LEGACY_LINE_ID,LEGACY_LINE_GUID=:LEGACY_LINE_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LEGACY_LINE_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.LEGACY_LINE_BOUNDARY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_LEGACY_LINE_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_LEGACY_LINE_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MAINTENANCE" schema="PODS" id="PODS_MAINTENANCE" comment="PODS.MAINTENANCE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.MAINTENANCE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="MAINT_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MAINT_DATE" default="" type="DateTime"/>
                <param name="MAINT_COST" default="" type="Decimal"/>
                <param name="REMEDIATION_COST" default="" type="Decimal"/>
                <param name="WORK_ORDER_ID" default="" type="Decimal"/>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'MAINTENANCE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.MAINTENANCE(EVENT_ID,MAINT_GUID,EVENT_GUID,TYPE_CL,MAINT_DATE,MAINT_COST,REMEDIATION_COST,WORK_ORDER_ID,WORK_ORDER_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:MAINT_GUID,:EVENT_GUID,:TYPE_CL,:MAINT_DATE,:MAINT_COST,:REMEDIATION_COST,:WORK_ORDER_ID,:WORK_ORDER_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="MAINT_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MAINT_DATE" default="" type="DateTime"/>
                <param name="MAINT_COST" default="" type="Decimal"/>
                <param name="REMEDIATION_COST" default="" type="Decimal"/>
                <param name="WORK_ORDER_ID" default="" type="Decimal"/>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MAINTENANCE
                    SET MAINT_GUID=:MAINT_GUID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MAINT_DATE=:MAINT_DATE,MAINT_COST=:MAINT_COST,REMEDIATION_COST=:REMEDIATION_COST,WORK_ORDER_ID=:WORK_ORDER_ID,WORK_ORDER_GUID=:WORK_ORDER_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAINTENANCE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = (SELECT EVENT_ID
                    FROM PODS.MAINTENANCE_EVENT
                    WHERE MAINT_ID = (SELECT MAINT_ID
                    FROM PODS.MAINTENANCE
                    WHERE EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_MAINTENANCE_EVENT/'||CAST(MAINT_ID AS VARCHAR(30))
                    ||';'||CAST(EVENT_ID  AS VARCHAR(30))
                    FROM PODS.MAINTENANCE_EVENT
                    WHERE MAINT_ID  = (SELECT MAINT_ID
                    FROM PODS.MAINTENANCE
                    WHERE EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_MAINTENANCE_EVENT/'||CAST(MAINT_ID  AS VARCHAR(30))
                    ||';'||CAST(EVENT_ID  AS VARCHAR(30))
                    FROM PODS.MAINTENANCE_EVENT
                    WHERE MAINT_ID  = (SELECT MAINT_ID
                    FROM PODS.MAINTENANCE
                    WHERE EVENT_ID = :ID));

                    DELETE
                    FROM PODS.MAINTENANCE_EVENT
                    WHERE MAINT_ID = (SELECT MAINT_ID
                    FROM PODS.MAINTENANCE
                    WHERE EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.MAINTENANCE
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_MAINTENANCE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_MAINTENANCE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MAOP_RATING" schema="PODS" id="PODS_MAOP_RATING" comment="PODS.MAOP_RATING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.MAOP_RATING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MAOP_RATING" default="" type="Decimal"/>
                <param name="MOP" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="ESTABLISHED_BY" default="" type="String"/>
                <param name="LIMITING_FACTORS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'MAOP_RATING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.MAOP_RATING(EVENT_ID,EVENT_GUID,MAOP_RATING,MOP,DETERMINATION_METHOD_CL,DETERMINATION_DATE,VERIFIED_BY,ESTABLISHED_BY,LIMITING_FACTORS,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MAOP_RATING,:MOP,:DETERMINATION_METHOD_CL,:DETERMINATION_DATE,:VERIFIED_BY,:ESTABLISHED_BY,:LIMITING_FACTORS,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MAOP_RATING" default="" type="Decimal"/>
                <param name="MOP" default="" type="Decimal"/>
                <param name="DETERMINATION_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="VERIFIED_BY" default="" type="String"/>
                <param name="ESTABLISHED_BY" default="" type="String"/>
                <param name="LIMITING_FACTORS" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MAOP_RATING
                    SET EVENT_GUID=:EVENT_GUID,MAOP_RATING=:MAOP_RATING,MOP=:MOP,DETERMINATION_METHOD_CL=:DETERMINATION_METHOD_CL,DETERMINATION_DATE=:DETERMINATION_DATE,VERIFIED_BY=:VERIFIED_BY,ESTABLISHED_BY=:ESTABLISHED_BY,LIMITING_FACTORS=:LIMITING_FACTORS,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MAOP_RATING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.MAOP_RATING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_MAOP_RATING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_MAOP_RATING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="METER" schema="PODS" id="PODS_METER" comment="PODS.METER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.METER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="METER_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="VANES_LF" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'METER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.METER(EVENT_ID,EVENT_GUID,TYPE_CL,METER_NUMBER,SERIAL_NUMBER,MANUFACTURER_CL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DATE_MANUFACTURED,VANES_LF,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:METER_NUMBER,:SERIAL_NUMBER,:MANUFACTURER_CL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DATE_MANUFACTURED,:VANES_LF,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="METER_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="VANES_LF" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.METER
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,METER_NUMBER=:METER_NUMBER,SERIAL_NUMBER=:SERIAL_NUMBER,MANUFACTURER_CL=:MANUFACTURER_CL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DATE_MANUFACTURED=:DATE_MANUFACTURED,VANES_LF=:VANES_LF,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.METER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_METER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_METER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="METER_STATION" schema="PODS" id="PODS_METER_STATION" comment="PODS.METER_STATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.METER_STATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="LEASE_NAME" default="" type="String"/>
                <param name="LEASE_OPERATOR" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="CLASS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'METER_STATION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.METER_STATION(EVENT_ID,EVENT_GUID,STATION_NUMBER,LEASE_NAME,LEASE_OPERATOR,TYPE_CL,STATUS_CL,CLASS_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:STATION_NUMBER,:LEASE_NAME,:LEASE_OPERATOR,:TYPE_CL,:STATUS_CL,:CLASS_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="LEASE_NAME" default="" type="String"/>
                <param name="LEASE_OPERATOR" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="CLASS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.METER_STATION
                    SET EVENT_GUID=:EVENT_GUID,STATION_NUMBER=:STATION_NUMBER,LEASE_NAME=:LEASE_NAME,LEASE_OPERATOR=:LEASE_OPERATOR,TYPE_CL=:TYPE_CL,STATUS_CL=:STATUS_CL,CLASS_CL=:CLASS_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_METER_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.METER_STATION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_METER_STATION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_METER_STATION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="NETWORK_SEGMENT" schema="PODS" id="PODS_NETWORK_SEGMENT" comment="PODS.NETWORK_SEGMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.NETWORK_SEGMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FROM_JUNCTION_ID" default="" type="Decimal"/>
                <param name="FROM_JUNCTION_GUID" default="" type="String"/>
                <param name="TO_JUNCTION_ID" default="" type="Decimal"/>
                <param name="TO_JUNCTION_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'NETWORK_SEGMENT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.NETWORK_SEGMENT(EVENT_ID,EVENT_GUID,FROM_JUNCTION_ID,FROM_JUNCTION_GUID,TO_JUNCTION_ID,TO_JUNCTION_GUID,DESCRIPTION,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:FROM_JUNCTION_ID,:FROM_JUNCTION_GUID,:TO_JUNCTION_ID,:TO_JUNCTION_GUID,:DESCRIPTION,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="FROM_JUNCTION_ID" default="" type="Decimal"/>
                <param name="FROM_JUNCTION_GUID" default="" type="String"/>
                <param name="TO_JUNCTION_ID" default="" type="Decimal"/>
                <param name="TO_JUNCTION_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.NETWORK_SEGMENT
                    SET EVENT_GUID=:EVENT_GUID,FROM_JUNCTION_ID=:FROM_JUNCTION_ID,FROM_JUNCTION_GUID=:FROM_JUNCTION_GUID,TO_JUNCTION_ID=:TO_JUNCTION_ID,TO_JUNCTION_GUID=:TO_JUNCTION_GUID,DESCRIPTION=:DESCRIPTION,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_NETWORK_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.NETWORK_SEGMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_NETWORK_SEGMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_NETWORK_SEGMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ODORANT_MEASUREMENT" schema="PODS" id="PODS_ODORANT_MEASUREMENT" comment="PODS.ODORANT_MEASUREMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ODORANT_MEASUREMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MEASUREMENT_STATION_NAME" default="" type="String"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ODOR_MEAS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ODORANT_MEASUREMENT(EVENT_ID,EVENT_GUID,TYPE_CL,MEASUREMENT_STATION_NAME,MEASUREMENT,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MEASUREMENT_STATION_NAME,:MEASUREMENT,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MEASUREMENT_STATION_NAME" default="" type="String"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ODORANT_MEASUREMENT
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MEASUREMENT_STATION_NAME=:MEASUREMENT_STATION_NAME,MEASUREMENT=:MEASUREMENT,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ODORANT_MEASUREMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ODORANT_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ODORANT_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ODORANT_RANGE" schema="PODS" id="PODS_ODORANT_RANGE" comment="PODS.ODORANT_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ODORANT_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ODORANT_GRANDFATHER_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ODORANT_RANGE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ODORANT_RANGE(EVENT_ID,EVENT_GUID,TYPE_CL,DESCRIPTION,ODORANT_GRANDFATHER_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:DESCRIPTION,:ODORANT_GRANDFATHER_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="ODORANT_GRANDFATHER_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ODORANT_RANGE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,ODORANT_GRANDFATHER_LF=:ODORANT_GRANDFATHER_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ODORANT_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ODORANT_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ODORANT_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ODORANT_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="OFFSHORE_RISER" schema="PODS" id="PODS_OFFSHORE_RISER" comment="PODS.OFFSHORE_RISER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.OFFSHORE_RISER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MATERIAL_GRADE_CL" default="UNKNOWN" type="String"/>
                <param name="DESIGN_FACTOR" default="" type="Decimal"/>
                <param name="DEPARTURE_ANGLE" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MAXIMUM_DEPTH" default="" type="Decimal"/>
                <param name="DEPTH_AT_TOUCHDOWN" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'OFFSHORE_RISER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.OFFSHORE_RISER(EVENT_ID,EVENT_GUID,TYPE_CL,PART_NUMBER,SERIAL_NUMBER,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,MATERIAL_GRADE_CL,DESIGN_FACTOR,DEPARTURE_ANGLE,MANUFACTURER_CL,DATE_MANUFACTURED,MAXIMUM_DEPTH,DEPTH_AT_TOUCHDOWN,DATE_INSTALLED,MATERIAL_CL,SPECIFICATION_CL,PIPE_LONG_SEAM_GCL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:PART_NUMBER,:SERIAL_NUMBER,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:MATERIAL_GRADE_CL,:DESIGN_FACTOR,:DEPARTURE_ANGLE,:MANUFACTURER_CL,:DATE_MANUFACTURED,:MAXIMUM_DEPTH,:DEPTH_AT_TOUCHDOWN,:DATE_INSTALLED,:MATERIAL_CL,:SPECIFICATION_CL,:PIPE_LONG_SEAM_GCL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MATERIAL_GRADE_CL" default="UNKNOWN" type="String"/>
                <param name="DESIGN_FACTOR" default="" type="Decimal"/>
                <param name="DEPARTURE_ANGLE" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MAXIMUM_DEPTH" default="" type="Decimal"/>
                <param name="DEPTH_AT_TOUCHDOWN" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.OFFSHORE_RISER
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,PART_NUMBER=:PART_NUMBER,SERIAL_NUMBER=:SERIAL_NUMBER,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,MATERIAL_GRADE_CL=:MATERIAL_GRADE_CL,DESIGN_FACTOR=:DESIGN_FACTOR,DEPARTURE_ANGLE=:DEPARTURE_ANGLE,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,MAXIMUM_DEPTH=:MAXIMUM_DEPTH,DEPTH_AT_TOUCHDOWN=:DEPTH_AT_TOUCHDOWN,DATE_INSTALLED=:DATE_INSTALLED,MATERIAL_CL=:MATERIAL_CL,SPECIFICATION_CL=:SPECIFICATION_CL,PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OFFSHORE_RISER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.OFFSHORE_RISER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_OFFSHORE_RISER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_OFFSHORE_RISER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="OWNER_OPERATOR_RANGE" schema="PODS" id="PODS_OWNER_OPERATOR_RANGE" comment="PODS.OWNER_OPERATOR_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.OWNER_OPERATOR_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PERCENT_INTEREST" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'OWNER_OPER_RNG',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.OWNER_OPERATOR_RANGE(EVENT_ID,EVENT_GUID,COMPANY_GCL,TYPE_CL,PERCENT_INTEREST,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:COMPANY_GCL,:TYPE_CL,:PERCENT_INTEREST,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PERCENT_INTEREST" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.OWNER_OPERATOR_RANGE
                    SET EVENT_GUID=:EVENT_GUID,COMPANY_GCL=:COMPANY_GCL,TYPE_CL=:TYPE_CL,PERCENT_INTEREST=:PERCENT_INTEREST,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_OWNER_OPERATOR_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.OWNER_OPERATOR_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_OWNER_OPERATOR_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_OWNER_OPERATOR_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PHYSICAL_INSPECTION" schema="PODS" id="PODS_PHYSICAL_INSPECTION" comment="PODS.PHYSICAL_INSPECTION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PHYSICAL_INSPECTION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="REASON_CL" default="UNKNOWN" type="String"/>
                <param name="CLASS_CL" default="UNKNOWN" type="String"/>
                <param name="INSPECTION_START_DATE" default="" type="DateTime"/>
                <param name="INSPECTION_END_DATE" default="" type="DateTime"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PHYSICAL_INSPECTION_IDENTIFIER" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PHYS_INSP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PHYSICAL_INSPECTION(EVENT_ID,EVENT_GUID,REASON_CL,CLASS_CL,INSPECTION_START_DATE,INSPECTION_END_DATE,PERFORMED_BY,INSPECTION_TYPE_GCL,PHYSICAL_INSPECTION_IDENTIFIER,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:REASON_CL,:CLASS_CL,:INSPECTION_START_DATE,:INSPECTION_END_DATE,:PERFORMED_BY,:INSPECTION_TYPE_GCL,:PHYSICAL_INSPECTION_IDENTIFIER,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="REASON_CL" default="UNKNOWN" type="String"/>
                <param name="CLASS_CL" default="UNKNOWN" type="String"/>
                <param name="INSPECTION_START_DATE" default="" type="DateTime"/>
                <param name="INSPECTION_END_DATE" default="" type="DateTime"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PHYSICAL_INSPECTION_IDENTIFIER" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PHYSICAL_INSPECTION
                    SET EVENT_GUID=:EVENT_GUID,REASON_CL=:REASON_CL,CLASS_CL=:CLASS_CL,INSPECTION_START_DATE=:INSPECTION_START_DATE,INSPECTION_END_DATE=:INSPECTION_END_DATE,PERFORMED_BY=:PERFORMED_BY,INSPECTION_TYPE_GCL=:INSPECTION_TYPE_GCL,PHYSICAL_INSPECTION_IDENTIFIER=:PHYSICAL_INSPECTION_IDENTIFIER,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PHYSICAL_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    no_integration EXCEPTION;
                    PRAGMA EXCEPTION_INIT(no_integration, -942);

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_ANODE_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_ANODE_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_ANODE_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_BOND_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_BOND_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_BOND_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CASING_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID  IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CASING_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID  IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CASING_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CIS_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CIS_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CIS_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CP_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CP_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE эта таблица заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CP_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID  IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_GROUND_BED_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_GROUND_BED_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_GROUND_BED_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_RECTIFIER_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID))
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_RECTIFIER_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID));

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_RECTIFIER_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID))`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CP_INSPECTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CP_INSPECTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID);
                    BEGIN
                    /*  Чистим GATE  эта таблица заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CP_INSPECTION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CP_INSPECTION
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_ADJACENT_CONSTRUCTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_ADJACENT_CONSTRUCTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_ADJACENT_CONSTRUCTION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;


                    DELETE
                    FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_COATING_DATA
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_COATING_DATA/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_COATING_DATA
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_COATING_DATA/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_COATING_DATA
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_COATING_DATA'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_COATING_DATA
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_COATING_DATA
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CORROSION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CORROSION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CORROSION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CORROSION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CORROSION
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CORROSION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CORROSION
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CORROSION
                    WHERE PI_EVENT_ID = :ID;


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CRACK
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CRACK/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CRACK
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CRACK/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CRACK
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CRACK'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CRACK
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CRACK
                    WHERE PI_EVENT_ID = :ID;


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_DEBRIS
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_DEBRIS/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_DEBRIS
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_DEBRIS/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_DEBRIS
                    WHERE PI_EVENT_ID = :ID);
                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_DEBRIS'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_DEBRIS
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_DEBRIS
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_ENVIRONMENT
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_ENVIRONMENT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ENVIRONMENT
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_ENVIRONMENT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ENVIRONMENT
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_ENVIRONMENT'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_ENVIRONMENT
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_ENVIRONMENT
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_EXCAVATION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_EXCAVATION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_EXCAVATION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_EXCAVATION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_EXCAVATION
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_EXCAVATION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_EXCAVATION
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_EXCAVATION
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_GIRTH_WELD
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_GIRTH_WELD/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GIRTH_WELD
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_GIRTH_WELD/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GIRTH_WELD
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_GIRTH_WELD'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_GIRTH_WELD
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_GIRTH_WELD
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_LEAK_SURVEY
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_LEAK_SURVEY/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LEAK_SURVEY
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_LEAK_SURVEY/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LEAK_SURVEY
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_LEAK_SURVEY'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_LEAK_SURVEY
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_LEAK_SURVEY
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_LEAK_SURVEY_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_LEAK_SURVEY_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_LEAK_SURVEY_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_LONG_WELD
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_LONG_WELD/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LONG_WELD
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_LONG_WELD/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_LONG_WELD
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_LONG_WELD'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_LONG_WELD
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_LONG_WELD
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_MARINE_GROWTH
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_MARINE_GROWTH/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MARINE_GROWTH
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_MARINE_GROWTH/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MARINE_GROWTH
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_MARINE_GROWTH'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_MARINE_GROWTH
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_MARINE_GROWTH
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_MATERIAL_DEFECT
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_MATERIAL_DEFECT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MATERIAL_DEFECT
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_MATERIAL_DEFECT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MATERIAL_DEFECT
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_MATERIAL_DEFECT'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_MATERIAL_DEFECT
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_MATERIAL_DEFECT
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_MECHANICAL_DAMAGE/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_MECHANICAL_DAMAGE/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_MECHANICAL_DAMAGE'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_METAL_LOSS
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_METAL_LOSS/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_METAL_LOSS
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_METAL_LOSS/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_METAL_LOSS
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_METAL_LOSS'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_METAL_LOSS
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_METAL_LOSS
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_PIPE_CONDITION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_PIPE_CONDITION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_PIPE_CONDITION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_PIPE_CONDITION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_PIPE_CONDITION
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_PIPE_CONDITION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_PIPE_CONDITION
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_PIPE_CONDITION
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_PIPELINE_MOVEMENT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_PIPELINE_MOVEMENT/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_PIPELINE_MOVEMENT'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_RELIEF_VALVE
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_RELIEF_VALVE/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RELIEF_VALVE
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_RELIEF_VALVE/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RELIEF_VALVE
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_RELIEF_VALVE'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_RELIEF_VALVE
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_RELIEF_VALVE
                    WHERE PI_EVENT_ID = :ID;


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_RIGHT_OF_WAY
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_RIGHT_OF_WAY/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RIGHT_OF_WAY
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_RIGHT_OF_WAY/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RIGHT_OF_WAY
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_RIGHT_OF_WAY'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_RIGHT_OF_WAY
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_RIGHT_OF_WAY
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_SUBSEA_INSPECTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_SUBSEA_INSPECTION/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_SUBSEA_INSPECTION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_SOIL
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_SOIL/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_SOIL
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_SOIL/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_SOIL
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_SOIL'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_SOIL
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_SOIL
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_TANK
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_TANK/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_TANK
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_TANK/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_TANK
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_TANK'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_TANK
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_TANK
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_WATER
                    WHERE PI_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_WATER/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_WATER
                    WHERE PI_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_WATER/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_WATER
                    WHERE PI_EVENT_ID = :ID);

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_WATER'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_WATER
                    WHERE PI_EVENT_ID = :VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_WATER
                    WHERE PI_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.PHYSICAL_INSPECTION
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PHYSICAL_INSPECTION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PHYSICAL_INSPECTION/'||CAST(:ID AS VARCHAR(30));

                    BEGIN
                    /*  Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PHYSICAL_INSPECTION'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  :VAR_EVENT_ID`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_ADJACENT_CONSTRUCTION" schema="PODS" id="PODS_PI_ADJACENT_CONSTRUCTION" comment="PODS.PI_ADJACENT_CONSTRUCTION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_ADJACENT_CONSTRUCTION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="NEAREST_FACILITY_CL" default="UNKNOWN" type="String"/>
                <param name="DISTANCE_TO_FACILITY" default="" type="Decimal"/>
                <param name="DIRECTION_TO_FACILITY_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PERSON_NOTIFIED" default="" type="String"/>
                <param name="DESCRIPTION_OF_CONSTRUCTION" default="" type="String"/>
                <param name="ESTIMATED_OCCUPANCY" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_ADJ_CONSTR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_ADJACENT_CONSTRUCTION(EVENT_ID,EVENT_GUID,INSPECTION_DATE,NEAREST_FACILITY_CL,DISTANCE_TO_FACILITY,DIRECTION_TO_FACILITY_GCL,MARKER_TYPE_GCL,PERSON_NOTIFIED,DESCRIPTION_OF_CONSTRUCTION,ESTIMATED_OCCUPANCY,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:NEAREST_FACILITY_CL,:DISTANCE_TO_FACILITY,:DIRECTION_TO_FACILITY_GCL,:MARKER_TYPE_GCL,:PERSON_NOTIFIED,:DESCRIPTION_OF_CONSTRUCTION,:ESTIMATED_OCCUPANCY,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="NEAREST_FACILITY_CL" default="UNKNOWN" type="String"/>
                <param name="DISTANCE_TO_FACILITY" default="" type="Decimal"/>
                <param name="DIRECTION_TO_FACILITY_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PERSON_NOTIFIED" default="" type="String"/>
                <param name="DESCRIPTION_OF_CONSTRUCTION" default="" type="String"/>
                <param name="ESTIMATED_OCCUPANCY" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_ADJACENT_CONSTRUCTION
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,NEAREST_FACILITY_CL=:NEAREST_FACILITY_CL,DISTANCE_TO_FACILITY=:DISTANCE_TO_FACILITY,DIRECTION_TO_FACILITY_GCL=:DIRECTION_TO_FACILITY_GCL,MARKER_TYPE_GCL=:MARKER_TYPE_GCL,PERSON_NOTIFIED=:PERSON_NOTIFIED,DESCRIPTION_OF_CONSTRUCTION=:DESCRIPTION_OF_CONSTRUCTION,ESTIMATED_OCCUPANCY=:ESTIMATED_OCCUPANCY,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ADJACENT_CONSTRUCTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_ADJACENT_CONSTRUCTION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_ADJACENT_CONSTRUCTION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_ADJACENT_CONSTRUCTION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_ANODE_READING" schema="PODS" id="PODS_PI_ANODE_READING" comment="PODS.PI_ANODE_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_ANODE_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_ANODE_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_ANODE_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_ANODE_READING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_ANODE_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,POTENTIAL_READING,CURRENT_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,REF_ANODE_EVENT_ID,REF_ANODE_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:POTENTIAL_READING,:CURRENT_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:REF_ANODE_EVENT_ID,:REF_ANODE_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_ANODE_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_ANODE_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_ANODE_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,POTENTIAL_READING=:POTENTIAL_READING,CURRENT_READING=:CURRENT_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,REF_ANODE_EVENT_ID=:REF_ANODE_EVENT_ID,REF_ANODE_EVENT_GUID=:REF_ANODE_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ANODE_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_ANODE_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_ANODE_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_ANODE_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_BOND_READING" schema="PODS" id="PODS_PI_BOND_READING" comment="PODS.PI_BOND_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_BOND_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_BOND_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_BOND_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_BOND_READING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_BOND_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,POTENTIAL_READING,CURRENT_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,REF_BOND_LEAD_EVENT_ID,REF_BOND_LEAD_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:POTENTIAL_READING,:CURRENT_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:REF_BOND_LEAD_EVENT_ID,:REF_BOND_LEAD_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_BOND_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_BOND_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_BOND_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,POTENTIAL_READING=:POTENTIAL_READING,CURRENT_READING=:CURRENT_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,REF_BOND_LEAD_EVENT_ID=:REF_BOND_LEAD_EVENT_ID,REF_BOND_LEAD_EVENT_GUID=:REF_BOND_LEAD_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_BOND_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_BOND_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_BOND_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_BOND_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CASING_READING" schema="PODS" id="PODS_PI_CASING_READING" comment="PODS.PI_CASING_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CASING_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SHORTED_LF" default="" type="String"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_CASING_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_CASING_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CASING_READ',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CASING_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,SHORTED_LF,CURRENT_READING,POTENTIAL_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,REF_CASING_EVENT_ID,REF_CASING_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:SHORTED_LF,:CURRENT_READING,:POTENTIAL_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:REF_CASING_EVENT_ID,:REF_CASING_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SHORTED_LF" default="" type="String"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_CASING_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_CASING_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CASING_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,SHORTED_LF=:SHORTED_LF,CURRENT_READING=:CURRENT_READING,POTENTIAL_READING=:POTENTIAL_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,REF_CASING_EVENT_ID=:REF_CASING_EVENT_ID,REF_CASING_EVENT_GUID=:REF_CASING_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CASING_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_CASING_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_CASING_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_CASING_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CIS_READING" schema="PODS" id="PODS_PI_CIS_READING" comment="PODS.PI_CIS_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CIS_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PS_ON" default="" type="Decimal"/>
                <param name="PS_OFF" default="" type="Decimal"/>
                <param name="STATIC" default="" type="Decimal"/>
                <param name="DC_POTENTIAL_VOLTS" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="GRAD_ON" default="" type="Decimal"/>
                <param name="GRAD_OFF" default="" type="Decimal"/>
                <param name="D_GRAD" default="" type="Decimal"/>
                <param name="DD_GRAD" default="" type="Decimal"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CIS_READING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CIS_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,PS_ON,PS_OFF,STATIC,DC_POTENTIAL_VOLTS,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS,GRAD_ON,GRAD_OFF,D_GRAD,DD_GRAD)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:PS_ON,:PS_OFF,:STATIC,:DC_POTENTIAL_VOLTS,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS,:GRAD_ON,:GRAD_OFF,:D_GRAD,:DD_GRAD);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PS_ON" default="" type="Decimal"/>
                <param name="PS_OFF" default="" type="Decimal"/>
                <param name="STATIC" default="" type="Decimal"/>
                <param name="DC_POTENTIAL_VOLTS" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="GRAD_ON" default="" type="Decimal"/>
                <param name="GRAD_OFF" default="" type="Decimal"/>
                <param name="D_GRAD" default="" type="Decimal"/>
                <param name="DD_GRAD" default="" type="Decimal"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CIS_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,PS_ON=:PS_ON,PS_OFF=:PS_OFF,STATIC=:STATIC,DC_POTENTIAL_VOLTS=:DC_POTENTIAL_VOLTS,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS,GRAD_ON=:GRAD_ON,GRAD_OFF=:GRAD_OFF,D_GRAD=:D_GRAD,DD_GRAD=:DD_GRAD
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CIS_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    no_integration EXCEPTION;
                    PRAGMA EXCEPTION_INIT(no_integration, -942);
                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_CIS_READING
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PI_CIS_READING/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PI_CIS_READING/'||CAST(:ID AS VARCHAR(30));

                    BEGIN
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = ANY ('PI_CIS_READING')
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES = :VAR_EVENT_ID`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_COATING_DATA" schema="PODS" id="PODS_PI_COATING_DATA" comment="PODS.PI_COATING_DATA">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_COATING_DATA t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="COATING_TYPE_SCL" default="" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="" type="String"/>
                <param name="CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="DEFECT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MOISTURE_UNDER_COATING_LF" default="" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="DISBOND_DRY_LF" default="" type="String"/>
                <param name="LONG_SEAM_TENT_LEFT" default="" type="Decimal"/>
                <param name="LONG_SEAM_TENT_RIGHT" default="" type="Decimal"/>
                <param name="THICKNESS_AT_0" default="" type="Decimal"/>
                <param name="THICKNESS_AT_45" default="" type="Decimal"/>
                <param name="THICKNESS_AT_90" default="" type="Decimal"/>
                <param name="THICKNESS_AT_135" default="" type="Decimal"/>
                <param name="THICKNESS_AT_180" default="" type="Decimal"/>
                <param name="THICKNESS_AT_225" default="" type="Decimal"/>
                <param name="THICKNESS_AT_270" default="" type="Decimal"/>
                <param name="THICKNESS_AT_315" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_COATING_DATA',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_COATING_DATA(EVENT_ID,EVENT_GUID,INSPECTION_DATE,COATING_TYPE_SCL,COATING_SUBTYPE_SCL,CONDITION_CL,DEFECT_TYPE_CL,MOISTURE_UNDER_COATING_LF,AXIAL_LENGTH,CIRCUM_LENGTH,MAX_WIDTH,DISBOND_DRY_LF,LONG_SEAM_TENT_LEFT,LONG_SEAM_TENT_RIGHT,THICKNESS_AT_0,THICKNESS_AT_45,THICKNESS_AT_90,THICKNESS_AT_135,THICKNESS_AT_180,THICKNESS_AT_225,THICKNESS_AT_270,THICKNESS_AT_315,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),:CONDITION_CL,:DEFECT_TYPE_CL,:MOISTURE_UNDER_COATING_LF,:AXIAL_LENGTH,:CIRCUM_LENGTH,:MAX_WIDTH,:DISBOND_DRY_LF,:LONG_SEAM_TENT_LEFT,:LONG_SEAM_TENT_RIGHT,:THICKNESS_AT_0,:THICKNESS_AT_45,:THICKNESS_AT_90,:THICKNESS_AT_135,:THICKNESS_AT_180,:THICKNESS_AT_225,:THICKNESS_AT_270,:THICKNESS_AT_315,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="COATING_TYPE_SCL" default="" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="" type="String"/>
                <param name="CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="DEFECT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MOISTURE_UNDER_COATING_LF" default="" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="DISBOND_DRY_LF" default="" type="String"/>
                <param name="LONG_SEAM_TENT_LEFT" default="" type="Decimal"/>
                <param name="LONG_SEAM_TENT_RIGHT" default="" type="Decimal"/>
                <param name="THICKNESS_AT_0" default="" type="Decimal"/>
                <param name="THICKNESS_AT_45" default="" type="Decimal"/>
                <param name="THICKNESS_AT_90" default="" type="Decimal"/>
                <param name="THICKNESS_AT_135" default="" type="Decimal"/>
                <param name="THICKNESS_AT_180" default="" type="Decimal"/>
                <param name="THICKNESS_AT_225" default="" type="Decimal"/>
                <param name="THICKNESS_AT_270" default="" type="Decimal"/>
                <param name="THICKNESS_AT_315" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_COATING_DATA
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,COATING_TYPE_SCL=REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),COATING_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),CONDITION_CL=:CONDITION_CL,DEFECT_TYPE_CL=:DEFECT_TYPE_CL,MOISTURE_UNDER_COATING_LF=:MOISTURE_UNDER_COATING_LF,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,MAX_WIDTH=:MAX_WIDTH,DISBOND_DRY_LF=:DISBOND_DRY_LF,LONG_SEAM_TENT_LEFT=:LONG_SEAM_TENT_LEFT,LONG_SEAM_TENT_RIGHT=:LONG_SEAM_TENT_RIGHT,THICKNESS_AT_0=:THICKNESS_AT_0,THICKNESS_AT_45=:THICKNESS_AT_45,THICKNESS_AT_90=:THICKNESS_AT_90,THICKNESS_AT_135=:THICKNESS_AT_135,THICKNESS_AT_180=:THICKNESS_AT_180,THICKNESS_AT_225=:THICKNESS_AT_225,THICKNESS_AT_270=:THICKNESS_AT_270,THICKNESS_AT_315=:THICKNESS_AT_315,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_COATING_DATA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_COATING_DATA
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_COATING_DATA/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_COATING_DATA/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CORROSION" schema="PODS" id="PODS_PI_CORROSION" comment="PODS.PI_CORROSION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CORROSION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="REF_GIRTH_WELD" default="" type="Decimal"/>
                <param name="DIST_FROM_GIRTH_WELD" default="" type="Decimal"/>
                <param name="FEATURE_NUMBER" default="" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="SITE_ID" default="0" type="Decimal"/>
                <param name="DEFECT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="DISBOND_DRY_LF" default="" type="String"/>
                <param name="LONG_SEAM_TENT_LEFT" default="" type="Decimal"/>
                <param name="LONG_SEAM_TENT_RIGHT" default="" type="Decimal"/>
                <param name="DEPOSIT_DESCRIPTION" default="" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CORROSION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CORROSION(EVENT_ID,EVENT_GUID,INSPECTION_DATE,REF_GIRTH_WELD,DIST_FROM_GIRTH_WELD,FEATURE_NUMBER,ORIENTATION,SITE_ID,DEFECT_TYPE_CL,AXIAL_LENGTH,CIRCUM_LENGTH,MAX_WIDTH,DISBOND_DRY_LF,LONG_SEAM_TENT_LEFT,LONG_SEAM_TENT_RIGHT,DEPOSIT_DESCRIPTION,SURFACE_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:REF_GIRTH_WELD,:DIST_FROM_GIRTH_WELD,:FEATURE_NUMBER,:ORIENTATION,:SITE_ID,:DEFECT_TYPE_CL,:AXIAL_LENGTH,:CIRCUM_LENGTH,:MAX_WIDTH,:DISBOND_DRY_LF,:LONG_SEAM_TENT_LEFT,:LONG_SEAM_TENT_RIGHT,:DEPOSIT_DESCRIPTION,:SURFACE_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="REF_GIRTH_WELD" default="" type="Decimal"/>
                <param name="DIST_FROM_GIRTH_WELD" default="" type="Decimal"/>
                <param name="FEATURE_NUMBER" default="" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="SITE_ID" default="0" type="Decimal"/>
                <param name="DEFECT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="DISBOND_DRY_LF" default="" type="String"/>
                <param name="LONG_SEAM_TENT_LEFT" default="" type="Decimal"/>
                <param name="LONG_SEAM_TENT_RIGHT" default="" type="Decimal"/>
                <param name="DEPOSIT_DESCRIPTION" default="" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CORROSION
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,REF_GIRTH_WELD=:REF_GIRTH_WELD,DIST_FROM_GIRTH_WELD=:DIST_FROM_GIRTH_WELD,FEATURE_NUMBER=:FEATURE_NUMBER,ORIENTATION=:ORIENTATION,SITE_ID=:SITE_ID,DEFECT_TYPE_CL=:DEFECT_TYPE_CL,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,MAX_WIDTH=:MAX_WIDTH,DISBOND_DRY_LF=:DISBOND_DRY_LF,LONG_SEAM_TENT_LEFT=:LONG_SEAM_TENT_LEFT,LONG_SEAM_TENT_RIGHT=:LONG_SEAM_TENT_RIGHT,DEPOSIT_DESCRIPTION=:DEPOSIT_DESCRIPTION,SURFACE_CL=:SURFACE_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CORROSION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_CORROSION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_CORROSION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_CORROSION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CP_INSPECTION" schema="PODS" id="PODS_PI_CP_INSPECTION" comment="PODS.PI_CP_INSPECTION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CP_INSPECTION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="CRITERIA_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="RESULT_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_SPACING" default="" type="Decimal"/>
                <param name="TOOL_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CP_INSPECTION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CP_INSPECTION(EVENT_ID,EVENT_GUID,INSPECTION_DATE,CRITERIA_CL,TYPE_CL,RESULT_CL,NOMINAL_SPACING,TOOL_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:CRITERIA_CL,:TYPE_CL,:RESULT_CL,:NOMINAL_SPACING,:TOOL_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="CRITERIA_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="RESULT_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_SPACING" default="" type="Decimal"/>
                <param name="TOOL_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CP_INSPECTION
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,CRITERIA_CL=:CRITERIA_CL,TYPE_CL=:TYPE_CL,RESULT_CL=:RESULT_CL,NOMINAL_SPACING=:NOMINAL_SPACING,TOOL_CL=:TOOL_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    no_integration EXCEPTION;
                    PRAGMA EXCEPTION_INIT(no_integration, -942);
                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_ANODE_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_ANODE_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_ANODE_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_ANODE_READING
                    WHERE PI_CP_EVENT_ID = :ID;


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_BOND_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_BOND_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_BOND_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_BOND_READING
                    WHERE PI_CP_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CASING_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CASING_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CASING_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CASING_READING
                    WHERE PI_CP_EVENT_ID = :ID;


                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CIS_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CIS_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CIS_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CIS_READING
                    WHERE PI_CP_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_CP_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_CP_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE эта таблица заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_CP_READING'
                    AND KEY_FIELDS = 'PI_CP_READING_ID'
                    AND KEY_VALUES = ANY (SELECT PI_CP_READING_ID
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_CP_READING
                    WHERE PI_CP_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = ANY (SELECT EVENT_ID
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_GROUND_BED_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_GROUND_BED_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_GROUND_BED_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES = ANY (SELECT EVENT_ID
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_GROUND_BED_READING
                    WHERE PI_CP_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_RECTIFIER_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_RECTIFIER_READING/'||CAST(EVENT_ID AS VARCHAR(30))
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID = :ID);

                    BEGIN
                    /* Чистим GATE с расчетом на будущее, пока эта таблица не заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'PI_RECTIFIER_READING'
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES =  ANY (SELECT EVENT_ID
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID =:VAR_EVENT_ID)`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    DELETE
                    FROM PODS.PI_RECTIFIER_READING
                    WHERE PI_CP_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.PI_CP_INSPECTION
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PI_CP_INSPECTION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PI_CP_INSPECTION/'||CAST(:ID AS VARCHAR(30));

                    BEGIN
                    /* Чистим GATE эта таблица заполняется */
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = ANY ('PI_CP_INSPECTION')
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES = :VAR_EVENT_ID`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CP_READING" schema="PODS" id="PODS_PI_CP_READING" comment="PODS.PI_CP_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CP_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="PI_CP_READING_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="PS_ON" default="" type="Decimal"/>
                <param name="PS_OFF" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="GRAD_ON" default="" type="Decimal"/>
                <param name="GRAD_OFF" default="" type="Decimal"/>
                <param name="D_GRAD" default="" type="Decimal"/>
                <param name="DD_GRAD" default="" type="Decimal"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CP_READING',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CP_READING(EVENT_ID,PI_CP_READING_GUID,EVENT_GUID,TYPE_CL,INSPECTION_DATE,DESCRIPTION,POTENTIAL_READING,CURRENT_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,PS_ON,PS_OFF,REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID,SOURCE_GCL,COMMENTS,GRAD_ON,GRAD_OFF,D_GRAD,DD_GRAD)
                    VALUES(:ID,:PI_CP_READING_GUID,:EVENT_GUID,:TYPE_CL,:INSPECTION_DATE,:DESCRIPTION,:POTENTIAL_READING,:CURRENT_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:PS_ON,:PS_OFF,:REF_TEST_LEAD_EVENT_ID,:REF_TEST_LEAD_EVENT_GUID,:SOURCE_GCL,:COMMENTS,:GRAD_ON,:GRAD_OFF,:D_GRAD,:DD_GRAD);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="PI_CP_READING_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="PS_ON" default="" type="Decimal"/>
                <param name="PS_OFF" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_TEST_LEAD_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="GRAD_ON" default="" type="Decimal"/>
                <param name="GRAD_OFF" default="" type="Decimal"/>
                <param name="D_GRAD" default="" type="Decimal"/>
                <param name="DD_GRAD" default="" type="Decimal"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CP_READING
                    SET PI_CP_READING_GUID=:PI_CP_READING_GUID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,POTENTIAL_READING=:POTENTIAL_READING,CURRENT_READING=:CURRENT_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,PS_ON=:PS_ON,PS_OFF=:PS_OFF,REF_TEST_LEAD_EVENT_ID=:REF_TEST_LEAD_EVENT_ID,REF_TEST_LEAD_EVENT_GUID=:REF_TEST_LEAD_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS,GRAD_ON=:GRAD_ON,GRAD_OFF=:GRAD_OFF,D_GRAD=:D_GRAD,DD_GRAD=:DD_GRAD
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CP_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    no_integration EXCEPTION;
                    PRAGMA EXCEPTION_INIT(no_integration, -942);
                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_CP_READING
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PI_CP_READING/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PI_CP_READING/'||CAST(:ID AS VARCHAR(30));

                    BEGIN
                    EXECUTE IMMEDIATE q'`DELETE
                    FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = ANY ('PI_CP_READING')
                    AND KEY_FIELDS = 'EVENT_ID'
                    AND KEY_VALUES = :VAR_EVENT_ID`'
                    USING :ID;
                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_CRACK" schema="PODS" id="PODS_PI_CRACK" comment="PODS.PI_CRACK">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_CRACK t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CORROSION_PRESENT_LF" default="" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="AVG_DEPTH" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="TIP_TO_TIP_DIST" default="" type="Decimal"/>
                <param name="SIDE_TO_SIDE_SEPARATION" default="" type="Decimal"/>
                <param name="SIDE_TO_SIDE_TO_WT_RATIO" default="" type="Decimal"/>
                <param name="LINEAR_AT_WELD_TOE_FLAG_LF" default="" type="String"/>
                <param name="SIGNIFICANT_CRACK_LF" default="" type="String"/>
                <param name="INTERLINKING_LF" default="" type="String"/>
                <param name="FAILURE_PRESSURE" default="" type="Decimal"/>
                <param name="FAILURE_ALGORITHM_GCL" default="UNKNOWN" type="String"/>
                <param name="WT_MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="METALOGRAPHY" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_CRACK',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_CRACK(EVENT_ID,EVENT_GUID,INSPECTION_DATE,ORIENTATION,TYPE_CL,CORROSION_PRESENT_LF,AXIAL_LENGTH,CIRCUM_LENGTH,MAX_WIDTH,MAX_DEPTH,AVG_DEPTH,MEASUREMENT_METHOD_CL,TIP_TO_TIP_DIST,SIDE_TO_SIDE_SEPARATION,SIDE_TO_SIDE_TO_WT_RATIO,LINEAR_AT_WELD_TOE_FLAG_LF,SIGNIFICANT_CRACK_LF,INTERLINKING_LF,FAILURE_PRESSURE,FAILURE_ALGORITHM_GCL,WT_MEASUREMENT_METHOD_CL,METALOGRAPHY,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:ORIENTATION,:TYPE_CL,:CORROSION_PRESENT_LF,:AXIAL_LENGTH,:CIRCUM_LENGTH,:MAX_WIDTH,:MAX_DEPTH,:AVG_DEPTH,:MEASUREMENT_METHOD_CL,:TIP_TO_TIP_DIST,:SIDE_TO_SIDE_SEPARATION,:SIDE_TO_SIDE_TO_WT_RATIO,:LINEAR_AT_WELD_TOE_FLAG_LF,:SIGNIFICANT_CRACK_LF,:INTERLINKING_LF,:FAILURE_PRESSURE,:FAILURE_ALGORITHM_GCL,:WT_MEASUREMENT_METHOD_CL,:METALOGRAPHY,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CORROSION_PRESENT_LF" default="" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="AVG_DEPTH" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="TIP_TO_TIP_DIST" default="" type="Decimal"/>
                <param name="SIDE_TO_SIDE_SEPARATION" default="" type="Decimal"/>
                <param name="SIDE_TO_SIDE_TO_WT_RATIO" default="" type="Decimal"/>
                <param name="LINEAR_AT_WELD_TOE_FLAG_LF" default="" type="String"/>
                <param name="SIGNIFICANT_CRACK_LF" default="" type="String"/>
                <param name="INTERLINKING_LF" default="" type="String"/>
                <param name="FAILURE_PRESSURE" default="" type="Decimal"/>
                <param name="FAILURE_ALGORITHM_GCL" default="UNKNOWN" type="String"/>
                <param name="WT_MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="METALOGRAPHY" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_CRACK
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,ORIENTATION=:ORIENTATION,TYPE_CL=:TYPE_CL,CORROSION_PRESENT_LF=:CORROSION_PRESENT_LF,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,MAX_WIDTH=:MAX_WIDTH,MAX_DEPTH=:MAX_DEPTH,AVG_DEPTH=:AVG_DEPTH,MEASUREMENT_METHOD_CL=:MEASUREMENT_METHOD_CL,TIP_TO_TIP_DIST=:TIP_TO_TIP_DIST,SIDE_TO_SIDE_SEPARATION=:SIDE_TO_SIDE_SEPARATION,SIDE_TO_SIDE_TO_WT_RATIO=:SIDE_TO_SIDE_TO_WT_RATIO,LINEAR_AT_WELD_TOE_FLAG_LF=:LINEAR_AT_WELD_TOE_FLAG_LF,SIGNIFICANT_CRACK_LF=:SIGNIFICANT_CRACK_LF,INTERLINKING_LF=:INTERLINKING_LF,FAILURE_PRESSURE=:FAILURE_PRESSURE,FAILURE_ALGORITHM_GCL=:FAILURE_ALGORITHM_GCL,WT_MEASUREMENT_METHOD_CL=:WT_MEASUREMENT_METHOD_CL,METALOGRAPHY=:METALOGRAPHY,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_CRACK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_CRACK
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_CRACK/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_CRACK/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_DEBRIS" schema="PODS" id="PODS_PI_DEBRIS" comment="PODS.PI_DEBRIS">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_DEBRIS t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_DEBRIS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_DEBRIS(EVENT_ID,EVENT_GUID,INSPECTION_DATE,TYPE_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:TYPE_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_DEBRIS
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,TYPE_CL=:TYPE_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_DEBRIS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_DEBRIS
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_DEBRIS/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_DEBRIS/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_ENVIRONMENT" schema="PODS" id="PODS_PI_ENVIRONMENT" comment="PODS.PI_ENVIRONMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_ENVIRONMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="PIPELINE_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="AMBIENT_TEMPERATURE" default="" type="Decimal"/>
                <param name="PIPELINE_TEMPERATURE" default="" type="Decimal"/>
                <param name="TERRAIN_CL" default="UNKNOWN" type="String"/>
                <param name="FAULT_ZONE_LF" default="" type="String"/>
                <param name="STABILITY_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_DRAINAGE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_ENVIRONMENT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_ENVIRONMENT(EVENT_ID,EVENT_GUID,INSPECTION_DATE,PERFORMED_BY,PIPELINE_LOCATION_CL,AMBIENT_TEMPERATURE,PIPELINE_TEMPERATURE,TERRAIN_CL,FAULT_ZONE_LF,STABILITY_CL,SURFACE_DRAINAGE_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:PERFORMED_BY,:PIPELINE_LOCATION_CL,:AMBIENT_TEMPERATURE,:PIPELINE_TEMPERATURE,:TERRAIN_CL,:FAULT_ZONE_LF,:STABILITY_CL,:SURFACE_DRAINAGE_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="PIPELINE_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="AMBIENT_TEMPERATURE" default="" type="Decimal"/>
                <param name="PIPELINE_TEMPERATURE" default="" type="Decimal"/>
                <param name="TERRAIN_CL" default="UNKNOWN" type="String"/>
                <param name="FAULT_ZONE_LF" default="" type="String"/>
                <param name="STABILITY_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_DRAINAGE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_ENVIRONMENT
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,PERFORMED_BY=:PERFORMED_BY,PIPELINE_LOCATION_CL=:PIPELINE_LOCATION_CL,AMBIENT_TEMPERATURE=:AMBIENT_TEMPERATURE,PIPELINE_TEMPERATURE=:PIPELINE_TEMPERATURE,TERRAIN_CL=:TERRAIN_CL,FAULT_ZONE_LF=:FAULT_ZONE_LF,STABILITY_CL=:STABILITY_CL,SURFACE_DRAINAGE_CL=:SURFACE_DRAINAGE_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_ENVIRONMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_ENVIRONMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_ENVIRONMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_ENVIRONMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_EXCAVATION" schema="PODS" id="PODS_PI_EXCAVATION" comment="PODS.PI_EXCAVATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_EXCAVATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="EXCAVATION_PROJECT_ID" default="0" type="Decimal"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SITE_NAME" default="" type="String"/>
                <param name="SITE_DESCRIPTION" default="" type="String"/>
                <param name="EXCAVATION_DATE" default="" type="DateTime"/>
                <param name="EXCAVATION_CONTRACTOR" default="" type="String"/>
                <param name="MPI_CONTRACTOR" default="" type="String"/>
                <param name="MPI_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_PREP_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_EXCAVATED_TOP_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_LEFT_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_RIGHT_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_BOTTOM_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="RESPONSE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_EXCAVATION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_EXCAVATION(EVENT_ID,EVENT_GUID,EXCAVATION_PROJECT_ID,INSPECTION_DATE,SITE_NAME,SITE_DESCRIPTION,EXCAVATION_DATE,EXCAVATION_CONTRACTOR,MPI_CONTRACTOR,MPI_METHOD_CL,SURFACE_PREP_METHOD_CL,PIPE_EXCAVATED_TOP_LF,PIPE_EXCAVATED_LEFT_LF,PIPE_EXCAVATED_RIGHT_LF,PIPE_EXCAVATED_BOTTOM_LF,PI_EVENT_ID,PI_EVENT_GUID,RESPONSE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:EXCAVATION_PROJECT_ID,:INSPECTION_DATE,:SITE_NAME,:SITE_DESCRIPTION,:EXCAVATION_DATE,:EXCAVATION_CONTRACTOR,:MPI_CONTRACTOR,:MPI_METHOD_CL,:SURFACE_PREP_METHOD_CL,:PIPE_EXCAVATED_TOP_LF,:PIPE_EXCAVATED_LEFT_LF,:PIPE_EXCAVATED_RIGHT_LF,:PIPE_EXCAVATED_BOTTOM_LF,:PI_EVENT_ID,:PI_EVENT_GUID,:RESPONSE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="EXCAVATION_PROJECT_ID" default="0" type="Decimal"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SITE_NAME" default="" type="String"/>
                <param name="SITE_DESCRIPTION" default="" type="String"/>
                <param name="EXCAVATION_DATE" default="" type="DateTime"/>
                <param name="EXCAVATION_CONTRACTOR" default="" type="String"/>
                <param name="MPI_CONTRACTOR" default="" type="String"/>
                <param name="MPI_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_PREP_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_EXCAVATED_TOP_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_LEFT_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_RIGHT_LF" default="" type="String"/>
                <param name="PIPE_EXCAVATED_BOTTOM_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="RESPONSE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_EXCAVATION
                    SET EVENT_GUID=:EVENT_GUID,EXCAVATION_PROJECT_ID=:EXCAVATION_PROJECT_ID,INSPECTION_DATE=:INSPECTION_DATE,SITE_NAME=:SITE_NAME,SITE_DESCRIPTION=:SITE_DESCRIPTION,EXCAVATION_DATE=:EXCAVATION_DATE,EXCAVATION_CONTRACTOR=:EXCAVATION_CONTRACTOR,MPI_CONTRACTOR=:MPI_CONTRACTOR,MPI_METHOD_CL=:MPI_METHOD_CL,SURFACE_PREP_METHOD_CL=:SURFACE_PREP_METHOD_CL,PIPE_EXCAVATED_TOP_LF=:PIPE_EXCAVATED_TOP_LF,PIPE_EXCAVATED_LEFT_LF=:PIPE_EXCAVATED_LEFT_LF,PIPE_EXCAVATED_RIGHT_LF=:PIPE_EXCAVATED_RIGHT_LF,PIPE_EXCAVATED_BOTTOM_LF=:PIPE_EXCAVATED_BOTTOM_LF,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,RESPONSE_CL=:RESPONSE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_EXCAVATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_EXCAVATION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_EXCAVATION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_EXCAVATION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_GIRTH_WELD" schema="PODS" id="PODS_PI_GIRTH_WELD" comment="PODS.PI_GIRTH_WELD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_GIRTH_WELD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="WELD_THICKNESS" default="0" type="Decimal"/>
                <param name="WELD_CONDITION_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_GIRTH_WELD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_GIRTH_WELD(EVENT_ID,EVENT_GUID,INSPECTION_DATE,WELD_THICKNESS,WELD_CONDITION_GCL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:WELD_THICKNESS,:WELD_CONDITION_GCL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="WELD_THICKNESS" default="0" type="Decimal"/>
                <param name="WELD_CONDITION_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_GIRTH_WELD
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,WELD_THICKNESS=:WELD_THICKNESS,WELD_CONDITION_GCL=:WELD_CONDITION_GCL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GIRTH_WELD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_GIRTH_WELD
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_GIRTH_WELD/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_GIRTH_WELD/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_GROUND_BED_READING" schema="PODS" id="PODS_PI_GROUND_BED_READING" comment="PODS.PI_GROUND_BED_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_GROUND_BED_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_GROUND_BED_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_GROUND_BED_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_GR_BED_READ',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_GROUND_BED_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,POTENTIAL_READING,CURRENT_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,REF_GROUND_BED_EVENT_ID,REF_GROUND_BED_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:POTENTIAL_READING,:CURRENT_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:REF_GROUND_BED_EVENT_ID,:REF_GROUND_BED_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_GROUND_BED_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_GROUND_BED_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_GROUND_BED_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,POTENTIAL_READING=:POTENTIAL_READING,CURRENT_READING=:CURRENT_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,REF_GROUND_BED_EVENT_ID=:REF_GROUND_BED_EVENT_ID,REF_GROUND_BED_EVENT_GUID=:REF_GROUND_BED_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_GROUND_BED_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_GROUND_BED_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_GROUND_BED_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_GROUND_BED_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIG_SIGNAL" schema="PODS" id="PODS_PIG_SIGNAL" comment="PODS.PIG_SIGNAL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIG_SIGNAL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="REMOTE_LF" default="" type="String"/>
                <param name="TRAP_LF" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIG_SIGNAL',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIG_SIGNAL(EVENT_ID,EVENT_GUID,MANUFACTURER_CL,TYPE_CL,REMOTE_LF,TRAP_LF,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MANUFACTURER_CL,:TYPE_CL,:REMOTE_LF,:TRAP_LF,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="REMOTE_LF" default="" type="String"/>
                <param name="TRAP_LF" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIG_SIGNAL
                    SET EVENT_GUID=:EVENT_GUID,MANUFACTURER_CL=:MANUFACTURER_CL,TYPE_CL=:TYPE_CL,REMOTE_LF=:REMOTE_LF,TRAP_LF=:TRAP_LF,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIG_SIGNAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIG_SIGNAL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIG_SIGNAL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIG_SIGNAL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_IC_COUPON_READING" schema="PODS" id="PODS_PI_IC_COUPON_READING" comment="PODS.PI_IC_COUPON_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_IC_COUPON_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="MASS_AT_INSPECTION" default="" type="Decimal"/>
                <param name="SURFACE_AREA_AT_INSPECTION" default="" type="Decimal"/>
                <param name="REF_COUPON_ID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_IC_CPN_READ',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_IC_COUPON_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,MASS_AT_INSPECTION,SURFACE_AREA_AT_INSPECTION,REF_COUPON_ID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:MASS_AT_INSPECTION,:SURFACE_AREA_AT_INSPECTION,:REF_COUPON_ID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="MASS_AT_INSPECTION" default="" type="Decimal"/>
                <param name="SURFACE_AREA_AT_INSPECTION" default="" type="Decimal"/>
                <param name="REF_COUPON_ID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_IC_COUPON_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,MASS_AT_INSPECTION=:MASS_AT_INSPECTION,SURFACE_AREA_AT_INSPECTION=:SURFACE_AREA_AT_INSPECTION,REF_COUPON_ID=:REF_COUPON_ID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_IC_COUPON_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_IC_COUPON_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_IC_COUPON_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_IC_COUPON_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_LEAK_SURVEY" schema="PODS" id="PODS_PI_LEAK_SURVEY" comment="PODS.PI_LEAK_SURVEY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_LEAK_SURVEY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_SPACING" default="" type="Decimal"/>
                <param name="LS_TOOL_ID" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_LEAK_SURVEY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_LEAK_SURVEY(EVENT_ID,EVENT_GUID,INSPECTION_DATE,TYPE_CL,NOMINAL_SPACING,LS_TOOL_ID,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:TYPE_CL,:NOMINAL_SPACING,:LS_TOOL_ID,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_SPACING" default="" type="Decimal"/>
                <param name="LS_TOOL_ID" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_LEAK_SURVEY
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,TYPE_CL=:TYPE_CL,NOMINAL_SPACING=:NOMINAL_SPACING,LS_TOOL_ID=:LS_TOOL_ID,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_LEAK_SURVEY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_LEAK_SURVEY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_LEAK_SURVEY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_LEAK_SURVEY_READING" schema="PODS" id="PODS_PI_LEAK_SURVEY_READING" comment="PODS.PI_LEAK_SURVEY_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_LEAK_SURVEY_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="DETECTED_PRODUCT_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_LEAK_SURV_REA',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_LEAK_SURVEY_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,MEASUREMENT,DETECTED_PRODUCT_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:MEASUREMENT,:DETECTED_PRODUCT_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MEASUREMENT" default="" type="Decimal"/>
                <param name="DETECTED_PRODUCT_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_LEAK_SURVEY_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,MEASUREMENT=:MEASUREMENT,DETECTED_PRODUCT_CL=:DETECTED_PRODUCT_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LEAK_SURVEY_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_LEAK_SURVEY_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_LEAK_SURVEY_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_LEAK_SURVEY_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_LONG_WELD" schema="PODS" id="PODS_PI_LONG_WELD" comment="PODS.PI_LONG_WELD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_LONG_WELD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="WELD_THICKNESS" default="" type="Decimal"/>
                <param name="WELD_CONDITION_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_LONG_WELD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_LONG_WELD(EVENT_ID,EVENT_GUID,INSPECTION_DATE,WELD_THICKNESS,WELD_CONDITION_GCL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:WELD_THICKNESS,:WELD_CONDITION_GCL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="WELD_THICKNESS" default="" type="Decimal"/>
                <param name="WELD_CONDITION_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_LONG_WELD
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,WELD_THICKNESS=:WELD_THICKNESS,WELD_CONDITION_GCL=:WELD_CONDITION_GCL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_LONG_WELD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_LONG_WELD
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_LONG_WELD/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_LONG_WELD/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_MARINE_GROWTH" schema="PODS" id="PODS_PI_MARINE_GROWTH" comment="PODS.PI_MARINE_GROWTH">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_MARINE_GROWTH t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PERCENT_COVERAGE_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_MARINE_GROWTH',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_MARINE_GROWTH(EVENT_ID,EVENT_GUID,INSPECTION_DATE,PERCENT_COVERAGE_CL,TYPE_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:PERCENT_COVERAGE_CL,:TYPE_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="PERCENT_COVERAGE_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_MARINE_GROWTH
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,PERCENT_COVERAGE_CL=:PERCENT_COVERAGE_CL,TYPE_CL=:TYPE_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MARINE_GROWTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_MARINE_GROWTH
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_MARINE_GROWTH/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_MARINE_GROWTH/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_MATERIAL_DEFECT" schema="PODS" id="PODS_PI_MATERIAL_DEFECT" comment="PODS.PI_MATERIAL_DEFECT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_MATERIAL_DEFECT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MATERIAL_DEFECT_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="SURFACE_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_MAT_DEFECT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_MATERIAL_DEFECT(EVENT_ID,EVENT_GUID,INSPECTION_DATE,MATERIAL_DEFECT_TYPE_GCL,ORIENTATION,AXIAL_LENGTH,CIRCUM_LENGTH,MAX_WIDTH,SURFACE_GCL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:MATERIAL_DEFECT_TYPE_GCL,:ORIENTATION,:AXIAL_LENGTH,:CIRCUM_LENGTH,:MAX_WIDTH,:SURFACE_GCL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MATERIAL_DEFECT_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="SURFACE_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_MATERIAL_DEFECT
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,MATERIAL_DEFECT_TYPE_GCL=:MATERIAL_DEFECT_TYPE_GCL,ORIENTATION=:ORIENTATION,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,MAX_WIDTH=:MAX_WIDTH,SURFACE_GCL=:SURFACE_GCL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MATERIAL_DEFECT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_MATERIAL_DEFECT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_MATERIAL_DEFECT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_MATERIAL_DEFECT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_MECHANICAL_DAMAGE" schema="PODS" id="PODS_PI_MECHANICAL_DAMAGE" comment="PODS.PI_MECHANICAL_DAMAGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_MECHANICAL_DAMAGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MECHANICAL_DEFECT_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="PEAK_TO_PEAK_DEPTH" default="" type="Decimal"/>
                <param name="WAVE_LENGTH" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_MECHAN_DAM',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_MECHANICAL_DAMAGE(EVENT_ID,EVENT_GUID,INSPECTION_DATE,MECHANICAL_DEFECT_TYPE_GCL,ORIENTATION,AXIAL_LENGTH,CIRCUM_LENGTH,WIDTH,PEAK_TO_PEAK_DEPTH,WAVE_LENGTH,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:MECHANICAL_DEFECT_TYPE_GCL,:ORIENTATION,:AXIAL_LENGTH,:CIRCUM_LENGTH,:WIDTH,:PEAK_TO_PEAK_DEPTH,:WAVE_LENGTH,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="MECHANICAL_DEFECT_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="PEAK_TO_PEAK_DEPTH" default="" type="Decimal"/>
                <param name="WAVE_LENGTH" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_MECHANICAL_DAMAGE
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,MECHANICAL_DEFECT_TYPE_GCL=:MECHANICAL_DEFECT_TYPE_GCL,ORIENTATION=:ORIENTATION,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,WIDTH=:WIDTH,PEAK_TO_PEAK_DEPTH=:PEAK_TO_PEAK_DEPTH,WAVE_LENGTH=:WAVE_LENGTH,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_MECHANICAL_DAMAGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_MECHANICAL_DAMAGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_MECHANICAL_DAMAGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_MECHANICAL_DAMAGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_METAL_LOSS" schema="PODS" id="PODS_PI_METAL_LOSS" comment="PODS.PI_METAL_LOSS">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_METAL_LOSS t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_GCL" default="UNKNOWN" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="FAILURE_PRESSURE" default="" type="Decimal"/>
                <param name="FAILURE_ALGORITHM_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_METAL_LOSS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_METAL_LOSS(EVENT_ID,EVENT_GUID,INSPECTION_DATE,ORIENTATION,TYPE_CL,SURFACE_GCL,AXIAL_LENGTH,CIRCUM_LENGTH,MAX_WIDTH,MAX_DEPTH,FAILURE_PRESSURE,FAILURE_ALGORITHM_GCL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:ORIENTATION,:TYPE_CL,:SURFACE_GCL,:AXIAL_LENGTH,:CIRCUM_LENGTH,:MAX_WIDTH,:MAX_DEPTH,:FAILURE_PRESSURE,:FAILURE_ALGORITHM_GCL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ORIENTATION" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_GCL" default="UNKNOWN" type="String"/>
                <param name="AXIAL_LENGTH" default="" type="Decimal"/>
                <param name="CIRCUM_LENGTH" default="" type="Decimal"/>
                <param name="MAX_WIDTH" default="" type="Decimal"/>
                <param name="MAX_DEPTH" default="" type="Decimal"/>
                <param name="FAILURE_PRESSURE" default="" type="Decimal"/>
                <param name="FAILURE_ALGORITHM_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_METAL_LOSS
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,ORIENTATION=:ORIENTATION,TYPE_CL=:TYPE_CL,SURFACE_GCL=:SURFACE_GCL,AXIAL_LENGTH=:AXIAL_LENGTH,CIRCUM_LENGTH=:CIRCUM_LENGTH,MAX_WIDTH=:MAX_WIDTH,MAX_DEPTH=:MAX_DEPTH,FAILURE_PRESSURE=:FAILURE_PRESSURE,FAILURE_ALGORITHM_GCL=:FAILURE_ALGORITHM_GCL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;


                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_METAL_LOSS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_METAL_LOSS
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_METAL_LOSS/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_METAL_LOSS/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_BEND" schema="PODS" id="PODS_PIPE_BEND" comment="PODS.PIPE_BEND">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIPE_BEND t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TECHNIQUE_CL" default="UNKNOWN" type="String"/>
                <param name="BEND_RADIUS" default="" type="Decimal"/>
                <param name="HORIZ_ANGLE" default="" type="Decimal"/>
                <param name="VERT_ANGLE" default="" type="Decimal"/>
                <param name="FABRICATOR_NAME_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIPE_BEND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIPE_BEND(EVENT_ID,EVENT_GUID,TYPE_CL,TECHNIQUE_CL,BEND_RADIUS,HORIZ_ANGLE,VERT_ANGLE,FABRICATOR_NAME_CL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:TECHNIQUE_CL,:BEND_RADIUS,:HORIZ_ANGLE,:VERT_ANGLE,:FABRICATOR_NAME_CL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TECHNIQUE_CL" default="UNKNOWN" type="String"/>
                <param name="BEND_RADIUS" default="" type="Decimal"/>
                <param name="HORIZ_ANGLE" default="" type="Decimal"/>
                <param name="VERT_ANGLE" default="" type="Decimal"/>
                <param name="FABRICATOR_NAME_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID

                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_BEND
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,TECHNIQUE_CL=:TECHNIQUE_CL,BEND_RADIUS=:BEND_RADIUS,HORIZ_ANGLE=:HORIZ_ANGLE,VERT_ANGLE=:VERT_ANGLE,FABRICATOR_NAME_CL=:FABRICATOR_NAME_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_BEND'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIPE_BEND
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_BEND/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_BEND/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_JOIN" schema="PODS" id="PODS_PIPE_JOIN" comment="PODS.PIPE_JOIN">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIPE_JOIN t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="JOIN_IDENTIFIER" default="" type="String"/>
                <param name="IDENTIFIER_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIPE_JOIN',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIPE_JOIN(EVENT_ID,EVENT_GUID,TYPE_CL,JOIN_IDENTIFIER,IDENTIFIER_TYPE_CL,MATERIAL_CL,SPECIFICATION_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:JOIN_IDENTIFIER,:IDENTIFIER_TYPE_CL,:MATERIAL_CL,:SPECIFICATION_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="JOIN_IDENTIFIER" default="" type="String"/>
                <param name="IDENTIFIER_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_JOIN
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,JOIN_IDENTIFIER=:JOIN_IDENTIFIER,IDENTIFIER_TYPE_CL=:IDENTIFIER_TYPE_CL,MATERIAL_CL=:MATERIAL_CL,SPECIFICATION_CL=:SPECIFICATION_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_JOIN'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIPE_JOIN
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_JOIN/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_JOIN/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_LENGTH" schema="PODS" id="PODS_PIPE_LENGTH" comment="PODS.PIPE_LENGTH">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIPE_LENGTH t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LENGTH_IDENTIFIER" default="" type="String"/>
                <param name="HEAT_NUMBER" default="" type="String"/>
                <param name="COIL_NUMBER" default="" type="String"/>
                <param name="END_TREATMENT_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIPE_LENGTH',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIPE_LENGTH(EVENT_ID,EVENT_GUID,LENGTH_IDENTIFIER,HEAT_NUMBER,COIL_NUMBER,END_TREATMENT_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:LENGTH_IDENTIFIER,:HEAT_NUMBER,:COIL_NUMBER,:END_TREATMENT_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LENGTH_IDENTIFIER" default="" type="String"/>
                <param name="HEAT_NUMBER" default="" type="String"/>
                <param name="COIL_NUMBER" default="" type="String"/>
                <param name="END_TREATMENT_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_LENGTH
                    SET EVENT_GUID=:EVENT_GUID,LENGTH_IDENTIFIER=:LENGTH_IDENTIFIER,HEAT_NUMBER=:HEAT_NUMBER,COIL_NUMBER=:COIL_NUMBER,END_TREATMENT_CL=:END_TREATMENT_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_LENGTH'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIPE_LENGTH
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_LENGTH/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_LENGTH/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_OPERATING_HISTORY" schema="PODS" id="PODS_PIPE_OPERATING_HISTORY" comment="PODS.PIPE_OPERATING_HISTORY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIPE_OPERATING_HISTORY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MIN_OPERATING_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_OPERATING_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_PERCENT_PRESSURE" default="" type="Decimal"/>
                <param name="MIN_OPERATING_TEMP" default="" type="Decimal"/>
                <param name="MAX_OPERATING_TEMP" default="" type="Decimal"/>
                <param name="H2S_PPM" default="" type="Decimal"/>
                <param name="MIN_VOL_FLOW_RATE" default="" type="Decimal"/>
                <param name="MAX_VOL_FLOW_RATE" default="" type="Decimal"/>
                <param name="CONTAMINANTS_PRESENT_LF" default="" type="String"/>
                <param name="CONTAMINANT_MSDS_LF" default="" type="String"/>
                <param name="DRAG_REDUCER_USED_LF" default="" type="String"/>
                <param name="DRAG_REDUCER_LAST_DATE" default="" type="DateTime"/>
                <param name="CORROSION_INHIBITOR_USED_LF" default="" type="String"/>
                <param name="CORROSION_INHIBITOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CORROSION_INHIBITOR_LAST_DATE" default="" type="DateTime"/>
                <param name="INTERNAL_CLEANING_PROGRAM_LF" default="" type="String"/>
                <param name="CLEANING_FREQUENCY_CL" default="UNKNOWN" type="String"/>
                <param name="SUSPECTED_FES_LF" default="" type="String"/>
                <param name="VERIFIED_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIPE_OPER_HIST',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIPE_OPERATING_HISTORY(EVENT_ID,EVENT_GUID,MIN_OPERATING_PRESSURE,MAX_OPERATING_PRESSURE,MAX_PERCENT_PRESSURE,MIN_OPERATING_TEMP,MAX_OPERATING_TEMP,H2S_PPM,MIN_VOL_FLOW_RATE,MAX_VOL_FLOW_RATE,CONTAMINANTS_PRESENT_LF,CONTAMINANT_MSDS_LF,DRAG_REDUCER_USED_LF,DRAG_REDUCER_LAST_DATE,CORROSION_INHIBITOR_USED_LF,CORROSION_INHIBITOR_TYPE_CL,CORROSION_INHIBITOR_LAST_DATE,INTERNAL_CLEANING_PROGRAM_LF,CLEANING_FREQUENCY_CL,SUSPECTED_FES_LF,VERIFIED_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MIN_OPERATING_PRESSURE,:MAX_OPERATING_PRESSURE,:MAX_PERCENT_PRESSURE,:MIN_OPERATING_TEMP,:MAX_OPERATING_TEMP,:H2S_PPM,:MIN_VOL_FLOW_RATE,:MAX_VOL_FLOW_RATE,:CONTAMINANTS_PRESENT_LF,:CONTAMINANT_MSDS_LF,:DRAG_REDUCER_USED_LF,:DRAG_REDUCER_LAST_DATE,:CORROSION_INHIBITOR_USED_LF,:CORROSION_INHIBITOR_TYPE_CL,:CORROSION_INHIBITOR_LAST_DATE,:INTERNAL_CLEANING_PROGRAM_LF,:CLEANING_FREQUENCY_CL,:SUSPECTED_FES_LF,:VERIFIED_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MIN_OPERATING_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_OPERATING_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_PERCENT_PRESSURE" default="" type="Decimal"/>
                <param name="MIN_OPERATING_TEMP" default="" type="Decimal"/>
                <param name="MAX_OPERATING_TEMP" default="" type="Decimal"/>
                <param name="H2S_PPM" default="" type="Decimal"/>
                <param name="MIN_VOL_FLOW_RATE" default="" type="Decimal"/>
                <param name="MAX_VOL_FLOW_RATE" default="" type="Decimal"/>
                <param name="CONTAMINANTS_PRESENT_LF" default="" type="String"/>
                <param name="CONTAMINANT_MSDS_LF" default="" type="String"/>
                <param name="DRAG_REDUCER_USED_LF" default="" type="String"/>
                <param name="DRAG_REDUCER_LAST_DATE" default="" type="DateTime"/>
                <param name="CORROSION_INHIBITOR_USED_LF" default="" type="String"/>
                <param name="CORROSION_INHIBITOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CORROSION_INHIBITOR_LAST_DATE" default="" type="DateTime"/>
                <param name="INTERNAL_CLEANING_PROGRAM_LF" default="" type="String"/>
                <param name="CLEANING_FREQUENCY_CL" default="UNKNOWN" type="String"/>
                <param name="SUSPECTED_FES_LF" default="" type="String"/>
                <param name="VERIFIED_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_OPERATING_HISTORY
                    SET EVENT_GUID=:EVENT_GUID,MIN_OPERATING_PRESSURE=:MIN_OPERATING_PRESSURE,MAX_OPERATING_PRESSURE=:MAX_OPERATING_PRESSURE,MAX_PERCENT_PRESSURE=:MAX_PERCENT_PRESSURE,MIN_OPERATING_TEMP=:MIN_OPERATING_TEMP,MAX_OPERATING_TEMP=:MAX_OPERATING_TEMP,H2S_PPM=:H2S_PPM,MIN_VOL_FLOW_RATE=:MIN_VOL_FLOW_RATE,MAX_VOL_FLOW_RATE=:MAX_VOL_FLOW_RATE,CONTAMINANTS_PRESENT_LF=:CONTAMINANTS_PRESENT_LF,CONTAMINANT_MSDS_LF=:CONTAMINANT_MSDS_LF,DRAG_REDUCER_USED_LF=:DRAG_REDUCER_USED_LF,DRAG_REDUCER_LAST_DATE=:DRAG_REDUCER_LAST_DATE,CORROSION_INHIBITOR_USED_LF=:CORROSION_INHIBITOR_USED_LF,CORROSION_INHIBITOR_TYPE_CL=:CORROSION_INHIBITOR_TYPE_CL,CORROSION_INHIBITOR_LAST_DATE=:CORROSION_INHIBITOR_LAST_DATE,INTERNAL_CLEANING_PROGRAM_LF=:INTERNAL_CLEANING_PROGRAM_LF,CLEANING_FREQUENCY_CL=:CLEANING_FREQUENCY_CL,SUSPECTED_FES_LF=:SUSPECTED_FES_LF,VERIFIED_DATE=:VERIFIED_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_OPERATING_HISTORY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIPE_OPERATING_HISTORY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_OPERATING_HISTORY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_OPERATING_HISTORY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_SEGMENT" schema="PODS" id="PODS_PIPE_SEGMENT" comment="PODS.PIPE_SEGMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PIPE_SEGMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="PIPE_GRADE_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PIPE_SEGMENT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PIPE_SEGMENT(EVENT_ID,EVENT_GUID,MANUFACTURER_CL,DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE,MATERIAL_CL,PIPE_SPECIFICATION_GCL,PIPE_GRADE_GCL,SMYS_GCL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MANUFACTURER_CL,:DATE_MANUFACTURED,:PIPE_MILL_LOCATION_GCL,:MILL_TEST_PRESSURE,:MATERIAL_CL,:PIPE_SPECIFICATION_GCL,:PIPE_GRADE_GCL,:SMYS_GCL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:PIPE_LONG_SEAM_GCL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="PIPE_GRADE_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SEGMENT
                    SET EVENT_GUID=:EVENT_GUID,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL=:PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,PIPE_SPECIFICATION_GCL=:PIPE_SPECIFICATION_GCL,PIPE_GRADE_GCL=:PIPE_GRADE_GCL,SMYS_GCL=:SMYS_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PIPE_SEGMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_SEGMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_SEGMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_PIPE_CONDITION" schema="PODS" id="PODS_PI_PIPE_CONDITION" comment="PODS.PI_PIPE_CONDITION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_PIPE_CONDITION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SITE_ID" default="0" type="Decimal"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ACTUAL_DIAMETER" default="0" type="Decimal"/>
                <param name="ACTUAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="EXTERNAL_PIPE_CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="INTERNAL_PIPE_CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_PIPE_COND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_PIPE_CONDITION(EVENT_ID,EVENT_GUID,SITE_ID,INSPECTION_DATE,ACTUAL_DIAMETER,ACTUAL_WALL_THICKNESS,EXTERNAL_PIPE_CONDITION_CL,INTERNAL_PIPE_CONDITION_CL,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SITE_ID,:INSPECTION_DATE,:ACTUAL_DIAMETER,:ACTUAL_WALL_THICKNESS,:EXTERNAL_PIPE_CONDITION_CL,:INTERNAL_PIPE_CONDITION_CL,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SITE_ID" default="0" type="Decimal"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ACTUAL_DIAMETER" default="0" type="Decimal"/>
                <param name="ACTUAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="EXTERNAL_PIPE_CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="INTERNAL_PIPE_CONDITION_CL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_PIPE_CONDITION
                    SET EVENT_GUID=:EVENT_GUID,SITE_ID=:SITE_ID,INSPECTION_DATE=:INSPECTION_DATE,ACTUAL_DIAMETER=:ACTUAL_DIAMETER,ACTUAL_WALL_THICKNESS=:ACTUAL_WALL_THICKNESS,EXTERNAL_PIPE_CONDITION_CL=:EXTERNAL_PIPE_CONDITION_CL,INTERNAL_PIPE_CONDITION_CL=:INTERNAL_PIPE_CONDITION_CL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPE_CONDITION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_PIPE_CONDITION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_PIPE_CONDITION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_PIPE_CONDITION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_PIPELINE_MOVEMENT" schema="PODS" id="PODS_PI_PIPELINE_MOVEMENT" comment="PODS.PI_PIPELINE_MOVEMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_PIPELINE_MOVEMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DISPLACEMENT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="MAXIMUM_DISPLACEMENT" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_PLINE_MOV',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_PIPELINE_MOVEMENT(EVENT_ID,EVENT_GUID,DISPLACEMENT_TYPE_CL,DIRECTION_GCL,MAXIMUM_DISPLACEMENT,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:DISPLACEMENT_TYPE_CL,:DIRECTION_GCL,:MAXIMUM_DISPLACEMENT,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DISPLACEMENT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="MAXIMUM_DISPLACEMENT" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_PIPELINE_MOVEMENT
                    SET EVENT_GUID=:EVENT_GUID,DISPLACEMENT_TYPE_CL=:DISPLACEMENT_TYPE_CL,DIRECTION_GCL=:DIRECTION_GCL,MAXIMUM_DISPLACEMENT=:MAXIMUM_DISPLACEMENT,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_PIPELINE_MOVEMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_PIPELINE_MOVEMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_PIPELINE_MOVEMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_PIPELINE_MOVEMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_RECTIFIER_READING" schema="PODS" id="PODS_PI_RECTIFIER_READING" comment="PODS.PI_RECTIFIER_READING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_RECTIFIER_READING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_RECTIFIER_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_RECTIFIER_EVENT_GUID" default="" type="String"/>
                <param name="AC_VOLTAGE_CL" default="UNKNOWN" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_RCTF_READ',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_RECTIFIER_READING(EVENT_ID,EVENT_GUID,INSPECTION_DATE,DESCRIPTION,POTENTIAL_READING,CURRENT_READING,RESISTANCE_READING,PI_CP_EVENT_ID,PI_CP_EVENT_GUID,REF_RECTIFIER_EVENT_ID,REF_RECTIFIER_EVENT_GUID,AC_VOLTAGE_CL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:DESCRIPTION,:POTENTIAL_READING,:CURRENT_READING,:RESISTANCE_READING,:PI_CP_EVENT_ID,:PI_CP_EVENT_GUID,:REF_RECTIFIER_EVENT_ID,:REF_RECTIFIER_EVENT_GUID,:AC_VOLTAGE_CL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="POTENTIAL_READING" default="" type="Decimal"/>
                <param name="CURRENT_READING" default="" type="Decimal"/>
                <param name="RESISTANCE_READING" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_CP_EVENT_GUID" default="" type="String"/>
                <param name="REF_RECTIFIER_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_RECTIFIER_EVENT_GUID" default="" type="String"/>
                <param name="AC_VOLTAGE_CL" default="UNKNOWN" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_RECTIFIER_READING
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,DESCRIPTION=:DESCRIPTION,POTENTIAL_READING=:POTENTIAL_READING,CURRENT_READING=:CURRENT_READING,RESISTANCE_READING=:RESISTANCE_READING,PI_CP_EVENT_ID=:PI_CP_EVENT_ID,PI_CP_EVENT_GUID=:PI_CP_EVENT_GUID,REF_RECTIFIER_EVENT_ID=:REF_RECTIFIER_EVENT_ID,REF_RECTIFIER_EVENT_GUID=:REF_RECTIFIER_EVENT_GUID,AC_VOLTAGE_CL=:AC_VOLTAGE_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RECTIFIER_READING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_RECTIFIER_READING
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_RECTIFIER_READING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_RECTIFIER_READING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_RELIEF_VALVE" schema="PODS" id="PODS_PI_RELIEF_VALVE" comment="PODS.PI_RELIEF_VALVE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_RELIEF_VALVE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="RELIEF_VALVE_ID" default="" type="String"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="SERVICE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CONTROLS_TESTED_LF" default="" type="String"/>
                <param name="VALVES_CLEANED_LF" default="" type="String"/>
                <param name="VALVE_REPAIRED_LF" default="" type="String"/>
                <param name="CONTROLS_CLEANED_LF" default="" type="String"/>
                <param name="CONTROLS_REPAIRED_LF" default="" type="String"/>
                <param name="INITIAL_PRESSURE_SETTING" default="" type="Decimal"/>
                <param name="FINAL_PRESSURE_SETTING" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_RELIEF_VALVE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_RELIEF_VALVE(EVENT_ID,EVENT_GUID,INSPECTION_DATE,RELIEF_VALVE_ID,PERFORMED_BY,SERVICE_TYPE_CL,CONTROLS_TESTED_LF,VALVES_CLEANED_LF,VALVE_REPAIRED_LF,CONTROLS_CLEANED_LF,CONTROLS_REPAIRED_LF,INITIAL_PRESSURE_SETTING,FINAL_PRESSURE_SETTING,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:RELIEF_VALVE_ID,:PERFORMED_BY,:SERVICE_TYPE_CL,:CONTROLS_TESTED_LF,:VALVES_CLEANED_LF,:VALVE_REPAIRED_LF,:CONTROLS_CLEANED_LF,:CONTROLS_REPAIRED_LF,:INITIAL_PRESSURE_SETTING,:FINAL_PRESSURE_SETTING,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="RELIEF_VALVE_ID" default="" type="String"/>
                <param name="PERFORMED_BY" default="" type="String"/>
                <param name="SERVICE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="CONTROLS_TESTED_LF" default="" type="String"/>
                <param name="VALVES_CLEANED_LF" default="" type="String"/>
                <param name="VALVE_REPAIRED_LF" default="" type="String"/>
                <param name="CONTROLS_CLEANED_LF" default="" type="String"/>
                <param name="CONTROLS_REPAIRED_LF" default="" type="String"/>
                <param name="INITIAL_PRESSURE_SETTING" default="" type="Decimal"/>
                <param name="FINAL_PRESSURE_SETTING" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_RELIEF_VALVE
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,RELIEF_VALVE_ID=:RELIEF_VALVE_ID,PERFORMED_BY=:PERFORMED_BY,SERVICE_TYPE_CL=:SERVICE_TYPE_CL,CONTROLS_TESTED_LF=:CONTROLS_TESTED_LF,VALVES_CLEANED_LF=:VALVES_CLEANED_LF,VALVE_REPAIRED_LF=:VALVE_REPAIRED_LF,CONTROLS_CLEANED_LF=:CONTROLS_CLEANED_LF,CONTROLS_REPAIRED_LF=:CONTROLS_REPAIRED_LF,INITIAL_PRESSURE_SETTING=:INITIAL_PRESSURE_SETTING,FINAL_PRESSURE_SETTING=:FINAL_PRESSURE_SETTING,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RELIEF_VALVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_RELIEF_VALVE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_RELIEF_VALVE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_RELIEF_VALVE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_RIGHT_OF_WAY" schema="PODS" id="PODS_PI_RIGHT_OF_WAY" comment="PODS.PI_RIGHT_OF_WAY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_RIGHT_OF_WAY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ACTION_REQUIRED_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_RIGHT_OF_WAY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_RIGHT_OF_WAY(EVENT_ID,EVENT_GUID,INSPECTION_DATE,ACTION_REQUIRED_LF,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:ACTION_REQUIRED_LF,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="ACTION_REQUIRED_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_RIGHT_OF_WAY
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,ACTION_REQUIRED_LF=:ACTION_REQUIRED_LF,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_RIGHT_OF_WAY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_SOIL" schema="PODS" id="PODS_PI_SOIL" comment="PODS.PI_SOIL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_SOIL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SOIL_PH" default="" type="Decimal"/>
                <param name="SOIL_TEMPERATURE" default="" type="Decimal"/>
                <param name="DEPOSITION_CL" default="UNKNOWN" type="String"/>
                <param name="TEXTURE_CL" default="UNKNOWN" type="String"/>
                <param name="COVER_THICKNESS" default="" type="Decimal"/>
                <param name="ORGANIC_DEPTH" default="" type="Decimal"/>
                <param name="GLEYING_DEPTH" default="" type="Decimal"/>
                <param name="MOTTLING_DEPTH" default="" type="Decimal"/>
                <param name="BEDROCK_DEPTH" default="" type="Decimal"/>
                <param name="CARBONATE_DEPTH" default="" type="Decimal"/>
                <param name="WATER_TABLE_DEPTH" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_SOIL',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_SOIL(EVENT_ID,EVENT_GUID,INSPECTION_DATE,SOIL_PH,SOIL_TEMPERATURE,DEPOSITION_CL,TEXTURE_CL,COVER_THICKNESS,ORGANIC_DEPTH,GLEYING_DEPTH,MOTTLING_DEPTH,BEDROCK_DEPTH,CARBONATE_DEPTH,WATER_TABLE_DEPTH,PI_EVENT_ID,PI_EVENT_GUID,TYPE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:SOIL_PH,:SOIL_TEMPERATURE,:DEPOSITION_CL,:TEXTURE_CL,:COVER_THICKNESS,:ORGANIC_DEPTH,:GLEYING_DEPTH,:MOTTLING_DEPTH,:BEDROCK_DEPTH,:CARBONATE_DEPTH,:WATER_TABLE_DEPTH,:PI_EVENT_ID,:PI_EVENT_GUID,:TYPE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SOIL_PH" default="" type="Decimal"/>
                <param name="SOIL_TEMPERATURE" default="" type="Decimal"/>
                <param name="DEPOSITION_CL" default="UNKNOWN" type="String"/>
                <param name="TEXTURE_CL" default="UNKNOWN" type="String"/>
                <param name="COVER_THICKNESS" default="" type="Decimal"/>
                <param name="ORGANIC_DEPTH" default="" type="Decimal"/>
                <param name="GLEYING_DEPTH" default="" type="Decimal"/>
                <param name="MOTTLING_DEPTH" default="" type="Decimal"/>
                <param name="BEDROCK_DEPTH" default="" type="Decimal"/>
                <param name="CARBONATE_DEPTH" default="" type="Decimal"/>
                <param name="WATER_TABLE_DEPTH" default="" type="Decimal"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_SOIL
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,SOIL_PH=:SOIL_PH,SOIL_TEMPERATURE=:SOIL_TEMPERATURE,DEPOSITION_CL=:DEPOSITION_CL,TEXTURE_CL=:TEXTURE_CL,COVER_THICKNESS=:COVER_THICKNESS,ORGANIC_DEPTH=:ORGANIC_DEPTH,GLEYING_DEPTH=:GLEYING_DEPTH,MOTTLING_DEPTH=:MOTTLING_DEPTH,BEDROCK_DEPTH=:BEDROCK_DEPTH,CARBONATE_DEPTH=:CARBONATE_DEPTH,WATER_TABLE_DEPTH=:WATER_TABLE_DEPTH,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SOIL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_SOIL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_SOIL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_SOIL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_SUBSEA_INSPECTION" schema="PODS" id="PODS_PI_SUBSEA_INSPECTION" comment="PODS.PI_SUBSEA_INSPECTION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_SUBSEA_INSPECTION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="UNIT_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="CONTRACTOR_NAME" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="SENSOR_USED_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_SUBS_INSP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_SUBSEA_INSPECTION(EVENT_ID,EVENT_GUID,INSPECTION_DATE,UNIT_NUMBER,MODEL,CONTRACTOR_NAME,INSPECTION_TYPE_GCL,PI_EVENT_ID,PI_EVENT_GUID,SENSOR_USED_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:UNIT_NUMBER,:MODEL,:CONTRACTOR_NAME,:INSPECTION_TYPE_GCL,:PI_EVENT_ID,:PI_EVENT_GUID,:SENSOR_USED_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="UNIT_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="CONTRACTOR_NAME" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="SENSOR_USED_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_SUBSEA_INSPECTION
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,UNIT_NUMBER=:UNIT_NUMBER,MODEL=:MODEL,CONTRACTOR_NAME=:CONTRACTOR_NAME,INSPECTION_TYPE_GCL=:INSPECTION_TYPE_GCL,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,SENSOR_USED_CL=:SENSOR_USED_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_SUBSEA_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_SUBSEA_INSPECTION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_SUBSEA_INSPECTION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_SUBSEA_INSPECTION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_TANK" schema="PODS" id="PODS_PI_TANK" comment="PODS.PI_TANK">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_TANK t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="OFFLINE_ID" default="" type="Decimal"/>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEXT_SCHEDULED_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_TANK',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_TANK(EVENT_ID,EVENT_GUID,OFFLINE_ID,OFFLINE_GUID,INSPECTION_TYPE_GCL,NEXT_SCHEDULED_DATE,DESCRIPTION,PI_EVENT_ID,PI_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:OFFLINE_ID,:OFFLINE_GUID,:INSPECTION_TYPE_GCL,:NEXT_SCHEDULED_DATE,:DESCRIPTION,:PI_EVENT_ID,:PI_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="OFFLINE_ID" default="" type="Decimal"/>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="INSPECTION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEXT_SCHEDULED_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_TANK
                    SET EVENT_GUID=:EVENT_GUID,OFFLINE_ID=:OFFLINE_ID,OFFLINE_GUID=:OFFLINE_GUID,INSPECTION_TYPE_GCL=:INSPECTION_TYPE_GCL,NEXT_SCHEDULED_DATE=:NEXT_SCHEDULED_DATE,DESCRIPTION=:DESCRIPTION,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_TANK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_TANK
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_TANK/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_TANK/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PI_WATER" schema="PODS" id="PODS_PI_WATER" comment="PODS.PI_WATER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PI_WATER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SAMPLE_NUMBER" default="" type="String"/>
                <param name="SAMPLE_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="PH" default="" type="Decimal"/>
                <param name="SO2" default="" type="Decimal"/>
                <param name="H2S" default="" type="Decimal"/>
                <param name="CO2" default="" type="Decimal"/>
                <param name="CARBONATE" default="" type="Decimal"/>
                <param name="BICARBONATE" default="" type="Decimal"/>
                <param name="NA" default="" type="Decimal"/>
                <param name="K" default="" type="Decimal"/>
                <param name="CA" default="" type="Decimal"/>
                <param name="MG" default="" type="Decimal"/>
                <param name="BACTERIA_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PI_WATER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PI_WATER(EVENT_ID,EVENT_GUID,INSPECTION_DATE,SAMPLE_NUMBER,SAMPLE_LOCATION_CL,PH,SO2,H2S,CO2,CARBONATE,BICARBONATE,NA,K,CA,MG,BACTERIA_LF,PI_EVENT_ID,PI_EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:INSPECTION_DATE,:SAMPLE_NUMBER,:SAMPLE_LOCATION_CL,:PH,:SO2,:H2S,:CO2,:CARBONATE,:BICARBONATE,:NA,:K,:CA,:MG,:BACTERIA_LF,:PI_EVENT_ID,:PI_EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="INSPECTION_DATE" default="" type="DateTime"/>
                <param name="SAMPLE_NUMBER" default="" type="String"/>
                <param name="SAMPLE_LOCATION_CL" default="UNKNOWN" type="String"/>
                <param name="PH" default="" type="Decimal"/>
                <param name="SO2" default="" type="Decimal"/>
                <param name="H2S" default="" type="Decimal"/>
                <param name="CO2" default="" type="Decimal"/>
                <param name="CARBONATE" default="" type="Decimal"/>
                <param name="BICARBONATE" default="" type="Decimal"/>
                <param name="NA" default="" type="Decimal"/>
                <param name="K" default="" type="Decimal"/>
                <param name="CA" default="" type="Decimal"/>
                <param name="MG" default="" type="Decimal"/>
                <param name="BACTERIA_LF" default="" type="String"/>
                <param name="PI_EVENT_ID" default="" type="Decimal"/>
                <param name="PI_EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PI_WATER
                    SET EVENT_GUID=:EVENT_GUID,INSPECTION_DATE=:INSPECTION_DATE,SAMPLE_NUMBER=:SAMPLE_NUMBER,SAMPLE_LOCATION_CL=:SAMPLE_LOCATION_CL,PH=:PH,SO2=:SO2,H2S=:H2S,CO2=:CO2,CARBONATE=:CARBONATE,BICARBONATE=:BICARBONATE,NA=:NA,K=:K,CA=:CA,MG=:MG,BACTERIA_LF=:BACTERIA_LF,PI_EVENT_ID=:PI_EVENT_ID,PI_EVENT_GUID=:PI_EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PI_WATER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PI_WATER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PI_WATER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PI_WATER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PRESSURE_CAP" schema="PODS" id="PODS_PRESSURE_CAP" comment="PODS.PRESSURE_CAP">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PRESSURE_CAP t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE_CAP_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PRESSURE_CAP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PRESSURE_CAP(EVENT_ID,EVENT_GUID,PRESSURE_CAP_ID,TYPE_CL,NOMINAL_DIAMETER_GCL,SPECIFICATION_CL,MATERIAL_CL,MANUFACTURER_CL,DATE_MANUFACTURED,SERIAL_NUMBER,PART_NUMBER,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:TYPE_CL,:NOMINAL_DIAMETER_GCL,:SPECIFICATION_CL,:MATERIAL_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SERIAL_NUMBER,:PART_NUMBER,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE_CAP_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PRESSURE_CAP
                    SET EVENT_GUID=:EVENT_GUID,PRESSURE_CAP_ID=:PRESSURE_CAP_ID,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,MATERIAL_CL=:MATERIAL_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_CAP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PRESSURE_CAP
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PRESSURE_CAP/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PRESSURE_CAP/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PRESSURE_MEASUREMENT" schema="PODS" id="PODS_PRESSURE_MEASUREMENT" comment="PODS.PRESSURE_MEASUREMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PRESSURE_MEASUREMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE" default="" type="Decimal"/>
                <param name="METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="MEASUREMENT_STATION_NAME" default="" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PRESS_MEAS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PRESSURE_MEASUREMENT(EVENT_ID,EVENT_GUID,PRESSURE,METHOD_CL,MEASUREMENT_STATION_NAME,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:PRESSURE,:METHOD_CL,:MEASUREMENT_STATION_NAME,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRESSURE" default="" type="Decimal"/>
                <param name="METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="MEASUREMENT_STATION_NAME" default="" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PRESSURE_MEASUREMENT
                    SET EVENT_GUID=:EVENT_GUID,PRESSURE=:PRESSURE,METHOD_CL=:METHOD_CL,MEASUREMENT_STATION_NAME=:MEASUREMENT_STATION_NAME,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRESSURE_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PRESSURE_MEASUREMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PRESSURE_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PRESSURE_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PRODUCT_RANGE" schema="PODS" id="PODS_PRODUCT_RANGE" comment="PODS.PRODUCT_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PRODUCT_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRODUCT_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PRODUCT_RANGE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PRODUCT_RANGE(EVENT_ID,EVENT_GUID,PRODUCT_TYPE_SCL,PRODUCT_SUBTYPE_SCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,REGEXP_REPLACE(:PRODUCT_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:PRODUCT_TYPE_SCL,'@.*'),'@',''),:PRODUCT_SUBTYPE_SCL),:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="PRODUCT_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PRODUCT_RANGE
                    SET EVENT_GUID=:EVENT_GUID,PRODUCT_TYPE_SCL=REGEXP_REPLACE(:PRODUCT_TYPE_SCL,'@.*',''),PRODUCT_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:PRODUCT_TYPE_SCL,'@.*'),'@',''),:PRODUCT_SUBTYPE_SCL),DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PRODUCT_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PRODUCT_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PRODUCT_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PRODUCT_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PROFILE" schema="PODS" id="PODS_PROFILE" comment="PODS.PROFILE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.PROFILE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ELEVATION" default="" type="Decimal"/>
                <param name="ELEVATION_OUOM" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ACTIVE_INDICATOR_LF" default="Y" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'PROFILE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.PROFILE(EVENT_ID,EVENT_GUID,TYPE_CL,ELEVATION,ELEVATION_OUOM,DESCRIPTION,SOURCE_GCL,ACTIVE_INDICATOR_LF,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:ELEVATION,:ELEVATION_OUOM,:DESCRIPTION,:SOURCE_GCL,:ACTIVE_INDICATOR_LF,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ELEVATION" default="" type="Decimal"/>
                <param name="ELEVATION_OUOM" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ACTIVE_INDICATOR_LF" default="Y" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PROFILE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,ELEVATION=:ELEVATION,ELEVATION_OUOM=:ELEVATION_OUOM,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,ACTIVE_INDICATOR_LF=:ACTIVE_INDICATOR_LF,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PROFILE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.PROFILE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PROFILE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PROFILE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="RECTIFIER" schema="PODS" id="PODS_RECTIFIER" comment="PODS.RECTIFIER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.RECTIFIER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RECTIFIER_ID" default="" type="String"/>
                <param name="AMP_RATING" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="VOLT_RATING" default="" type="String"/>
                <param name="MODEL_NUMBER" default="" type="String"/>
                <param name="SHUNT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="LIGHTNING_ARRESTOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="COOLING_SYSTEM_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DIODE_NUMBER" default="" type="String"/>
                <param name="STACK_SERIAL_NUMBER" default="" type="String"/>
                <param name="STACK_FUSE_SERIAL_NUMBER" default="" type="String"/>
                <param name="REF_RECT_ENCLOSURE_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_RECT_ENCLOSURE_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'RECTIFIER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.RECTIFIER(EVENT_ID,EVENT_GUID,RECTIFIER_ID,AMP_RATING,TYPE_CL,MANUFACTURER_CL,DESCRIPTION,VOLT_RATING,MODEL_NUMBER,SHUNT_TYPE_CL,LIGHTNING_ARRESTOR_TYPE_CL,COOLING_SYSTEM_CL,DATE_INSTALLED,DIODE_NUMBER,STACK_SERIAL_NUMBER,STACK_FUSE_SERIAL_NUMBER,REF_RECT_ENCLOSURE_EVENT_ID,REF_RECT_ENCLOSURE_EVENT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:RECTIFIER_ID,:AMP_RATING,:TYPE_CL,:MANUFACTURER_CL,:DESCRIPTION,:VOLT_RATING,:MODEL_NUMBER,:SHUNT_TYPE_CL,:LIGHTNING_ARRESTOR_TYPE_CL,:COOLING_SYSTEM_CL,:DATE_INSTALLED,:DIODE_NUMBER,:STACK_SERIAL_NUMBER,:STACK_FUSE_SERIAL_NUMBER,:REF_RECT_ENCLOSURE_EVENT_ID,:REF_RECT_ENCLOSURE_EVENT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RECTIFIER_ID" default="" type="String"/>
                <param name="AMP_RATING" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="VOLT_RATING" default="" type="String"/>
                <param name="MODEL_NUMBER" default="" type="String"/>
                <param name="SHUNT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="LIGHTNING_ARRESTOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="COOLING_SYSTEM_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DIODE_NUMBER" default="" type="String"/>
                <param name="STACK_SERIAL_NUMBER" default="" type="String"/>
                <param name="STACK_FUSE_SERIAL_NUMBER" default="" type="String"/>
                <param name="REF_RECT_ENCLOSURE_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_RECT_ENCLOSURE_EVENT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.RECTIFIER
                    SET EVENT_GUID=:EVENT_GUID,RECTIFIER_ID=:RECTIFIER_ID,AMP_RATING=:AMP_RATING,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DESCRIPTION=:DESCRIPTION,VOLT_RATING=:VOLT_RATING,MODEL_NUMBER=:MODEL_NUMBER,SHUNT_TYPE_CL=:SHUNT_TYPE_CL,LIGHTNING_ARRESTOR_TYPE_CL=:LIGHTNING_ARRESTOR_TYPE_CL,COOLING_SYSTEM_CL=:COOLING_SYSTEM_CL,DATE_INSTALLED=:DATE_INSTALLED,DIODE_NUMBER=:DIODE_NUMBER,STACK_SERIAL_NUMBER=:STACK_SERIAL_NUMBER,STACK_FUSE_SERIAL_NUMBER=:STACK_FUSE_SERIAL_NUMBER,REF_RECT_ENCLOSURE_EVENT_ID=:REF_RECT_ENCLOSURE_EVENT_ID,REF_RECT_ENCLOSURE_EVENT_GUID=:REF_RECT_ENCLOSURE_EVENT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.PI_RECTIFIER_READING
                    SET REF_RECTIFIER_EVENT_ID = NULL
                    WHERE REF_RECTIFIER_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.RECTIFIER
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_RECTIFIER/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_RECTIFIER/'||CAST(:ID AS VARCHAR(30));
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="RECTIFIER_ENCLOSURE" schema="PODS" id="PODS_RECTIFIER_ENCLOSURE" comment="PODS.RECTIFIER_ENCLOSURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.RECTIFIER_ENCLOSURE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RECTIFIER_ENCLOSURE_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="POWER_BILLING_SOURCE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MODEL_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="NEG_CABLE_INSULATION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEG_CABLE_GAUGE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEG_CABLE_INSULATION_COLOR_GCL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'RCTF_ENCL',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.RECTIFIER_ENCLOSURE(EVENT_ID,EVENT_GUID,RECTIFIER_ENCLOSURE_ID,TYPE_CL,MANUFACTURER_CL,POWER_BILLING_SOURCE_CL,DESCRIPTION,NAME,MODEL_NUMBER,DATE_INSTALLED,NEG_CABLE_INSULATION_TYPE_GCL,NEG_CABLE_GAUGE_GCL,NEG_CABLE_INSULATION_COLOR_GCL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:TYPE_CL,:MANUFACTURER_CL,:POWER_BILLING_SOURCE_CL,:DESCRIPTION,:NAME,:MODEL_NUMBER,:DATE_INSTALLED,:NEG_CABLE_INSULATION_TYPE_GCL,:NEG_CABLE_GAUGE_GCL,:NEG_CABLE_INSULATION_COLOR_GCL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="RECTIFIER_ENCLOSURE_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="POWER_BILLING_SOURCE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MODEL_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="NEG_CABLE_INSULATION_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEG_CABLE_GAUGE_GCL" default="UNKNOWN" type="String"/>
                <param name="NEG_CABLE_INSULATION_COLOR_GCL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.RECTIFIER_ENCLOSURE
                    SET EVENT_GUID=:EVENT_GUID,RECTIFIER_ENCLOSURE_ID=:RECTIFIER_ENCLOSURE_ID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,POWER_BILLING_SOURCE_CL=:POWER_BILLING_SOURCE_CL,DESCRIPTION=:DESCRIPTION,NAME=:NAME,MODEL_NUMBER=:MODEL_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,NEG_CABLE_INSULATION_TYPE_GCL=:NEG_CABLE_INSULATION_TYPE_GCL,NEG_CABLE_GAUGE_GCL=:NEG_CABLE_GAUGE_GCL,NEG_CABLE_INSULATION_COLOR_GCL=:NEG_CABLE_INSULATION_COLOR_GCL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RECTIFIER_ENCLOSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.RECTIFIER
                    SET REF_RECT_ENCLOSURE_EVENT_ID = NULL
                    WHERE REF_RECT_ENCLOSURE_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.RECTIFIER_ENCLOSURE
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_RECTIFIER_ENCLOSURE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_RECTIFIER_ENCLOSURE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="REDUCER" schema="PODS" id="PODS_REDUCER" comment="PODS.REDUCER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.REDUCER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_IN_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICK_OUT_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'REDUCER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.REDUCER(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_IN_GCL,NOMINAL_WALL_THICK_OUT_GCL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,MATERIAL_CL,DATE_MANUFACTURED,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:NOMINAL_WALL_THICKNESS_IN_GCL,:NOMINAL_WALL_THICK_OUT_GCL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:MATERIAL_CL,:DATE_MANUFACTURED,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_IN_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICK_OUT_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.REDUCER
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_WALL_THICKNESS_IN_GCL=:NOMINAL_WALL_THICKNESS_IN_GCL,NOMINAL_WALL_THICK_OUT_GCL=:NOMINAL_WALL_THICK_OUT_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REDUCER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.REDUCER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_REDUCER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_REDUCER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="REPAIR_CLAMP" schema="PODS" id="PODS_REPAIR_CLAMP" comment="PODS.REPAIR_CLAMP">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.REPAIR_CLAMP t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="REPAIR_CLAMP_ID" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="REMOTE_ACTIVATOR_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_EXT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_INT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'REPAIR_CLAMP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.REPAIR_CLAMP(EVENT_ID,EVENT_GUID,REPAIR_CLAMP_ID,PART_NUMBER,SERIAL_NUMBER,TYPE_CL,REMOTE_ACTIVATOR_CL,MATERIAL_CL,MANUFACTURER_CL,DATE_MANUFACTURED,DATE_INSTALLED,MILL_TEST_PRESSURE,NOMINAL_EXT_PRESSURE_RATING,NOMINAL_INT_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:PART_NUMBER,:SERIAL_NUMBER,:TYPE_CL,:REMOTE_ACTIVATOR_CL,:MATERIAL_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:DATE_INSTALLED,:MILL_TEST_PRESSURE,:NOMINAL_EXT_PRESSURE_RATING,:NOMINAL_INT_PRESSURE_RATING,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="REPAIR_CLAMP_ID" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="REMOTE_ACTIVATOR_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_EXT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_INT_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.REPAIR_CLAMP
                    SET EVENT_GUID=:EVENT_GUID,REPAIR_CLAMP_ID=:REPAIR_CLAMP_ID,PART_NUMBER=:PART_NUMBER,SERIAL_NUMBER=:SERIAL_NUMBER,TYPE_CL=:TYPE_CL,REMOTE_ACTIVATOR_CL=:REMOTE_ACTIVATOR_CL,MATERIAL_CL=:MATERIAL_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,NOMINAL_EXT_PRESSURE_RATING=:NOMINAL_EXT_PRESSURE_RATING,NOMINAL_INT_PRESSURE_RATING=:NOMINAL_INT_PRESSURE_RATING,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_REPAIR_CLAMP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.REPAIR_CLAMP
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_REPAIR_CLAMP/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_REPAIR_CLAMP/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="RIVER_WEIGHT" schema="PODS" id="PODS_RIVER_WEIGHT" comment="PODS.RIVER_WEIGHT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.RIVER_WEIGHT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="QUANTITY" default="" type="Decimal"/>
                <param name="WEIGHT_EACH" default="" type="Decimal"/>
                <param name="SPACING_DISTANCE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'RIVER_WEIGHT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.RIVER_WEIGHT(EVENT_ID,EVENT_GUID,TYPE_CL,QUANTITY,WEIGHT_EACH,SPACING_DISTANCE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:QUANTITY,:WEIGHT_EACH,:SPACING_DISTANCE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="QUANTITY" default="" type="Decimal"/>
                <param name="WEIGHT_EACH" default="" type="Decimal"/>
                <param name="SPACING_DISTANCE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.RIVER_WEIGHT
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,QUANTITY=:QUANTITY,WEIGHT_EACH=:WEIGHT_EACH,SPACING_DISTANCE=:SPACING_DISTANCE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIVER_WEIGHT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.RIVER_WEIGHT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_RIVER_WEIGHT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_RIVER_WEIGHT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ROUTING_NOTE" schema="PODS" id="PODS_ROUTING_NOTE" comment="PODS.ROUTING_NOTE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ROUTING_NOTE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="ANG_DEGREES" default="" type="Decimal"/>
                <param name="ANG_MINUTES" default="" type="Decimal"/>
                <param name="ANG_SECONDS" default="" type="Decimal"/>
                <param name="BRG_NORTHING" default="" type="String"/>
                <param name="BRG_DEGREES" default="" type="Decimal"/>
                <param name="BRG_MINUTES" default="" type="Decimal"/>
                <param name="BRG_SECONDS" default="" type="Decimal"/>
                <param name="BRG_EASTING" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ROUTING_NOTE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ROUTING_NOTE(EVENT_ID,EVENT_GUID,TYPE_CL,SOURCE_NUMBER,ANG_DEGREES,ANG_MINUTES,ANG_SECONDS,BRG_NORTHING,BRG_DEGREES,BRG_MINUTES,BRG_SECONDS,BRG_EASTING,SCALED_GCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SOURCE_NUMBER,:ANG_DEGREES,:ANG_MINUTES,:ANG_SECONDS,:BRG_NORTHING,:BRG_DEGREES,:BRG_MINUTES,:BRG_SECONDS,:BRG_EASTING,:SCALED_GCL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="ANG_DEGREES" default="" type="Decimal"/>
                <param name="ANG_MINUTES" default="" type="Decimal"/>
                <param name="ANG_SECONDS" default="" type="Decimal"/>
                <param name="BRG_NORTHING" default="" type="String"/>
                <param name="BRG_DEGREES" default="" type="Decimal"/>
                <param name="BRG_MINUTES" default="" type="Decimal"/>
                <param name="BRG_SECONDS" default="" type="Decimal"/>
                <param name="BRG_EASTING" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ROUTING_NOTE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SOURCE_NUMBER=:SOURCE_NUMBER,ANG_DEGREES=:ANG_DEGREES,ANG_MINUTES=:ANG_MINUTES,ANG_SECONDS=:ANG_SECONDS,BRG_NORTHING=:BRG_NORTHING,BRG_DEGREES=:BRG_DEGREES,BRG_MINUTES=:BRG_MINUTES,BRG_SECONDS=:BRG_SECONDS,BRG_EASTING=:BRG_EASTING,SCALED_GCL=:SCALED_GCL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTING_NOTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.ROUTING_NOTE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ROUTING_NOTE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ROUTING_NOTE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SCC_PIPE_SUSCEPTIBILITY" schema="PODS" id="PODS_SCC_PIPE_SUSCEPTIBILITY" comment="PODS.SCC_PIPE_SUSCEPTIBILITY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SCC_PIPE_SUSCEPTIBILITY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SUSCEPTIBILITY_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SCC_PIPE_SUS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SCC_PIPE_SUSCEPTIBILITY(EVENT_ID,EVENT_GUID,SUSCEPTIBILITY_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SUSCEPTIBILITY_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SUSCEPTIBILITY_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SCC_PIPE_SUSCEPTIBILITY
                    SET EVENT_GUID=:EVENT_GUID,SUSCEPTIBILITY_CL=:SUSCEPTIBILITY_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_PIPE_SUSCEPTIBILITY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SCC_PIPE_SUSCEPTIBILITY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SCC_PIPE_SUSCEPTIBILITY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SCC_PIPE_SUSCEPTIBILITY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SCC_SOIL_POTENTIAL" schema="PODS" id="PODS_SCC_SOIL_POTENTIAL" comment="PODS.SCC_SOIL_POTENTIAL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SCC_SOIL_POTENTIAL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="POTENTIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SCC_SOIL_PTNT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SCC_SOIL_POTENTIAL(EVENT_ID,EVENT_GUID,POTENTIAL_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:POTENTIAL_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="POTENTIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SCC_SOIL_POTENTIAL
                    SET EVENT_GUID=:EVENT_GUID,POTENTIAL_CL=:POTENTIAL_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SCC_SOIL_POTENTIAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SCC_SOIL_POTENTIAL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SCC_SOIL_POTENTIAL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SCC_SOIL_POTENTIAL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SHEET_NOTE" schema="PODS" id="PODS_SHEET_NOTE" comment="PODS.SHEET_NOTE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SHEET_NOTE t WHERE TYPE_CL IN ('C1400057','C1400058')) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SHEET_NOTE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SHEET_NOTE(EVENT_ID,EVENT_GUID,TYPE_CL,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,INTERSECTION_ANGLE,WIDTH,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:INTERSECTION_ANGLE,:WIDTH,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SHEET_NOTE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,WIDTH=:WIDTH,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SHEET_NOTE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SLEEVE" schema="PODS" id="PODS_SLEEVE" comment="PODS.SLEEVE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SLEEVE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SLEEVE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SLEEVE(EVENT_ID,EVENT_GUID,TYPE_CL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,MANUFACTURER_CL,DATE_MANUFACTURED,SPECIFICATION_CL,MATERIAL_CL,MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SPECIFICATION_CL,:MATERIAL_CL,:MILL_TEST_PRESSURE,:NOMINAL_PRESSURE_RATING,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SLEEVE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SPECIFICATION_CL=:SPECIFICATION_CL,MATERIAL_CL=:MATERIAL_CL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SLEEVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SLEEVE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SLEEVE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SLEEVE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SRV_DISTRICT_BOUNDARY" schema="PODS" id="PODS_SRV_DISTRICT_BOUNDARY" comment="PODS.SRV_DISTRICT_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SRV_DISTRICT_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="SRV_DISTRICT_ID" default="" type="Decimal"/>
                <param name="SRV_DISTRICT_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SRV_DISTR_BND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SRV_DISTRICT_BOUNDARY(EVENT_ID,SRV_DISTRICT_ID,SRV_DISTRICT_GUID,EVENT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:SRV_DISTRICT_ID,:SRV_DISTRICT_GUID,:EVENT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="SRV_DISTRICT_ID" default="" type="Decimal"/>
                <param name="SRV_DISTRICT_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SRV_DISTRICT_BOUNDARY
                    SET SRV_DISTRICT_ID=:SRV_DISTRICT_ID,SRV_DISTRICT_GUID=:SRV_DISTRICT_GUID,EVENT_GUID=:EVENT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SRV_DISTRICT_BOUNDARY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SRV_DISTRICT_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SRV_DISTRICT_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STABILIZATION" schema="PODS" id="PODS_STABILIZATION" comment="PODS.STABILIZATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.STABILIZATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="THICKNESS" default="" type="Decimal"/>
                <param name="DRY_WEIGHT" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'STABILIZATION',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STABILIZATION(EVENT_ID,EVENT_GUID,TYPE_CL,SERIAL_NUMBER,PART_NUMBER,WIDTH,HEIGHT,THICKNESS,DRY_WEIGHT,MANUFACTURER_CL,DATE_MANUFACTURED,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SERIAL_NUMBER,:PART_NUMBER,:WIDTH,:HEIGHT,:THICKNESS,:DRY_WEIGHT,:MANUFACTURER_CL,:DATE_MANUFACTURED,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="THICKNESS" default="" type="Decimal"/>
                <param name="DRY_WEIGHT" default="" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STABILIZATION
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,WIDTH=:WIDTH,HEIGHT=:HEIGHT,THICKNESS=:THICKNESS,DRY_WEIGHT=:DRY_WEIGHT,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STABILIZATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STABILIZATION
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STABILIZATION/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STABILIZATION/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STATUS_RANGE" schema="PODS" id="PODS_STATUS_RANGE" comment="PODS.STATUS_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.STATUS_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="OPERATING_STATUS_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'STATUS_RANGE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STATUS_RANGE(EVENT_ID,EVENT_GUID,OPERATING_STATUS_GCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:OPERATING_STATUS_GCL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="OPERATING_STATUS_GCL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STATUS_RANGE
                    SET EVENT_GUID=:EVENT_GUID,OPERATING_STATUS_GCL=:OPERATING_STATUS_GCL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STATUS_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STATUS_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STATUS_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STATUS_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRAIGHTENING_VANES" schema="PODS" id="PODS_STRAIGHTENING_VANES" comment="PODS.STRAIGHTENING_VANES">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.STRAIGHTENING_VANES t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="NOMINAL_PIPE_SIZE" default="" type="Decimal"/>
                <param name="NUMBER_OF_VANES" default="" type="Decimal"/>
                <param name="PRESSURE_DROP" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.INSERT_PERMITTED = 1));


                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'STRIGH_VANES',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STRAIGHTENING_VANES(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,MATERIAL_CL,MODEL,NOMINAL_PIPE_SIZE,NUMBER_OF_VANES,PRESSURE_DROP,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:MATERIAL_CL,:MODEL,:NOMINAL_PIPE_SIZE,:NUMBER_OF_VANES,:PRESSURE_DROP,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="NOMINAL_PIPE_SIZE" default="" type="Decimal"/>
                <param name="NUMBER_OF_VANES" default="" type="Decimal"/>
                <param name="PRESSURE_DROP" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRAIGHTENING_VANES
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,MATERIAL_CL=:MATERIAL_CL,MODEL=:MODEL,NOMINAL_PIPE_SIZE=:NOMINAL_PIPE_SIZE,NUMBER_OF_VANES=:NUMBER_OF_VANES,PRESSURE_DROP=:PRESSURE_DROP,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAIGHTENING_VANES'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STRAIGHTENING_VANES
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRAIGHTENING_VANES/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRAIGHTENING_VANES/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRAKE" schema="PODS" id="PODS_STRAKE" comment="PODS.STRAKE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.STRAKE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="PITCH" default="" type="Decimal"/>
                <param name="FASTENER_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="NUMBER_OF_STARTS" default="" type="Decimal"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'STRAKE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STRAKE(EVENT_ID,EVENT_GUID,LENGTH,HEIGHT,PITCH,FASTENER_CL,SERIAL_NUMBER,PART_NUMBER,NUMBER_OF_STARTS,COATING_TYPE_SCL,COATING_SUBTYPE_SCL,DATE_INSTALLED,MANUFACTURER_CL,DATE_MANUFACTURED,MATERIAL_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:LENGTH,:HEIGHT,:PITCH,:FASTENER_CL,:SERIAL_NUMBER,:PART_NUMBER,:NUMBER_OF_STARTS,REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),:DATE_INSTALLED,:MANUFACTURER_CL,:DATE_MANUFACTURED,:MATERIAL_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="HEIGHT" default="" type="Decimal"/>
                <param name="PITCH" default="" type="Decimal"/>
                <param name="FASTENER_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="NUMBER_OF_STARTS" default="" type="Decimal"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRAKE
                    SET EVENT_GUID=:EVENT_GUID,LENGTH=:LENGTH,HEIGHT=:HEIGHT,PITCH=:PITCH,FASTENER_CL=:FASTENER_CL,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,NUMBER_OF_STARTS=:NUMBER_OF_STARTS,COATING_TYPE_SCL=REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),COATING_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),DATE_INSTALLED=:DATE_INSTALLED,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,MATERIAL_CL=:MATERIAL_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRAKE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STRAKE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRAKE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRAKE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRUCTURE_SUPPORT" schema="PODS" id="PODS_STRUCTURE_SUPPORT" comment="PODS.STRUCTURE_SUPPORT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.STRUCTURE_SUPPORT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'STRUCT_SUPP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STRUCTURE_SUPPORT(EVENT_ID,EVENT_GUID,TYPE_CL,MATERIAL_CL,PART_NUMBER,SERIAL_NUMBER,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MATERIAL_CL,:PART_NUMBER,:SERIAL_NUMBER,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRUCTURE_SUPPORT
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MATERIAL_CL=:MATERIAL_CL,PART_NUMBER=:PART_NUMBER,SERIAL_NUMBER=:SERIAL_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_SUPPORT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STRUCTURE_SUPPORT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRUCTURE_SUPPORT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRUCTURE_SUPPORT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SUBSEA_SLED_ASSEMBLY" schema="PODS" id="PODS_SUBSEA_SLED_ASSEMBLY" comment="PODS.SUBSEA_SLED_ASSEMBLY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SUBSEA_SLED_ASSEMBLY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SLED_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_MAINLINE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_BRANCH_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SUBS_SLED_ASS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SUBSEA_SLED_ASSEMBLY(EVENT_ID,EVENT_GUID,SLED_ID,TYPE_CL,SERIAL_NUMBER,PART_NUMBER,MANUFACTURER_CL,DATE_MANUFACTURED,NOMINAL_MAINLINE_DIAMETER_GCL,NOMINAL_BRANCH_DIAMETER_GCL,SPECIFICATION_CL,DATE_INSTALLED,MATERIAL_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:TYPE_CL,:SERIAL_NUMBER,:PART_NUMBER,:MANUFACTURER_CL,:DATE_MANUFACTURED,:NOMINAL_MAINLINE_DIAMETER_GCL,:NOMINAL_BRANCH_DIAMETER_GCL,:SPECIFICATION_CL,:DATE_INSTALLED,:MATERIAL_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SLED_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="NOMINAL_MAINLINE_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_BRANCH_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SUBSEA_SLED_ASSEMBLY
                    SET EVENT_GUID=:EVENT_GUID,SLED_ID=:SLED_ID,TYPE_CL=:TYPE_CL,SERIAL_NUMBER=:SERIAL_NUMBER,PART_NUMBER=:PART_NUMBER,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,NOMINAL_MAINLINE_DIAMETER_GCL=:NOMINAL_MAINLINE_DIAMETER_GCL,NOMINAL_BRANCH_DIAMETER_GCL=:NOMINAL_BRANCH_DIAMETER_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,DATE_INSTALLED=:DATE_INSTALLED,MATERIAL_CL=:MATERIAL_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SUBSEA_SLED_ASSEMBLY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SUBSEA_SLED_ASSEMBLY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SUBSEA_SLED_ASSEMBLY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SUBSEA_SLED_ASSEMBLY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TAP" schema="PODS" id="PODS_TAP" comment="PODS.TAP">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TAP t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TAP_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TAP',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TAP(EVENT_ID,EVENT_GUID,TYPE_CL,NOMINAL_DIAMETER_GCL,MANUFACTURER_CL,TAP_METHOD_GCL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DATE_MANUFACTURED,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:NOMINAL_DIAMETER_GCL,:MANUFACTURER_CL,:TAP_METHOD_GCL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DATE_MANUFACTURED,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="TAP_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TAP
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,MANUFACTURER_CL=:MANUFACTURER_CL,TAP_METHOD_GCL=:TAP_METHOD_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAP'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TAP
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TAP/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TAP/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TAPERED_STRESS_JOINT" schema="PODS" id="PODS_TAPERED_STRESS_JOINT" comment="PODS.TAPERED_STRESS_JOINT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TAPERED_STRESS_JOINT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STRESS_JOINT_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_TEMPERATURE" default="" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TAP_STRS_JNT',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TAPERED_STRESS_JOINT(EVENT_ID,EVENT_GUID,STRESS_JOINT_ID,TYPE_CL,NOMINAL_DIAMETER_GCL,COATING_TYPE_SCL,COATING_SUBTYPE_SCL,MANUFACTURER_CL,DATE_INSTALLED,DESCRIPTION,SERIAL_NUMBER,MATERIAL_CL,DATE_MANUFACTURED,PART_NUMBER,MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING,DESIGN_TEMPERATURE,CONNECTION_TYPE_CL,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:ID,:TYPE_CL,:NOMINAL_DIAMETER_GCL,REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),:MANUFACTURER_CL,:DATE_INSTALLED,:DESCRIPTION,:SERIAL_NUMBER,:MATERIAL_CL,:DATE_MANUFACTURED,:PART_NUMBER,:MILL_TEST_PRESSURE,:NOMINAL_PRESSURE_RATING,:DESIGN_TEMPERATURE,:CONNECTION_TYPE_CL,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="STRESS_JOINT_ID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="COATING_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="COATING_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PART_NUMBER" default="" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="DESIGN_TEMPERATURE" default="" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TAPERED_STRESS_JOINT
                    SET EVENT_GUID=:EVENT_GUID,STRESS_JOINT_ID=:STRESS_JOINT_ID,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,COATING_TYPE_SCL=REGEXP_REPLACE(:COATING_TYPE_SCL,'@.*',''),COATING_SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:COATING_TYPE_SCL,'@.*'),'@',''),:COATING_SUBTYPE_SCL),MANUFACTURER_CL=:MANUFACTURER_CL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SERIAL_NUMBER=:SERIAL_NUMBER,MATERIAL_CL=:MATERIAL_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PART_NUMBER=:PART_NUMBER,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,DESIGN_TEMPERATURE=:DESIGN_TEMPERATURE,CONNECTION_TYPE_CL=:CONNECTION_TYPE_CL,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAPERED_STRESS_JOINT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TAPERED_STRESS_JOINT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TAPERED_STRESS_JOINT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TAPERED_STRESS_JOINT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TAX_DISTRICT_BOUNDARY" schema="PODS" id="PODS_TAX_DISTRICT_BOUNDARY" comment="PODS.TAX_DISTRICT_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TAX_DISTRICT_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TAX_DISTRICT_ID" default="" type="Decimal"/>
                <param name="TAX_DISTRICT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TAX_DISTR_BND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TAX_DISTRICT_BOUNDARY(EVENT_ID,EVENT_GUID,TAX_DISTRICT_ID,TAX_DISTRICT_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TAX_DISTRICT_ID,:TAX_DISTRICT_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TAX_DISTRICT_ID" default="" type="Decimal"/>
                <param name="TAX_DISTRICT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TAX_DISTRICT_BOUNDARY
                    SET EVENT_GUID=:EVENT_GUID,TAX_DISTRICT_ID=:TAX_DISTRICT_ID,TAX_DISTRICT_GUID=:TAX_DISTRICT_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TAX_DISTRICT_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TAX_DISTRICT_BOUNDARY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TAX_DISTRICT_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TAX_DISTRICT_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TEE" schema="PODS" id="PODS_TEE" comment="PODS.TEE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TEE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_BRANCH_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TEE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TEE(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_DIAMETER_BRANCH_GCL,NOMINAL_WALL_THICKNESS_GCL,SPECIFICATION_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,MATERIAL_CL,DATE_MANUFACTURED,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:NOMINAL_DIAMETER_BRANCH_GCL,:NOMINAL_WALL_THICKNESS_GCL,:SPECIFICATION_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:MATERIAL_CL,:DATE_MANUFACTURED,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_BRANCH_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TEE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,NOMINAL_DIAMETER_BRANCH_GCL=:NOMINAL_DIAMETER_BRANCH_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TEE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TEE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TEE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TEMPERATURE_MEASUREMENT" schema="PODS" id="PODS_TEMPERATURE_MEASUREMENT" comment="PODS.TEMPERATURE_MEASUREMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TEMPERATURE_MEASUREMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MAXIMUM_TEMPERATURE" default="" type="Decimal"/>
                <param name="AVERAGE_TEMPERATURE" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TEMP_MEAS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TEMPERATURE_MEASUREMENT(EVENT_ID,EVENT_GUID,MAXIMUM_TEMPERATURE,AVERAGE_TEMPERATURE,MEASUREMENT_METHOD_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:MAXIMUM_TEMPERATURE,:AVERAGE_TEMPERATURE,:MEASUREMENT_METHOD_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="MAXIMUM_TEMPERATURE" default="" type="Decimal"/>
                <param name="AVERAGE_TEMPERATURE" default="" type="Decimal"/>
                <param name="MEASUREMENT_METHOD_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TEMPERATURE_MEASUREMENT
                    SET EVENT_GUID=:EVENT_GUID,MAXIMUM_TEMPERATURE=:MAXIMUM_TEMPERATURE,AVERAGE_TEMPERATURE=:AVERAGE_TEMPERATURE,MEASUREMENT_METHOD_CL=:MEASUREMENT_METHOD_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEMPERATURE_MEASUREMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TEMPERATURE_MEASUREMENT
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TEMPERATURE_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TEMPERATURE_MEASUREMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TEST_LEAD" schema="PODS" id="PODS_TEST_LEAD" comment="PODS.TEST_LEAD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TEST_LEAD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TEST_LEAD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TEST_LEAD(EVENT_ID,EVENT_GUID,TYPE_CL,STATUS_CL,DESCRIPTION,NAME,DATE_INSTALLED,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:STATUS_CL,:DESCRIPTION,:NAME,:DATE_INSTALLED,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="STATUS_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TEST_LEAD
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,STATUS_CL=:STATUS_CL,DESCRIPTION=:DESCRIPTION,NAME=:NAME,DATE_INSTALLED=:DATE_INSTALLED,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_LEAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.PI_CP_READING
                    SET REF_TEST_LEAD_EVENT_ID = NULL
                    WHERE REF_TEST_LEAD_EVENT_ID = :ID;

                    UPDATE PODS.COUPON_SITE
                    SET REF_TEST_LEAD_EVENT_ID = NULL
                    WHERE  REF_TEST_LEAD_EVENT_ID = :ID;

                    UPDATE PODS.BOND_LEAD
                    SET REF_TEST_LEAD_EVENT_ID = NULL
                    WHERE REF_TEST_LEAD_EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.TEST_LEAD
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_TEST_LEAD/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_TEST_LEAD/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TEST_PRESSURE" schema="PODS" id="PODS_TEST_PRESSURE" comment="PODS.TEST_PRESSURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TEST_PRESSURE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TEST_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TEST_DATE" default="" type="DateTime"/>
                <param name="TEST_MEDIUM_CL" default="UNKNOWN" type="String"/>
                <param name="TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DURATION_HOURS" default="" type="Decimal"/>
                <param name="TEST_STATION" default="" type="Decimal"/>
                <param name="TEST_STATION_ELEV" default="" type="Decimal"/>
                <param name="MAX_ELEVATION" default="" type="Decimal"/>
                <param name="MIN_ELEVATION" default="" type="Decimal"/>
                <param name="TEST_DISTANCE" default="" type="Decimal"/>
                <param name="MIN_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_PRESSURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="REASON_CL" default="UNKNOWN" type="String"/>
                <param name="REPORT_NUMBER" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TEST_PRESSURE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TEST_PRESSURE(EVENT_ID,EVENT_GUID,TEST_TYPE_CL,TEST_DATE,TEST_MEDIUM_CL,TEST_PRESSURE,DURATION_HOURS,TEST_STATION,TEST_STATION_ELEV,MAX_ELEVATION,MIN_ELEVATION,TEST_DISTANCE,MIN_PRESSURE,MAX_PRESSURE,DESCRIPTION,REASON_CL,REPORT_NUMBER,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TEST_TYPE_CL,:TEST_DATE,:TEST_MEDIUM_CL,:TEST_PRESSURE,:DURATION_HOURS,:TEST_STATION,:TEST_STATION_ELEV,:MAX_ELEVATION,:MIN_ELEVATION,:TEST_DISTANCE,:MIN_PRESSURE,:MAX_PRESSURE,:DESCRIPTION,:REASON_CL,:REPORT_NUMBER,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TEST_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TEST_DATE" default="" type="DateTime"/>
                <param name="TEST_MEDIUM_CL" default="UNKNOWN" type="String"/>
                <param name="TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DURATION_HOURS" default="" type="Decimal"/>
                <param name="TEST_STATION" default="" type="Decimal"/>
                <param name="TEST_STATION_ELEV" default="" type="Decimal"/>
                <param name="MAX_ELEVATION" default="" type="Decimal"/>
                <param name="MIN_ELEVATION" default="" type="Decimal"/>
                <param name="TEST_DISTANCE" default="" type="Decimal"/>
                <param name="MIN_PRESSURE" default="" type="Decimal"/>
                <param name="MAX_PRESSURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="REASON_CL" default="UNKNOWN" type="String"/>
                <param name="REPORT_NUMBER" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TEST_PRESSURE
                    SET EVENT_GUID=:EVENT_GUID,TEST_TYPE_CL=:TEST_TYPE_CL,TEST_DATE=:TEST_DATE,TEST_MEDIUM_CL=:TEST_MEDIUM_CL,TEST_PRESSURE=:TEST_PRESSURE,DURATION_HOURS=:DURATION_HOURS,TEST_STATION=:TEST_STATION,TEST_STATION_ELEV=:TEST_STATION_ELEV,MAX_ELEVATION=:MAX_ELEVATION,MIN_ELEVATION=:MIN_ELEVATION,TEST_DISTANCE=:TEST_DISTANCE,MIN_PRESSURE=:MIN_PRESSURE,MAX_PRESSURE=:MAX_PRESSURE,DESCRIPTION=:DESCRIPTION,REASON_CL=:REASON_CL,REPORT_NUMBER=:REPORT_NUMBER,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TEST_PRESSURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TEST_PRESSURE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TEST_PRESSURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TEST_PRESSURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TOWNSHIP_BOUNDARY" schema="PODS" id="PODS_TOWNSHIP_BOUNDARY" comment="PODS.TOWNSHIP_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.TOWNSHIP_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TOWNSHIP_DIRECTION" default="" type="String"/>
                <param name="TOWNSHIP_NUMBER" default="" type="String"/>
                <param name="RANGE_DIRECTION" default="" type="String"/>
                <param name="RANGE_NUMBER" default="" type="String"/>
                <param name="SECTION_NUMBER" default="" type="String"/>
                <param name="DATUM" default="" type="String"/>
                <param name="STATE_SURVEY_CL" default="UNKNOWN" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'TOWN_BND',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.TOWNSHIP_BOUNDARY(EVENT_ID,EVENT_GUID,TOWNSHIP_DIRECTION,TOWNSHIP_NUMBER,RANGE_DIRECTION,RANGE_NUMBER,SECTION_NUMBER,DATUM,STATE_SURVEY_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TOWNSHIP_DIRECTION,:TOWNSHIP_NUMBER,:RANGE_DIRECTION,:RANGE_NUMBER,:SECTION_NUMBER,:DATUM,:STATE_SURVEY_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TOWNSHIP_DIRECTION" default="" type="String"/>
                <param name="TOWNSHIP_NUMBER" default="" type="String"/>
                <param name="RANGE_DIRECTION" default="" type="String"/>
                <param name="RANGE_NUMBER" default="" type="String"/>
                <param name="SECTION_NUMBER" default="" type="String"/>
                <param name="DATUM" default="" type="String"/>
                <param name="STATE_SURVEY_CL" default="UNKNOWN" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TOWNSHIP_BOUNDARY
                    SET EVENT_GUID=:EVENT_GUID,TOWNSHIP_DIRECTION=:TOWNSHIP_DIRECTION,TOWNSHIP_NUMBER=:TOWNSHIP_NUMBER,RANGE_DIRECTION=:RANGE_DIRECTION,RANGE_NUMBER=:RANGE_NUMBER,SECTION_NUMBER=:SECTION_NUMBER,DATUM=:DATUM,STATE_SURVEY_CL=:STATE_SURVEY_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TOWNSHIP_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.TOWNSHIP_BOUNDARY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_TOWNSHIP_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_TOWNSHIP_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="VALVE" schema="PODS" id="PODS_VALVE" comment="PODS.VALVE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.VALVE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="VALVE_IDENTIFIER" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="JOINT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'VALVE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.VALVE(EVENT_ID,EVENT_GUID,VALVE_IDENTIFIER,NAME,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,TYPE_CL,SERIAL_NUMBER,MODEL,MANUFACTURER_CL,DATE_MANUFACTURED,SPECIFICATION_CL,MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING,NOMINAL_PRESSURE_RATING_INLET,NOMINAL_PRESSURE_RATING_OUTLET,DATE_INSTALLED,FUNCTION_CL,JOINT_TYPE_CL,MATERIAL_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:VALVE_IDENTIFIER,:NAME,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:TYPE_CL,:SERIAL_NUMBER,:MODEL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SPECIFICATION_CL,:MILL_TEST_PRESSURE,:NOMINAL_PRESSURE_RATING,:NOMINAL_PRESSURE_RATING_INLET,:NOMINAL_PRESSURE_RATING_OUTLET,:DATE_INSTALLED,:FUNCTION_CL,:JOINT_TYPE_CL,:MATERIAL_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="VALVE_IDENTIFIER" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="JOINT_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.VALVE
                    SET EVENT_GUID=:EVENT_GUID,VALVE_IDENTIFIER=:VALVE_IDENTIFIER,NAME=:NAME,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,TYPE_CL=:TYPE_CL,SERIAL_NUMBER=:SERIAL_NUMBER,MODEL=:MODEL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SPECIFICATION_CL=:SPECIFICATION_CL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,NOMINAL_PRESSURE_RATING_INLET=:NOMINAL_PRESSURE_RATING_INLET,NOMINAL_PRESSURE_RATING_OUTLET=:NOMINAL_PRESSURE_RATING_OUTLET,DATE_INSTALLED=:DATE_INSTALLED,FUNCTION_CL=:FUNCTION_CL,JOINT_TYPE_CL=:JOINT_TYPE_CL,MATERIAL_CL=:MATERIAL_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.VALVE_OPERATOR
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.VALVE
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_VALVE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_VALVE/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_VALVE_OPERATOR/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_VALVE_OPERATOR/'||CAST(:ID AS VARCHAR(30));


                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="VALVE_OPERATOR" schema="PODS" id="PODS_VALVE_OPERATOR" comment="PODS.VALVE_OPERATOR">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.VALVE_OPERATOR t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="" type="String"/>
                <param name="SUBTYPE_SCL" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'VALVE_OPERATOR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.VALVE_OPERATOR(EVENT_ID,EVENT_GUID,TYPE_SCL,SUBTYPE_SCL,SERIAL_NUMBER,MANUFACTURER_CL,DATE_MANUFACTURED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,REGEXP_REPLACE(:TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),:SERIAL_NUMBER,:MANUFACTURER_CL,:DATE_MANUFACTURED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_SCL" default="" type="String"/>
                <param name="SUBTYPE_SCL" default="" type="String"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.VALVE_OPERATOR
                    SET EVENT_GUID=:EVENT_GUID,TYPE_SCL=REGEXP_REPLACE(:TYPE_SCL,'@.*',''),SUBTYPE_SCL=coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL),SERIAL_NUMBER=:SERIAL_NUMBER,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VALVE_OPERATOR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.VALVE_OPERATOR
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_VALVE_OPERATOR/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_VALVE_OPERATOR/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="VENT_PIPE" schema="PODS" id="PODS_VENT_PIPE" comment="PODS.VENT_PIPE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.VENT_PIPE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'VENT_PIPE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.VENT_PIPE(EVENT_ID,EVENT_GUID,NAME,MANUFACTURER_CL,DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE,MATERIAL_CL,PIPE_SPECIFICATION_GCL,SMYS_GCL,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:NAME,:MANUFACTURER_CL,:DATE_MANUFACTURED,:PIPE_MILL_LOCATION_GCL,:MILL_TEST_PRESSURE,:MATERIAL_CL,:PIPE_SPECIFICATION_GCL,:SMYS_GCL,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:PIPE_LONG_SEAM_GCL,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="PIPE_MILL_LOCATION_GCL" default="UNKNOWN" type="String"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SPECIFICATION_GCL" default="UNKNOWN" type="String"/>
                <param name="SMYS_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.VENT_PIPE
                    SET EVENT_GUID=:EVENT_GUID,NAME=:NAME,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,PIPE_MILL_LOCATION_GCL=:PIPE_MILL_LOCATION_GCL,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,MATERIAL_CL=:MATERIAL_CL,PIPE_SPECIFICATION_GCL=:PIPE_SPECIFICATION_GCL,SMYS_GCL=:SMYS_GCL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VENT_PIPE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.VENT_PIPE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_VENT_PIPE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_VENT_PIPE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="VESSEL" schema="PODS" id="PODS_VESSEL" comment="PODS.VESSEL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.VESSEL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_TEMPERATURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'VESSEL',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.VESSEL(EVENT_ID,EVENT_GUID,TYPE_CL,MANUFACTURER_CL,DATE_MANUFACTURED,SERIAL_NUMBER,MODEL,SPECIFICATION_CL,NOMINAL_TEMPERATURE_RATING,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:SERIAL_NUMBER,:MODEL,:SPECIFICATION_CL,:NOMINAL_TEMPERATURE_RATING,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_TEMPERATURE_RATING" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.VESSEL
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,SERIAL_NUMBER=:SERIAL_NUMBER,MODEL=:MODEL,SPECIFICATION_CL=:SPECIFICATION_CL,NOMINAL_TEMPERATURE_RATING=:NOMINAL_TEMPERATURE_RATING,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_VESSEL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.VESSEL
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_VESSEL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_VESSEL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="WELLHEAD_ASSEMBLY" schema="PODS" id="PODS_WELLHEAD_ASSEMBLY" comment="PODS.WELLHEAD_ASSEMBLY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.WELLHEAD_ASSEMBLY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="WELL_OPERATOR_CL" default="UNKNOWN" type="String"/>
                <param name="WELL_OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OUTLET_VALVE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ACTUATOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'WELLHD_ASS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.WELLHEAD_ASSEMBLY(EVENT_ID,EVENT_GUID,TYPE_CL,MATERIAL_CL,MANUFACTURER_CL,WELL_OPERATOR_CL,WELL_OWNER_CL,NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE,DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE,NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL,CONNECTION_TYPE_CL,OUTLET_VALVE_TYPE_CL,ACTUATOR_TYPE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:MATERIAL_CL,:MANUFACTURER_CL,:WELL_OPERATOR_CL,:WELL_OWNER_CL,:NOMINAL_PRESSURE_RATING,:MILL_TEST_PRESSURE,:DESIGN_MIN_TEMPERATURE,:DESIGN_MAX_TEMPERATURE,:NOMINAL_DIAMETER_GCL,:NOMINAL_WALL_THICKNESS_GCL,:CONNECTION_TYPE_CL,:OUTLET_VALVE_TYPE_CL,:ACTUATOR_TYPE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="WELL_OPERATOR_CL" default="UNKNOWN" type="String"/>
                <param name="WELL_OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_PRESSURE_RATING" default="" type="Decimal"/>
                <param name="MILL_TEST_PRESSURE" default="" type="Decimal"/>
                <param name="DESIGN_MIN_TEMPERATURE" default="" type="Decimal"/>
                <param name="DESIGN_MAX_TEMPERATURE" default="" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="CONNECTION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OUTLET_VALVE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ACTUATOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.WELLHEAD_ASSEMBLY
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,MATERIAL_CL=:MATERIAL_CL,MANUFACTURER_CL=:MANUFACTURER_CL,WELL_OPERATOR_CL=:WELL_OPERATOR_CL,WELL_OWNER_CL=:WELL_OWNER_CL,NOMINAL_PRESSURE_RATING=:NOMINAL_PRESSURE_RATING,MILL_TEST_PRESSURE=:MILL_TEST_PRESSURE,DESIGN_MIN_TEMPERATURE=:DESIGN_MIN_TEMPERATURE,DESIGN_MAX_TEMPERATURE=:DESIGN_MAX_TEMPERATURE,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL,CONNECTION_TYPE_CL=:CONNECTION_TYPE_CL,OUTLET_VALVE_TYPE_CL=:OUTLET_VALVE_TYPE_CL,ACTUATOR_TYPE_CL=:ACTUATOR_TYPE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WELLHEAD_ASSEMBLY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.WELLHEAD_ASSEMBLY
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_WELLHEAD_ASSEMBLY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_WELLHEAD_ASSEMBLY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data id="PODS_CP_FOREIGN_LINE_CROSSING" table="FOREIGN_LINE_CROSSING" schema="PODS" comment="PODS.FOREIGN_LINE_CROSSING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.FOREIGN_LINE_CROSSING t
                    WHERE t.TYPE_CL = 'FL_CROSS_TYPE_11' OR t.TYPE_CL = 'FL_CROSS_TYPE_12'
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'C2000018')
                    RETURNING ENTITY_ID INTO :ID;

                    INSERT INTO PODS.FOREIGN_LINE_CROSSING(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,OWNER_CL,LINE_CLEARANCE,MATERIAL_CL,FOREIGN_DIAMETER,CROSSING_DATE,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_ID,:EVENT_GUID,:TYPE_CL,:OWNER_CL,:LINE_CLEARANCE,:MATERIAL_CL,:FOREIGN_DIAMETER,:CROSSING_DATE,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:LINE_BELOW_GROUND_LF,:CROSSING_BELOW_GROUND_LF,:CROSSING_BELOW_LINE_LF,:FOREIGN_BOND_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FOREIGN_LINE_CROSSING
                    SET EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,OWNER_CL=:OWNER_CL,LINE_CLEARANCE=:LINE_CLEARANCE,MATERIAL_CL=:MATERIAL_CL,FOREIGN_DIAMETER=:FOREIGN_DIAMETER,CROSSING_DATE=:CROSSING_DATE,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,LINE_BELOW_GROUND_LF=:LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF=:CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF=:CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF=:FOREIGN_BOND_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.FOREIGN_LINE_CROSSING
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CP_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CP_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FOREIGN_LINE_CROSSING" schema="PODS" id="PODS_FOREIGN_LINE_CROSSING" comment="PODS.FOREIGN_LINE_CROSSING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.FOREIGN_LINE_CROSSING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'FRGN_LINE_CRSS',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.FOREIGN_LINE_CROSSING(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,OWNER_CL,LINE_CLEARANCE,MATERIAL_CL,FOREIGN_DIAMETER,CROSSING_DATE,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF,SOURCE_GCL,COMMENTS)
                    VALUES(-20,:ID,:EVENT_GUID,:TYPE_CL,:OWNER_CL,:LINE_CLEARANCE,:MATERIAL_CL,:FOREIGN_DIAMETER,:CROSSING_DATE,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:LINE_BELOW_GROUND_LF,:CROSSING_BELOW_GROUND_LF,:CROSSING_BELOW_LINE_LF,:FOREIGN_BOND_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FOREIGN_LINE_CROSSING
                    SET GEOGRAPHIC_ENTITY_ID=:GEOGRAPHIC_ENTITY_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,OWNER_CL=:OWNER_CL,LINE_CLEARANCE=:LINE_CLEARANCE,MATERIAL_CL=:MATERIAL_CL,FOREIGN_DIAMETER=:FOREIGN_DIAMETER,CROSSING_DATE=:CROSSING_DATE,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,LINE_BELOW_GROUND_LF=:LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF=:CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF=:CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF=:FOREIGN_BOND_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.FOREIGN_LINE_CROSSING
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FOREIGN_LINE_CROSSING" schema="PODS" id="PODS_FOREIGN_LINE_CROSSING_COR" comment="PODS.FOREIGN_LINE_CROSSING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.FOREIGN_LINE_CROSSING t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'C2000018')
                    RETURNING ENTITY_ID INTO :ID;

                    INSERT INTO PODS.FOREIGN_LINE_CROSSING(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,OWNER_CL,LINE_CLEARANCE,MATERIAL_CL,FOREIGN_DIAMETER,CROSSING_DATE,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_ID,:EVENT_GUID,:TYPE_CL,:OWNER_CL,:LINE_CLEARANCE,:MATERIAL_CL,:FOREIGN_DIAMETER,:CROSSING_DATE,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:LINE_BELOW_GROUND_LF,:CROSSING_BELOW_GROUND_LF,:CROSSING_BELOW_LINE_LF,:FOREIGN_BOND_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FOREIGN_LINE_CROSSING
                    SET EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,OWNER_CL=:OWNER_CL,LINE_CLEARANCE=:LINE_CLEARANCE,MATERIAL_CL=:MATERIAL_CL,FOREIGN_DIAMETER=:FOREIGN_DIAMETER,CROSSING_DATE=:CROSSING_DATE,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,LINE_BELOW_GROUND_LF=:LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF=:CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF=:CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF=:FOREIGN_BOND_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_FOREIGN_LINE_CROSSING_COR'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.FOREIGN_LINE_CROSSING
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="HCA_BOUNDARY" schema="PODS" id="PODS_HCA_BOUNDARY" comment="PODS.HCA_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.HCA_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_ID" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'HCA_BOUNDARY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.HCA_BOUNDARY(EVENT_ID,GEOGRAPHIC_ENTITY_ID,TYPE_CL,DETERMINATION_DATE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:GEOGRAPHIC_ENTITY_ID,:TYPE_CL,:DETERMINATION_DATE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_ID" type="Decimal"/>
                <param name="GEOGRAPHIC_GUID" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.HCA_BOUNDARY
                    SET GEOGRAPHIC_ENTITY_ID=:GEOGRAPHIC_ENTITY_ID,TYPE_CL=:TYPE_CL,DETERMINATION_DATE=:DETERMINATION_DATE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    v_geographic_entity_id NUMBER;
                    BEGIN

                    SELECT MIN(geographic_entity_id) /* avoid nodatafound exception*/
                    INTO v_geographic_entity_id
                    FROM PODS.HCA_BOUNDARY
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.HCA_BOUNDARY
                    WHERE EVENT_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = v_geographic_entity_id;

                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_HCA_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_HCA_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="RAILROAD" schema="PODS" id="PODS_RAILROAD" comment="PODS.RAILROAD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.RAILROAD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-30" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OPERATOR_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'RAILROAD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.RAILROAD(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,OPERATOR_CL,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(-30,:ID,:EVENT_GUID,:TYPE_CL,:OPERATOR_CL,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:CASING_INDICATOR_LF,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-30" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OPERATOR_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.RAILROAD
                    SET GEOGRAPHIC_ENTITY_ID=:GEOGRAPHIC_ENTITY_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,OPERATOR_CL=:OPERATOR_CL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF=:CASING_INDICATOR_LF,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RAILROAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.RAILROAD
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_RAILROAD/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_RAILROAD/'||CAST(:ID AS VARCHAR(30));
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ROAD" schema="PODS" id="PODS_ROAD_ENTITY" comment="PODS.ROAD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.ROAD t WHERE EVENT_ID&lt;0) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-10" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'UNKNOWN')
                    RETURNING ENTITY_ID INTO :ID;
                    INSERT INTO PODS.ROAD	(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,SURFACE_CL, INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,-10,:EVENT_GUID, :TYPE_CL,:SURFACE_CL,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:CASING_INDICATOR_LF,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);

                    END;


                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-10" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ROAD
                    SET TYPE_CL=:TYPE_CL,SURFACE_CL=:SURFACE_CL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF=:CASING_INDICATOR_LF,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.ROAD
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ROAD/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ROAD/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="WATERWAY" schema="PODS" id="PODS_WATERWAY_ENTITY" comment="PODS.WATERWAY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.WATERWAY t WHERE EVENT_ID&lt;0) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-70" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PARCEL_NUMBER" default="" type="String"/>
                <param name="OWNER_NAME" default="" type="String"/>
                <param name="PROPERTY_WIDTH" default="" type="Decimal"/>
                <param name="EASEMENT_WIDTH" default="" type="Decimal"/>
                <param name="ADDRESS" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'UNKNOWN')
                    RETURNING ENTITY_ID INTO :ID;

                    INSERT INTO PODS.WATERWAY(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,PARCEL_NUMBER,OWNER_NAME,PROPERTY_WIDTH,EASEMENT_WIDTH,ADDRESS,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_ID,:EVENT_GUID,:TYPE_CL,:PARCEL_NUMBER,:OWNER_NAME,:PROPERTY_WIDTH,:EASEMENT_WIDTH,:ADDRESS,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-70" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PARCEL_NUMBER" default="" type="String"/>
                <param name="OWNER_NAME" default="" type="String"/>
                <param name="PROPERTY_WIDTH" default="" type="Decimal"/>
                <param name="EASEMENT_WIDTH" default="" type="Decimal"/>
                <param name="ADDRESS" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.WATERWAY
                    SET EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,PARCEL_NUMBER=:PARCEL_NUMBER,OWNER_NAME=:OWNER_NAME,PROPERTY_WIDTH=:PROPERTY_WIDTH,EASEMENT_WIDTH=:EASEMENT_WIDTH,ADDRESS=:ADDRESS,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.WATERWAY
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="RIGHT_OF_WAY" schema="PODS" id="PODS_RIGHT_OF_WAY" comment="PODS.RIGHT_OF_WAY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.RIGHT_OF_WAY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-70" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PARCEL_NUMBER" default="" type="String"/>
                <param name="OWNER_NAME" default="" type="String"/>
                <param name="PROPERTY_WIDTH" default="" type="Decimal"/>
                <param name="EASEMENT_WIDTH" default="" type="Decimal"/>
                <param name="ADDRESS" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'UNKNOWN')
                    RETURNING ENTITY_ID INTO :ID;

                    INSERT INTO PODS.RIGHT_OF_WAY(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,PARCEL_NUMBER,OWNER_NAME,PROPERTY_WIDTH,EASEMENT_WIDTH,ADDRESS,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_ID,:EVENT_GUID,:TYPE_CL,:PARCEL_NUMBER,:OWNER_NAME,:PROPERTY_WIDTH,:EASEMENT_WIDTH,:ADDRESS,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-70" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PARCEL_NUMBER" default="" type="String"/>
                <param name="OWNER_NAME" default="" type="String"/>
                <param name="PROPERTY_WIDTH" default="" type="Decimal"/>
                <param name="EASEMENT_WIDTH" default="" type="Decimal"/>
                <param name="ADDRESS" default="" type="String"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.RIGHT_OF_WAY
                    SET EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,PARCEL_NUMBER=:PARCEL_NUMBER,OWNER_NAME=:OWNER_NAME,PROPERTY_WIDTH=:PROPERTY_WIDTH,EASEMENT_WIDTH=:EASEMENT_WIDTH,ADDRESS=:ADDRESS,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_RIGHT_OF_WAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.RIGHT_OF_WAY
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_RIGHT_OF_WAY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ROAD" schema="PODS" id="PODS_ROAD" comment="PODS.ROAD">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ROAD t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-10" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ROAD',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;


                    INSERT INTO PODS.ROAD(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,SURFACE_CL,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(-10,:ID,:EVENT_GUID,:TYPE_CL,:SURFACE_CL,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:CASING_INDICATOR_LF,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-10" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ROAD
                    SET GEOGRAPHIC_ENTITY_ID=:GEOGRAPHIC_ENTITY_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SURFACE_CL=:SURFACE_CL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF=:CASING_INDICATOR_LF,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROAD'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM PODS.ROAD
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_ROAD/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_ROAD/'||CAST(:ID AS VARCHAR(30));
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="WATERWAY" schema="PODS" id="PODS_WATERWAY" comment="PODS.WATERWAY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.WATERWAY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-40" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PROTECTED_LF" default="" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'WATERWAY',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.WATERWAY(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,PROTECTED_LF,INTERSECTION_ANGLE,SCALED_GCL,DIRECTION_GCL,SOURCE_NUMBER,WIDTH,GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(-40,:ID,:EVENT_GUID,:TYPE_CL,:PROTECTED_LF,:INTERSECTION_ANGLE,:SCALED_GCL,:DIRECTION_GCL,:SOURCE_NUMBER,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:CASING_INDICATOR_LF,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-40" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PROTECTED_LF" default="" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="CASING_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.WATERWAY
                    SET GEOGRAPHIC_ENTITY_ID=:GEOGRAPHIC_ENTITY_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,PROTECTED_LF=:PROTECTED_LF,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,SOURCE_NUMBER=:SOURCE_NUMBER,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,CASING_INDICATOR_LF=:CASING_INDICATOR_LF,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WATERWAY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE
                    FROM PODS.WATERWAY
                    WHERE EVENT_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_WATERWAY/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_WATERWAY/'||CAST(:ID AS VARCHAR(30));
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COMPRESSOR_STATION" schema="PODS" id="PODS_COMPRESSOR_STATION" comment="PODS.COMPRESSOR_STATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.COMPRESSOR_STATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="STATION_NAME" default="" type="String"/>
                <param name="TOTAL_HORSEPOWER" default="" type="Decimal"/>
                <param name="NUMBER_OF_ENGINES" default="" type="Decimal"/>
                <param name="NUMBER_OF_TURBINES" default="" type="Decimal"/>
                <param name="NUMBER_OF_MOTORS" default="" type="Decimal"/>
                <param name="ENGINES_USED_FOR_ELECTRICITY" default="" type="Decimal"/>
                <param name="TURBINES_USED_FOR_ELECTRICITY" default="" type="Decimal"/>
                <param name="TITLE_V_APPLICABLE_LF" default="" type="String"/>
                <param name="TITLE_V_SUBMITTED_DATE" default="" type="DateTime"/>
                <param name="TITLE_V_RECEIVED_DATE" default="" type="DateTime"/>
                <param name="SIP_APPLICABLE_LF" default="" type="String"/>
                <param name="SIP_SUBMITTED_DATE" default="" type="DateTime"/>
                <param name="SIP_ISSUED_DATE" default="" type="DateTime"/>
                <param name="PRIMARY_FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'COMPR_STTN',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.COMPRESSOR_STATION(OFFLINE_ID,OFFLINE_GUID,STATION_NUMBER,STATION_NAME,TOTAL_HORSEPOWER,NUMBER_OF_ENGINES,NUMBER_OF_TURBINES,NUMBER_OF_MOTORS,ENGINES_USED_FOR_ELECTRICITY,TURBINES_USED_FOR_ELECTRICITY,TITLE_V_APPLICABLE_LF,TITLE_V_SUBMITTED_DATE,TITLE_V_RECEIVED_DATE,SIP_APPLICABLE_LF,SIP_SUBMITTED_DATE,SIP_ISSUED_DATE,PRIMARY_FUNCTION_CL,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:STATION_NUMBER,:STATION_NAME,:TOTAL_HORSEPOWER,:NUMBER_OF_ENGINES,:NUMBER_OF_TURBINES,:NUMBER_OF_MOTORS,:ENGINES_USED_FOR_ELECTRICITY,:TURBINES_USED_FOR_ELECTRICITY,:TITLE_V_APPLICABLE_LF,:TITLE_V_SUBMITTED_DATE,:TITLE_V_RECEIVED_DATE,:SIP_APPLICABLE_LF,:SIP_SUBMITTED_DATE,:SIP_ISSUED_DATE,:PRIMARY_FUNCTION_CL,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="STATION_NAME" default="" type="String"/>
                <param name="TOTAL_HORSEPOWER" default="" type="Decimal"/>
                <param name="NUMBER_OF_ENGINES" default="" type="Decimal"/>
                <param name="NUMBER_OF_TURBINES" default="" type="Decimal"/>
                <param name="NUMBER_OF_MOTORS" default="" type="Decimal"/>
                <param name="ENGINES_USED_FOR_ELECTRICITY" default="" type="Decimal"/>
                <param name="TURBINES_USED_FOR_ELECTRICITY" default="" type="Decimal"/>
                <param name="TITLE_V_APPLICABLE_LF" default="" type="String"/>
                <param name="TITLE_V_SUBMITTED_DATE" default="" type="DateTime"/>
                <param name="TITLE_V_RECEIVED_DATE" default="" type="DateTime"/>
                <param name="SIP_APPLICABLE_LF" default="" type="String"/>
                <param name="SIP_SUBMITTED_DATE" default="" type="DateTime"/>
                <param name="SIP_ISSUED_DATE" default="" type="DateTime"/>
                <param name="PRIMARY_FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COMPRESSOR_STATION
                    SET OFFLINE_GUID=:OFFLINE_GUID,STATION_NUMBER=:STATION_NUMBER,STATION_NAME=:STATION_NAME,TOTAL_HORSEPOWER=:TOTAL_HORSEPOWER,NUMBER_OF_ENGINES=:NUMBER_OF_ENGINES,NUMBER_OF_TURBINES=:NUMBER_OF_TURBINES,NUMBER_OF_MOTORS=:NUMBER_OF_MOTORS,ENGINES_USED_FOR_ELECTRICITY=:ENGINES_USED_FOR_ELECTRICITY,TURBINES_USED_FOR_ELECTRICITY=:TURBINES_USED_FOR_ELECTRICITY,TITLE_V_APPLICABLE_LF=:TITLE_V_APPLICABLE_LF,TITLE_V_SUBMITTED_DATE=:TITLE_V_SUBMITTED_DATE,TITLE_V_RECEIVED_DATE=:TITLE_V_RECEIVED_DATE,SIP_APPLICABLE_LF=:SIP_APPLICABLE_LF,SIP_SUBMITTED_DATE=:SIP_SUBMITTED_DATE,SIP_ISSUED_DATE=:SIP_ISSUED_DATE,PRIMARY_FUNCTION_CL=:PRIMARY_FUNCTION_CL,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMPRESSOR_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.CENTRIFUGAL_COMPRESSOR
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_CYLINDER
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_EMISSIONS
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_POCKET
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.ELECTRIC_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.RECIPROCATING_COMPRESSOR
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.RECIPROCATING_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.TURBINE_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    DELETE
                    FROM PODS.UNIT
                    WHERE COMPRESSOR_STATION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_UNIT/'||CAST(UNIT_ID AS VARCHAR(30))
                    FROM PODS.UNIT
                    WHERE COMPRESSOR_STATION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_UNIT/'||CAST(UNIT_ID AS VARCHAR(30))
                    FROM PODS.UNIT
                    WHERE COMPRESSOR_STATION_ID = :ID);

                    DELETE
                    FROM PODS.COMPRESSOR_STATION
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.OFFLINE_EVENT
                    WHERE OFFLINE_ID = :ID;



                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30));


                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_COMPRESSOR_STATION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_COMPRESSOR_STATION/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="DISTRIBUTION_PLANT" schema="PODS" id="PODS_DISTRIBUTION_PLANT" comment="PODS.DISTRIBUTION_PLANT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.DISTRIBUTION_PLANT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="AUXILIARY_BUILDING_LF" default="" type="String"/>
                <param name="ELECTRICITY_LF" default="" type="String"/>
                <param name="VENT_PIPE_QUANTITY" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="MAOP_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="MAOP_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="ADDRESS_ID" default="" type="Decimal"/>
                <param name="ADDRESS_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'DISTRIB_PLANT',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.DISTRIBUTION_PLANT(OFFLINE_ID,OFFLINE_GUID,NAME,TYPE_CL,NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL,SERIAL_NUMBER,MODEL,MANUFACTURER_CL,DATE_MANUFACTURED,DATE_INSTALLED,SPECIFICATION_CL,AUXILIARY_BUILDING_LF,ELECTRICITY_LF,VENT_PIPE_QUANTITY,NOMINAL_PRESSURE_RATING_INLET,NOMINAL_PRESSURE_RATING_OUTLET,MAOP_PRESSURE_RATING_OUTLET,MAOP_PRESSURE_RATING_INLET,ADDRESS_ID,ADDRESS_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:OFFLINE_GUID,:NAME,:TYPE_CL,:NOMINAL_DIAMETER_INLET_GCL,:NOMINAL_DIAMETER_OUTLET_GCL,:SERIAL_NUMBER,:MODEL,:MANUFACTURER_CL,:DATE_MANUFACTURED,:DATE_INSTALLED,:SPECIFICATION_CL,:AUXILIARY_BUILDING_LF,:ELECTRICITY_LF,:VENT_PIPE_QUANTITY,:NOMINAL_PRESSURE_RATING_INLET,:NOMINAL_PRESSURE_RATING_OUTLET,:MAOP_PRESSURE_RATING_OUTLET,:MAOP_PRESSURE_RATING_INLET,:ADDRESS_ID,:ADDRESS_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_INLET_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_DIAMETER_OUTLET_GCL" default="0" type="Decimal"/>
                <param name="SERIAL_NUMBER" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_MANUFACTURED" default="" type="DateTime"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="SPECIFICATION_CL" default="UNKNOWN" type="String"/>
                <param name="AUXILIARY_BUILDING_LF" default="" type="String"/>
                <param name="ELECTRICITY_LF" default="" type="String"/>
                <param name="VENT_PIPE_QUANTITY" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="NOMINAL_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="MAOP_PRESSURE_RATING_OUTLET" default="" type="Decimal"/>
                <param name="MAOP_PRESSURE_RATING_INLET" default="" type="Decimal"/>
                <param name="ADDRESS_ID" default="" type="Decimal"/>
                <param name="ADDRESS_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.DISTRIBUTION_PLANT
                    SET OFFLINE_GUID=:OFFLINE_GUID,NAME=:NAME,TYPE_CL=:TYPE_CL,NOMINAL_DIAMETER_INLET_GCL=:NOMINAL_DIAMETER_INLET_GCL,NOMINAL_DIAMETER_OUTLET_GCL=:NOMINAL_DIAMETER_OUTLET_GCL,SERIAL_NUMBER=:SERIAL_NUMBER,MODEL=:MODEL,MANUFACTURER_CL=:MANUFACTURER_CL,DATE_MANUFACTURED=:DATE_MANUFACTURED,DATE_INSTALLED=:DATE_INSTALLED,SPECIFICATION_CL=:SPECIFICATION_CL,AUXILIARY_BUILDING_LF=:AUXILIARY_BUILDING_LF,ELECTRICITY_LF=:ELECTRICITY_LF,VENT_PIPE_QUANTITY=:VENT_PIPE_QUANTITY,NOMINAL_PRESSURE_RATING_INLET=:NOMINAL_PRESSURE_RATING_INLET,NOMINAL_PRESSURE_RATING_OUTLET=:NOMINAL_PRESSURE_RATING_OUTLET,MAOP_PRESSURE_RATING_OUTLET=:MAOP_PRESSURE_RATING_OUTLET,MAOP_PRESSURE_RATING_INLET=:MAOP_PRESSURE_RATING_INLET,ADDRESS_ID=:ADDRESS_ID,ADDRESS_GUID=:ADDRESS_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DISTRIBUTION_PLANT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.DISTRIBUTION_PLANT
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_DISTRIBUTION_PLANT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_DISTRIBUTION_PLANT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="HCA_IDENTIFIED_SITE" schema="PODS" id="PODS_HCA_IDENTIFIED_SITE" comment="PODS.HCA_IDENTIFIED_SITE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.HCA_IDENTIFIED_SITE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="HCA_IDENTIFIED_SITE_ID" default="" type="Decimal"/>
                <param name="HCA_IDENTIFIED_SITE_GUID" default="" type="String"/>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="VISIBLE_EXTERNAL_SIGNAGE_LF" default="" type="String"/>
                <param name="FREQUENCY_OF_USE_CL" default="UNKNOWN" type="String"/>
                <param name="OCCUPANTS_REDUCED_MOBILITY_LF" default="" type="String"/>
                <param name="OUTDOOR_GATHERING_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'HCA_ID_SITE',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.HCA_IDENTIFIED_SITE(OFFLINE_ID,HCA_IDENTIFIED_SITE_ID,HCA_IDENTIFIED_SITE_GUID,OFFLINE_GUID,TYPE_CL,DESCRIPTION,VISIBLE_EXTERNAL_SIGNAGE_LF,FREQUENCY_OF_USE_CL,OCCUPANTS_REDUCED_MOBILITY_LF,OUTDOOR_GATHERING_LF,SOURCE_GCL)
                    VALUES(:ID,:HCA_IDENTIFIED_SITE_ID,:HCA_IDENTIFIED_SITE_GUID,:OFFLINE_GUID,:TYPE_CL,:DESCRIPTION,:VISIBLE_EXTERNAL_SIGNAGE_LF,:FREQUENCY_OF_USE_CL,:OCCUPANTS_REDUCED_MOBILITY_LF,:OUTDOOR_GATHERING_LF,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="HCA_IDENTIFIED_SITE_ID" default="" type="Decimal"/>
                <param name="HCA_IDENTIFIED_SITE_GUID" default="" type="String"/>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="VISIBLE_EXTERNAL_SIGNAGE_LF" default="" type="String"/>
                <param name="FREQUENCY_OF_USE_CL" default="UNKNOWN" type="String"/>
                <param name="OCCUPANTS_REDUCED_MOBILITY_LF" default="" type="String"/>
                <param name="OUTDOOR_GATHERING_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.HCA_IDENTIFIED_SITE
                    SET HCA_IDENTIFIED_SITE_ID=:HCA_IDENTIFIED_SITE_ID,HCA_IDENTIFIED_SITE_GUID=:HCA_IDENTIFIED_SITE_GUID,OFFLINE_GUID=:OFFLINE_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,VISIBLE_EXTERNAL_SIGNAGE_LF=:VISIBLE_EXTERNAL_SIGNAGE_LF,FREQUENCY_OF_USE_CL=:FREQUENCY_OF_USE_CL,OCCUPANTS_REDUCED_MOBILITY_LF=:OCCUPANTS_REDUCED_MOBILITY_LF,OUTDOOR_GATHERING_LF=:OUTDOOR_GATHERING_LF,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_HCA_IDENTIFIED_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.HCA_IDENTIFIED_SITE
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_HCA_IDENTIFIED_SITE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_HCA_IDENTIFIED_SITE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="POPULATED_AREA" schema="PODS" id="PODS_POPULATED_AREA" comment="PODS.POPULATED_AREA">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.POPULATED_AREA t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'POPULATED_AREA',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.POPULATED_AREA(OFFLINE_ID,OFFLINE_GUID,TYPE_CL,NAME,OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE,DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID,SITE_ADDRESS_GUID,CONTACT_ID,CONTACT_GUID,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:OFFLINE_GUID,:TYPE_CL,:NAME,:OCCUPANT_COUNT,:OCCUPANCY_CATEGORY_GCL,:DETERMINATION_DATE,:DETERMINATION_METHOD_GCL,:SITE_ADDRESS_ID,:SITE_ADDRESS_GUID,:CONTACT_ID,:CONTACT_GUID,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.POPULATED_AREA
                    SET OFFLINE_GUID=:OFFLINE_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,OCCUPANT_COUNT=:OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL=:OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID=:SITE_ADDRESS_ID,SITE_ADDRESS_GUID=:SITE_ADDRESS_GUID,CONTACT_ID=:CONTACT_ID,CONTACT_GUID=:CONTACT_GUID,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_POPULATED_AREA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_HCA_IDENTIFIED_SITE/'||CAST(HCA_IDENTIFIED_SITE_ID AS VARCHAR(30))
                    FROM PODS.HCA_IDENTIFIED_SITE
                    WHERE OFFLINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_HCA_IDENTIFIED_SITE/'||CAST(HCA_IDENTIFIED_SITE_ID AS VARCHAR(30))
                    FROM PODS.HCA_IDENTIFIED_SITE
                    WHERE OFFLINE_ID = :ID);

                    DELETE
                    FROM PODS.HCA_IDENTIFIED_SITE
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.POPULATED_AREA
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.OFFLINE_EVENT
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_POPULATED_AREA/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_POPULATED_AREA/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PUMP_STATION" schema="PODS" id="PODS_PUMP_STATION" comment="PODS.PUMP_STATION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.PUMP_STATION t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="TOTAL_HORSEPOWER" default="" type="Decimal"/>
                <param name="NUMBER_OF_UNITS" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'PUMP_STATION',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.PUMP_STATION(OFFLINE_ID,OFFLINE_GUID,STATION_NUMBER,NAME,STATE_GCL,TOTAL_HORSEPOWER,NUMBER_OF_UNITS,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:STATION_NUMBER,:NAME,:STATE_GCL,:TOTAL_HORSEPOWER,:NUMBER_OF_UNITS,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="STATION_NUMBER" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="TOTAL_HORSEPOWER" default="" type="Decimal"/>
                <param name="NUMBER_OF_UNITS" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PUMP_STATION
                    SET OFFLINE_GUID=:OFFLINE_GUID,STATION_NUMBER=:STATION_NUMBER,NAME=:NAME,STATE_GCL=:STATE_GCL,TOTAL_HORSEPOWER=:TOTAL_HORSEPOWER,NUMBER_OF_UNITS=:NUMBER_OF_UNITS,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PUMP_STATION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE
                    FROM PODS.PUMP_STATION
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.OFFLINE_EVENT
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PUMP_STATION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PUMP_STATION/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRUCTURE" schema="PODS" id="PODS_STRUCTURE" comment="PODS.STRUCTURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.STRUCTURE t WHERE t.type_cl NOT IN ('STRUCT_TYPE_16','STRUCT_TYPE_17')) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'STRUCTURE',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.STRUCTURE(OFFLINE_ID,OFFLINE_GUID,TYPE_CL,NAME,OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE,DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID,SITE_ADDRESS_GUID,CONTACT_ID,CONTACT_GUID,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:TYPE_CL,:NAME,:OCCUPANT_COUNT,:OCCUPANCY_CATEGORY_GCL,:DETERMINATION_DATE,:DETERMINATION_METHOD_GCL,:SITE_ADDRESS_ID,:SITE_ADDRESS_GUID,:CONTACT_ID,:CONTACT_GUID,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRUCTURE
                    SET OFFLINE_GUID=:OFFLINE_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,OCCUPANT_COUNT=:OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL=:OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID=:SITE_ADDRESS_ID,SITE_ADDRESS_GUID=:SITE_ADDRESS_GUID,CONTACT_ID=:CONTACT_ID,CONTACT_GUID=:CONTACT_GUID,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.STRUCTURE
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="TANK" schema="PODS" id="PODS_TANK" comment="PODS.TANK">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.TANK t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TANK_NUMBER" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="BREAKOUT_TANK_LF" default="" type="String"/>
                <param name="SAP_EQUIPMENT_NUMBER" default="" type="String"/>
                <param name="NOMINAL_CAPACITY" default="" type="Decimal"/>
                <param name="DIAMETER" default="0" type="Decimal"/>
                <param name="SHELL_HEIGHT" default="" type="Decimal"/>
                <param name="MAX_PUMPING_RATE" default="" type="Decimal"/>
                <param name="ROOF_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="FLOATING_ROOF_DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="PRIMARY_ROOF_SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SECONDARY_ROOF_SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ROOF_DRAIN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="BOTTOM_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="BOTTOM_DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="FOUNDATION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NUMBER_OF_TANK_MIXERS" default="" type="Decimal"/>
                <param name="API_STANDARD" default="" type="String"/>
                <param name="INTERNAL_LINING_LF" default="" type="String"/>
                <param name="CONSTRUCTION_YEAR" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'TANK',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.TANK(OFFLINE_ID,OFFLINE_GUID,TANK_NUMBER,COMPANY_GCL,BREAKOUT_TANK_LF,SAP_EQUIPMENT_NUMBER,NOMINAL_CAPACITY,DIAMETER,SHELL_HEIGHT,MAX_PUMPING_RATE,ROOF_TYPE_CL,FLOATING_ROOF_DESIGN_CL,PRIMARY_ROOF_SEAL_TYPE_CL,SECONDARY_ROOF_SEAL_TYPE_CL,ROOF_DRAIN_TYPE_CL,BOTTOM_TYPE_CL,BOTTOM_DESIGN_CL,FOUNDATION_TYPE_CL,NUMBER_OF_TANK_MIXERS,API_STANDARD,INTERNAL_LINING_LF,CONSTRUCTION_YEAR,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:TANK_NUMBER,:COMPANY_GCL,:BREAKOUT_TANK_LF,:SAP_EQUIPMENT_NUMBER,:NOMINAL_CAPACITY,:DIAMETER,:SHELL_HEIGHT,:MAX_PUMPING_RATE,:ROOF_TYPE_CL,:FLOATING_ROOF_DESIGN_CL,:PRIMARY_ROOF_SEAL_TYPE_CL,:SECONDARY_ROOF_SEAL_TYPE_CL,:ROOF_DRAIN_TYPE_CL,:BOTTOM_TYPE_CL,:BOTTOM_DESIGN_CL,:FOUNDATION_TYPE_CL,:NUMBER_OF_TANK_MIXERS,:API_STANDARD,:INTERNAL_LINING_LF,:CONSTRUCTION_YEAR,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TANK_NUMBER" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="BREAKOUT_TANK_LF" default="" type="String"/>
                <param name="SAP_EQUIPMENT_NUMBER" default="" type="String"/>
                <param name="NOMINAL_CAPACITY" default="" type="Decimal"/>
                <param name="DIAMETER" default="0" type="Decimal"/>
                <param name="SHELL_HEIGHT" default="" type="Decimal"/>
                <param name="MAX_PUMPING_RATE" default="" type="Decimal"/>
                <param name="ROOF_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="FLOATING_ROOF_DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="PRIMARY_ROOF_SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SECONDARY_ROOF_SEAL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="ROOF_DRAIN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="BOTTOM_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="BOTTOM_DESIGN_CL" default="UNKNOWN" type="String"/>
                <param name="FOUNDATION_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NUMBER_OF_TANK_MIXERS" default="" type="Decimal"/>
                <param name="API_STANDARD" default="" type="String"/>
                <param name="INTERNAL_LINING_LF" default="" type="String"/>
                <param name="CONSTRUCTION_YEAR" default="" type="Decimal"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.TANK
                    SET OFFLINE_GUID=:OFFLINE_GUID,TANK_NUMBER=:TANK_NUMBER,COMPANY_GCL=:COMPANY_GCL,BREAKOUT_TANK_LF=:BREAKOUT_TANK_LF,SAP_EQUIPMENT_NUMBER=:SAP_EQUIPMENT_NUMBER,NOMINAL_CAPACITY=:NOMINAL_CAPACITY,DIAMETER=:DIAMETER,SHELL_HEIGHT=:SHELL_HEIGHT,MAX_PUMPING_RATE=:MAX_PUMPING_RATE,ROOF_TYPE_CL=:ROOF_TYPE_CL,FLOATING_ROOF_DESIGN_CL=:FLOATING_ROOF_DESIGN_CL,PRIMARY_ROOF_SEAL_TYPE_CL=:PRIMARY_ROOF_SEAL_TYPE_CL,SECONDARY_ROOF_SEAL_TYPE_CL=:SECONDARY_ROOF_SEAL_TYPE_CL,ROOF_DRAIN_TYPE_CL=:ROOF_DRAIN_TYPE_CL,BOTTOM_TYPE_CL=:BOTTOM_TYPE_CL,BOTTOM_DESIGN_CL=:BOTTOM_DESIGN_CL,FOUNDATION_TYPE_CL=:FOUNDATION_TYPE_CL,NUMBER_OF_TANK_MIXERS=:NUMBER_OF_TANK_MIXERS,API_STANDARD=:API_STANDARD,INTERNAL_LINING_LF=:INTERNAL_LINING_LF,CONSTRUCTION_YEAR=:CONSTRUCTION_YEAR,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_TANK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    DELETE
                    FROM PODS.TANK_OPERATION
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.TANK_COURSE
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.TANK_CONSTRUCTION
                    WHERE OFFLINE_ID = :ID;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = (SELECT EVENT_ID
                    FROM PODS.PI_TANK
                    WHERE OFFLINE_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PI_TANK/'||CAST(EVENT_ID  AS VARCHAR(30))
                    FROM PODS.PI_TANK
                    WHERE OFFLINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PI_TANK/'||CAST(EVENT_ID  AS VARCHAR(30))
                    FROM PODS.PI_TANK
                    WHERE OFFLINE_ID = :ID);

                    DELETE
                    FROM PODS.PI_TANK
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.TANK
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM PODS.OFFLINE_EVENT
                    WHERE OFFLINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_OFFLINE_EVENT/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_TANK/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_TANK/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_TANK_CONSTRUCTION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_TANK_CONSTRUCTION/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_TANK_COURSE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_TANK_COURSE/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_TANK_OPERATION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_TANK_OPERATION/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="UMBILICAL" schema="PODS" id="PODS_UMBILICAL" comment="PODS.UMBILICAL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.UMBILICAL t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="CONNECTED_FROM_LOCATION" default="" type="String"/>
                <param name="CONNECTED_TO_LOCATION" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'UMBILICAL',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.UMBILICAL(OFFLINE_ID,OFFLINE_GUID,FUNCTION_CL,TYPE_CL,LENGTH,CONNECTED_FROM_LOCATION,CONNECTED_TO_LOCATION,MATERIAL_CL,NOMINAL_DIAMETER_GCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:OFFLINE_GUID,:FUNCTION_CL,:TYPE_CL,:LENGTH,:CONNECTED_FROM_LOCATION,:CONNECTED_TO_LOCATION,:MATERIAL_CL,:NOMINAL_DIAMETER_GCL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="FUNCTION_CL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="CONNECTED_FROM_LOCATION" default="" type="String"/>
                <param name="CONNECTED_TO_LOCATION" default="" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.UMBILICAL
                    SET OFFLINE_GUID=:OFFLINE_GUID,FUNCTION_CL=:FUNCTION_CL,TYPE_CL=:TYPE_CL,LENGTH=:LENGTH,CONNECTED_FROM_LOCATION=:CONNECTED_FROM_LOCATION,CONNECTED_TO_LOCATION=:CONNECTED_TO_LOCATION,MATERIAL_CL=:MATERIAL_CL,NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UMBILICAL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.UMBILICAL
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_UMBILICAL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_UMBILICAL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COMMENTS" schema="PODS" id="PODS_COMMENTS" comment="PODS.COMMENTS">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT t.* FROM PODS.COMMENTS t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="COMMENTS_GUID" default="" type="String"/>
                <param name="TABLE_ID" default="" type="String"/>
                <param name="ID" default="" type="String"/>
                <param name="GUID" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="COMMENT_DATE" default="" type="DateTime"/>
                <param name="COMMENT_BY" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIGINAL_COMMENTS_ID" default="" type="Decimal"/>
                <param name="ORIGINAL_COMMENTS_GUID" default="" type="String"/>
                <param name="EFFECTIVE_TO_DATE" default="" type="DateTime"/>
                <param name="EFFECTIVE_FROM_DATE" default="" type="DateTime"/>
                <param name="CURRENT_INDICATOR_LF" default="Y" type="String"/>
                <param name="PODS_USER" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="PREVIOUS_COMMENTS_ID" default="" type="Decimal"/>
                <param name="PREVIOUS_COMMENTS_GUID" default="" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.COMMENTS(COMMENTS_GUID,TABLE_ID,ID,GUID,COMMENTS,COMMENT_DATE,COMMENT_BY,SOURCE_GCL,ORIGINAL_COMMENTS_ID,ORIGINAL_COMMENTS_GUID,EFFECTIVE_TO_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,PODS_USER,CREATE_DATE,PREVIOUS_COMMENTS_ID,PREVIOUS_COMMENTS_GUID)
                    VALUES(:COMMENTS_GUID,:TABLE_ID,:ID,:GUID,:COMMENTS,:COMMENT_DATE,:COMMENT_BY,:SOURCE_GCL,:ORIGINAL_COMMENTS_ID,:ORIGINAL_COMMENTS_GUID,:EFFECTIVE_TO_DATE,:EFFECTIVE_FROM_DATE,:CURRENT_INDICATOR_LF,:PODS_USER,:CREATE_DATE,:PREVIOUS_COMMENTS_ID,:PREVIOUS_COMMENTS_GUID)
                    RETURNING COMMENTS_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="COMMENTS_GUID" default="" type="String"/>
                <param name="TABLE_ID" default="" type="String"/>
                <param name="ID" default="" type="String"/>
                <param name="GUID" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="COMMENT_DATE" default="" type="DateTime"/>
                <param name="COMMENT_BY" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ORIGINAL_COMMENTS_ID" default="" type="Decimal"/>
                <param name="ORIGINAL_COMMENTS_GUID" default="" type="String"/>
                <param name="EFFECTIVE_TO_DATE" default="" type="DateTime"/>
                <param name="EFFECTIVE_FROM_DATE" default="" type="DateTime"/>
                <param name="CURRENT_INDICATOR_LF" default="Y" type="String"/>
                <param name="PODS_USER" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="PREVIOUS_COMMENTS_ID" default="" type="Decimal"/>
                <param name="PREVIOUS_COMMENTS_GUID" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COMMENTS
                    SET COMMENTS_GUID=:COMMENTS_GUID,TABLE_ID=:TABLE_ID,ID=:ID,GUID=:GUID,COMMENTS=:COMMENTS,COMMENT_DATE=:COMMENT_DATE,COMMENT_BY=:COMMENT_BY,SOURCE_GCL=:SOURCE_GCL,ORIGINAL_COMMENTS_ID=:ORIGINAL_COMMENTS_ID,ORIGINAL_COMMENTS_GUID=:ORIGINAL_COMMENTS_GUID,EFFECTIVE_TO_DATE=:EFFECTIVE_TO_DATE,EFFECTIVE_FROM_DATE=:EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF=:CURRENT_INDICATOR_LF,PODS_USER=:PODS_USER,CREATE_DATE=:CREATE_DATE,PREVIOUS_COMMENTS_ID=:PREVIOUS_COMMENTS_ID,PREVIOUS_COMMENTS_GUID=:PREVIOUS_COMMENTS_GUID
                    WHERE COMMENTS_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COMMENTS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.COMMENTS
                    WHERE COMMENTS_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_COMMENTS/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_COMMENTS/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="COUPON" schema="PODS" id="PODS_COUPON" comment="PODS.COUPON">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT COUPON_ID ID, t.* FROM PODS.COUPON t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="COUPON_SITE_EVENT_ID" default="" type="Decimal"/>
                <param name="COUPON_SITE_EVENT_GUID" default="" type="String"/>
                <param name="METAL_DENSITY" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_AREA" default="" type="Decimal"/>
                <param name="SURFACE_FINISH_CL" default="UNKNOWN" type="String"/>
                <param name="MASS_AT_INSTALL" default="" type="Decimal"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.COUPON(COUPON_SITE_EVENT_ID,COUPON_SITE_EVENT_GUID,METAL_DENSITY,TYPE_CL,MATERIAL_CL,SURFACE_AREA,SURFACE_FINISH_CL,MASS_AT_INSTALL,DEPTH_OF_COVER,DESCRIPTION,DATE_INSTALLED,MANUFACTURER_CL,COMMENTS,SOURCE_GCL)
                    VALUES(:COUPON_SITE_EVENT_ID,:COUPON_SITE_EVENT_GUID,:METAL_DENSITY,:TYPE_CL,:MATERIAL_CL,:SURFACE_AREA,:SURFACE_FINISH_CL,:MASS_AT_INSTALL,:DEPTH_OF_COVER,:DESCRIPTION,:DATE_INSTALLED,:MANUFACTURER_CL,:COMMENTS,:SOURCE_GCL)
                    RETURNING COUPON_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="COUPON_SITE_EVENT_ID" default="" type="Decimal"/>
                <param name="COUPON_SITE_EVENT_GUID" default="" type="String"/>
                <param name="METAL_DENSITY" default="" type="Decimal"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="SURFACE_AREA" default="" type="Decimal"/>
                <param name="SURFACE_FINISH_CL" default="UNKNOWN" type="String"/>
                <param name="MASS_AT_INSTALL" default="" type="Decimal"/>
                <param name="DEPTH_OF_COVER" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.COUPON
                    SET COUPON_SITE_EVENT_ID=:COUPON_SITE_EVENT_ID,COUPON_SITE_EVENT_GUID=:COUPON_SITE_EVENT_GUID,METAL_DENSITY=:METAL_DENSITY,TYPE_CL=:TYPE_CL,MATERIAL_CL=:MATERIAL_CL,SURFACE_AREA=:SURFACE_AREA,SURFACE_FINISH_CL=:SURFACE_FINISH_CL,MASS_AT_INSTALL=:MASS_AT_INSTALL,DEPTH_OF_COVER=:DEPTH_OF_COVER,DESCRIPTION=:DESCRIPTION,DATE_INSTALLED=:DATE_INSTALLED,MANUFACTURER_CL=:MANUFACTURER_CL,COMMENTS=:COMMENTS,SOURCE_GCL=:SOURCE_GCL
                    WHERE COUPON_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_COUPON'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN



                    UPDATE PODS.PI_IC_COUPON_READING
                    SET REF_COUPON_ID = NULL
                    WHERE REF_COUPON_ID = :ID;

                    DELETE
                    FROM PODS.COUPON
                    WHERE COUPON_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_COUPON/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_COUPON/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_INSPECTION" schema="PODS" id="PODS_ILI_INSPECTION" comment="PODS.ILI_INSPECTION">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT *
                    FROM (SELECT t.ili_inspection_id ID, t.*,c.sto_292_2007_damage_mechanical,
                    c.sto_292_2007_value_weld, c.sto_292_2007_damage_crack,
                    c.sto_292_2007_damage_corrosion, c.sto_292_2007_damage_dent,
                    c.sto_292_2007_value_pipe, c.sto_292_2007_damage_duty_var,
                    c.sto_292_2007_bad_pipe_count, c.sto_292_2007_value_condition,
                    c.sto_401_2003_op_rep_pipe_count, c.sto_401_2003_time_limit_expl,
                    c.sto_401_2003_mean_time_fail, c.priority_cond,
                    c.priority_time_exp, c.priority_probab, c.priority_time_fai,
                    c.priority_summary, c.sto_095_2007_next_insp_scc,
                    c.sto_095_2007_next_insp, c.sto_095_2007_next_comp_insp
                    FROM pods.ili_inspection t LEFT JOIN pods.sto_ili_inspection_calc c
                    ON t.ili_inspection_id = c.ili_inspection_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="BEGIN_DATE" default="" type="DateTime"/>
                <param name="END_DATE" default="" type="DateTime"/>
                <param name="TOOL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TOOL_VENDOR_CL" default="UNKNOWN" type="String"/>
                <param name="SAMPLING_FREQUENCY" default="" type="String"/>
                <param name="RESOLUTION" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="SENSOR_GCL" default="UNKNOWN" type="String"/>
                <param name="SENSOR_SPACING_MIN" default="" type="Decimal"/>
                <param name="SENSOR_SPACING_MAX" default="" type="Decimal"/>
                <param name="MAX_TEMP" default="" type="Decimal"/>
                <param name="MIN_TEMP" default="" type="Decimal"/>
                <param name="AVG_TEMP" default="" type="Decimal"/>
                <param name="MAX_VELOCITY" default="" type="Decimal"/>
                <param name="MIN_VELOCITY" default="" type="Decimal"/>
                <param name="AVG_VELOCITY" default="" type="Decimal"/>
                <param name="RATED_MAX_VELOCITY" default="" type="Decimal"/>
                <param name="RATED_MAX_WT" default="" type="Decimal"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="CLUSTER_RULE_CL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.ILI_INSPECTION(ILI_INSPECTION_GUID,BEGIN_DATE,END_DATE,TOOL_TYPE_CL,TOOL_VENDOR_CL,SAMPLING_FREQUENCY,RESOLUTION,MODEL,SENSOR_GCL,SENSOR_SPACING_MIN,SENSOR_SPACING_MAX,MAX_TEMP,MIN_TEMP,AVG_TEMP,MAX_VELOCITY,MIN_VELOCITY,AVG_VELOCITY,RATED_MAX_VELOCITY,RATED_MAX_WT,START_ODOMETER,END_ODOMETER,CLUSTER_RULE_CL,COMMENTS,SOURCE_GCL)
                    VALUES(:ILI_INSPECTION_GUID,:BEGIN_DATE,:END_DATE,:TOOL_TYPE_CL,:TOOL_VENDOR_CL,:SAMPLING_FREQUENCY,:RESOLUTION,:MODEL,:SENSOR_GCL,:SENSOR_SPACING_MIN,:SENSOR_SPACING_MAX,:MAX_TEMP,:MIN_TEMP,:AVG_TEMP,:MAX_VELOCITY,:MIN_VELOCITY,:AVG_VELOCITY,:RATED_MAX_VELOCITY,:RATED_MAX_WT,:START_ODOMETER,:END_ODOMETER,:CLUSTER_RULE_CL,:COMMENTS,:SOURCE_GCL)
                    RETURNING ILI_INSPECTION_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="BEGIN_DATE" default="" type="DateTime"/>
                <param name="END_DATE" default="" type="DateTime"/>
                <param name="TOOL_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="TOOL_VENDOR_CL" default="UNKNOWN" type="String"/>
                <param name="SAMPLING_FREQUENCY" default="" type="String"/>
                <param name="RESOLUTION" default="" type="String"/>
                <param name="MODEL" default="" type="String"/>
                <param name="SENSOR_GCL" default="UNKNOWN" type="String"/>
                <param name="SENSOR_SPACING_MIN" default="" type="Decimal"/>
                <param name="SENSOR_SPACING_MAX" default="" type="Decimal"/>
                <param name="MAX_TEMP" default="" type="Decimal"/>
                <param name="MIN_TEMP" default="" type="Decimal"/>
                <param name="AVG_TEMP" default="" type="Decimal"/>
                <param name="MAX_VELOCITY" default="" type="Decimal"/>
                <param name="MIN_VELOCITY" default="" type="Decimal"/>
                <param name="AVG_VELOCITY" default="" type="Decimal"/>
                <param name="RATED_MAX_VELOCITY" default="" type="Decimal"/>
                <param name="RATED_MAX_WT" default="" type="Decimal"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="CLUSTER_RULE_CL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_INSPECTION
                    SET ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,BEGIN_DATE=:BEGIN_DATE,END_DATE=:END_DATE,TOOL_TYPE_CL=:TOOL_TYPE_CL,TOOL_VENDOR_CL=:TOOL_VENDOR_CL,SAMPLING_FREQUENCY=:SAMPLING_FREQUENCY,RESOLUTION=:RESOLUTION,MODEL=:MODEL,SENSOR_GCL=:SENSOR_GCL,SENSOR_SPACING_MIN=:SENSOR_SPACING_MIN,SENSOR_SPACING_MAX=:SENSOR_SPACING_MAX,MAX_TEMP=:MAX_TEMP,MIN_TEMP=:MIN_TEMP,AVG_TEMP=:AVG_TEMP,MAX_VELOCITY=:MAX_VELOCITY,MIN_VELOCITY=:MIN_VELOCITY,AVG_VELOCITY=:AVG_VELOCITY,RATED_MAX_VELOCITY=:RATED_MAX_VELOCITY,RATED_MAX_WT=:RATED_MAX_WT,START_ODOMETER=:START_ODOMETER,END_ODOMETER=:END_ODOMETER,CLUSTER_RULE_CL=:CLUSTER_RULE_CL,COMMENTS=:COMMENTS,SOURCE_GCL=:SOURCE_GCL
                    WHERE ILI_INSPECTION_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    no_integration EXCEPTION;
                    PRAGMA EXCEPTION_INIT(no_integration, -942);
                    BEGIN

                    BEGIN

                    /* Чистим GATE с учетом возможности отсутствия схемы GIS_INTEGRATION */

                    EXECUTE IMMEDIATE q'`DELETE FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'ILI_INSPECTION'
                    AND KEY_FIELDS = 'ILI_INSPECTION_ID'
                    AND KEY_VALUES = :VAR_INSPECTION_ID`'
                    USING :ID;

                    EXECUTE IMMEDIATE q'`DELETE FROM GIS_INTEGRATION50.GATE
                    WHERE TABLE_NAME = 'ILI_DATA'
                    AND KEY_FIELDS = 'ILI_DATA_ID'
                    AND KEY_VALUES = ANY (SELECT ILI_DATA_ID
                    FROM PODS.ILI_DATA
                    WHERE ILI_INSPECTION_ID = :VAR_INSPECTION_ID)`'
                    USING :ID;

                    EXCEPTION WHEN no_integration
                    THEN NULL;
                    WHEN OTHERS
                    THEN RAISE;
                    END;

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_INSPECTION_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_PIPE_LENGTH WHERE ILI_INSPECTION_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_INSPECTION_RANGE WHERE ILI_INSPECTION_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.STO_ILI_INSPECTION_CALC WHERE ILI_INSPECTION_ID = :ID);

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.STO_EHZ_CALC WHERE ILI_INSPECTION_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_ILI_DATA/'||CAST(ILI_DATA_ID AS VARCHAR(30))
                    FROM PODS.ILI_DATA
                    WHERE ILI_INSPECTION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_ILI_DATA/'||CAST(ILI_DATA_ID AS VARCHAR(30))
                    FROM PODS.ILI_DATA
                    WHERE ILI_INSPECTION_ID = :ID);

                    DELETE
                    FROM PODS.STO_ILI_DATA_CALC_ADV
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_DATA_CALC
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_CLUSTER_CALC_ADV
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_CLUSTER_CALC
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.STO_ILI_INSPECTION_CALC
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.STO_EHZ_CALC
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.ILI_DATA
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_ILI_PIPE_LENGTH/'||CAST(ILI_PIPE_LENGTH_ID AS VARCHAR(30))
                    FROM PODS.ILI_PIPE_LENGTH
                    WHERE ILI_INSPECTION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_ILI_PIPE_LENGTH/'||CAST(ILI_PIPE_LENGTH_ID AS VARCHAR(30))
                    FROM PODS.ILI_PIPE_LENGTH
                    WHERE ILI_INSPECTION_ID = :ID);

                    DELETE
                    FROM PODS.ILI_PIPE_LENGTH
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_ILI_INSPECTION_RANGE/'||CAST(ILI_INSPECTION_RANGE_ID AS VARCHAR(30))
                    FROM PODS.ILI_INSPECTION_RANGE
                    WHERE ILI_INSPECTION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_ILI_INSPECTION_RANGE/'||CAST(ILI_INSPECTION_RANGE_ID AS VARCHAR(30))
                    FROM PODS.ILI_INSPECTION_RANGE
                    WHERE ILI_INSPECTION_ID = :ID);

                    DELETE
                    FROM PODS.ILI_INSPECTION_RANGE
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_ILI_CLUSTER/'||CAST(ILI_CLUSTER_ID AS VARCHAR(30))
                    FROM PODS.ILI_CLUSTER
                    WHERE ILI_INSPECTION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_ILI_CLUSTER/'||CAST(ILI_CLUSTER_ID AS VARCHAR(30))
                    FROM PODS.ILI_CLUSTER
                    WHERE ILI_INSPECTION_ID = :ID);


                    DELETE
                    FROM PODS.ILI_CLUSTER
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_INSPECTION_CONTACT/'||CAST(ILI_INSPECTION_ID AS VARCHAR(30))||';'||CAST(CONTACT_ID AS VARCHAR(30))
                    FROM PODS.INSPECTION_CONTACT
                    WHERE ILI_INSPECTION_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_INSPECTION_CONTACT/'||CAST(ILI_INSPECTION_ID AS VARCHAR(30))||';'||CAST(CONTACT_ID AS VARCHAR(30))
                    FROM PODS.INSPECTION_CONTACT
                    WHERE ILI_INSPECTION_ID = :ID);

                    DELETE
                    FROM PODS.INSPECTION_CONTACT
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM PODS.ILI_INSPECTION
                    WHERE ILI_INSPECTION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_ILI_INSPECTION/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_ILI_INSPECTION/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LINE" schema="PODS" id="PODS_LINE" comment="PODS.LINE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT LINE_ID ID, t.* FROM PODS.LINE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="LINE_GUID" default="" type="String"/>
                <param name="DESIGNATOR" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="OPERATING_STATUS_GCL" default="UNKNOWN" type="String"/>
                <param name="SYSTEM_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSTATE_LF" default="" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.LINE(LINE_GUID,DESIGNATOR,DESCRIPTION,TYPE_CL,PRODUCT_TYPE_SCL,PRODUCT_SUBTYPE_SCL,OPERATING_STATUS_GCL,SYSTEM_TYPE_CL,INTERSTATE_LF)
                    VALUES(:LINE_GUID,:DESIGNATOR,:DESCRIPTION,:TYPE_CL,:PRODUCT_TYPE_SCL,:PRODUCT_SUBTYPE_SCL,:OPERATING_STATUS_GCL,:SYSTEM_TYPE_CL,:INTERSTATE_LF)
                    RETURNING LINE_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="LINE_GUID" default="" type="String"/>
                <param name="DESIGNATOR" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="PRODUCT_SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="OPERATING_STATUS_GCL" default="UNKNOWN" type="String"/>
                <param name="SYSTEM_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="INTERSTATE_LF" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LINE
                    SET LINE_GUID=:LINE_GUID,DESIGNATOR=:DESIGNATOR,DESCRIPTION=:DESCRIPTION,TYPE_CL=:TYPE_CL,PRODUCT_TYPE_SCL=:PRODUCT_TYPE_SCL,PRODUCT_SUBTYPE_SCL=:PRODUCT_SUBTYPE_SCL,OPERATING_STATUS_GCL=:OPERATING_STATUS_GCL,SYSTEM_TYPE_CL=:SYSTEM_TYPE_CL,INTERSTATE_LF=:INTERSTATE_LF
                    WHERE LINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.STATION_POINT
                    SET ROUTE_ID  = 0
                    ,LINE_ID = 0
                    ,SERIES = 0
                    WHERE LINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_LINE_HIERARCHY/'||CAST(LINE_HIERARCHY_ID AS VARCHAR(30))
                    FROM PODS.LINE_HIERARCHY
                    WHERE PARENT_LINE_ID = :ID
                    OR CHILD_LINE_LINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_LINE_HIERARCHY/'||CAST(LINE_HIERARCHY_ID AS VARCHAR(30))
                    FROM PODS.LINE_HIERARCHY
                    WHERE PARENT_LINE_ID = :ID
                    OR CHILD_LINE_LINE_ID = :ID);

                    DELETE
                    FROM PODS.LINE_HIERARCHY
                    WHERE PARENT_LINE_ID = :ID
                    OR CHILD_LINE_LINE_ID = :ID;


                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_LINE_INTEREST/'||COMPANY_GCL||';'||CAST(LINE_ID  AS VARCHAR(30))
                    FROM PODS.LINE_INTEREST
                    WHERE LINE_ID  = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_LINE_INTEREST/'||COMPANY_GCL||';'||CAST(LINE_ID  AS VARCHAR(30))
                    FROM PODS.LINE_INTEREST
                    WHERE LINE_ID  = :ID);

                    DELETE
                    FROM PODS.LINE_INTEREST
                    WHERE LINE_ID = :ID;


                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PIPE_SYSTEM_BOUNDARY/'
                    ||CAST(PIPE_SYSTEM_ID AS VARCHAR(30))
                    ||';'||CAST(LINE_ID AS VARCHAR(30))
                    ||';'||CAST(KM_BEGIN AS VARCHAR(30))
                    ||';'||CAST(KM_END AS VARCHAR(30))
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE LINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PIPE_SYSTEM_BOUNDARY/'
                    ||CAST(PIPE_SYSTEM_ID AS VARCHAR(30))
                    ||';'||CAST(LINE_ID AS VARCHAR(30))
                    ||';'||CAST(KM_BEGIN AS VARCHAR(30))
                    ||';'||CAST(KM_END AS VARCHAR(30))
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE LINE_ID = :ID);

                    DELETE
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE LINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_SERIES/'||CAST(SERIES_ID AS VARCHAR(30))
                    FROM PODS.SERIES
                    WHERE LINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_SERIES/'||CAST(SERIES_ID AS VARCHAR(30))
                    FROM PODS.SERIES
                    WHERE LINE_ID = :ID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_NPMS_ROUTE/'||CAST(ROUTE_ID AS VARCHAR(30))
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_NPMS_ROUTE/'||CAST(ROUTE_ID AS VARCHAR(30))
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID);

                    DELETE
                    FROM PODS.NPMS_ROUTE
                    WHERE ROUTE_ID IN (SELECT ROUTE_ID
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID);

                    DELETE
                    FROM PODS.SERIES
                    WHERE LINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_ROUTE/'||CAST(ROUTE_ID AS VARCHAR(30))
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_ROUTE/'||CAST(ROUTE_ID AS VARCHAR(30))
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID);

                    DELETE
                    FROM PODS.ROUTE
                    WHERE LINE_ID = :ID;

                    DELETE
                    FROM PODS.LINE
                    WHERE LINE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_LINE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_LINE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="LINE_INTEREST" schema="PODS" id="PODS_LINE_INTEREST" comment="PODS.LINE_INTEREST">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT LINE_ID||';'||COMPANY_GCL ID, t.* FROM PODS.LINE_INTEREST t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="LINE_ID" default="0" type="Decimal"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PERCENT_INTEREST" default="" type="Decimal"/>
                <param name="ID" direction="Output" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.LINE_INTEREST(LINE_ID,COMPANY_GCL,TYPE_CL,PERCENT_INTEREST)
                    VALUES(:LINE_ID,:COMPANY_GCL,:TYPE_CL,:PERCENT_INTEREST)
                    RETURNING LINE_ID||';'||COMPANY_GCL INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="LINE_ID" default="0" type="Decimal"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="PERCENT_INTEREST" default="" type="Decimal"/>
                <param name="ID" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LINE_INTEREST
                    SET LINE_ID=:LINE_ID,COMPANY_GCL=:COMPANY_GCL,TYPE_CL=:TYPE_CL,PERCENT_INTEREST=:PERCENT_INTEREST
                    WHERE LINE_ID||';'||COMPANY_GCL = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_LINE_INTEREST'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.LINE_INTEREST
                    WHERE LINE_ID||';'||COMPANY_GCL = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_LINE_INTEREST/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_LINE_INTEREST/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MONUMENT" schema="PODS" id="PODS_MONUMENT" comment="PODS.MONUMENT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT MONUMENT_ID ID, t.* FROM PODS.MONUMENT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="MONUMENT_GUID" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.MONUMENT(MONUMENT_GUID,COORDINATE_ID,COORDINATE_GUID,REF_EVENT_ID,REF_EVENT_GUID,TYPE_CL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:MONUMENT_GUID,:COORDINATE_ID,:COORDINATE_GUID,:REF_EVENT_ID,:REF_EVENT_GUID,:TYPE_CL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING MONUMENT_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="MONUMENT_GUID" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MONUMENT
                    SET MONUMENT_GUID=:MONUMENT_GUID,COORDINATE_ID=:COORDINATE_ID,COORDINATE_GUID=:COORDINATE_GUID,REF_EVENT_ID=:REF_EVENT_ID,REF_EVENT_GUID=:REF_EVENT_GUID,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE MONUMENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MONUMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.MONUMENT
                    WHERE MONUMENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_MONUMENT/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_MONUMENT/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="UNIT" schema="PODS" id="PODS_UNIT" comment="PODS.UNIT">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT UNIT_ID ID, t.* FROM PODS.UNIT t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="UNIT_GUID" default="" type="String"/>
                <param name="COMPRESSOR_STATION_ID" default="" type="Decimal"/>
                <param name="COMPRESSOR_STATION_GUID" default="" type="String"/>
                <param name="COMPRESSOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DRIVE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="INTEGRAL_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.UNIT(UNIT_GUID,COMPRESSOR_STATION_ID,COMPRESSOR_STATION_GUID,COMPRESSOR_TYPE_CL,DRIVE_TYPE_CL,NAME,DESCRIPTION,INTEGRAL_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:UNIT_GUID,:COMPRESSOR_STATION_ID,:COMPRESSOR_STATION_GUID,:COMPRESSOR_TYPE_CL,:DRIVE_TYPE_CL,:NAME,:DESCRIPTION,:INTEGRAL_LF,:SOURCE_GCL,:COMMENTS)
                    RETURNING UNIT_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="UNIT_GUID" default="" type="String"/>
                <param name="COMPRESSOR_STATION_ID" default="" type="Decimal"/>
                <param name="COMPRESSOR_STATION_GUID" default="" type="String"/>
                <param name="COMPRESSOR_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DRIVE_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="INTEGRAL_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.UNIT
                    SET UNIT_GUID=:UNIT_GUID,COMPRESSOR_STATION_ID=:COMPRESSOR_STATION_ID,COMPRESSOR_STATION_GUID=:COMPRESSOR_STATION_GUID,COMPRESSOR_TYPE_CL=:COMPRESSOR_TYPE_CL,DRIVE_TYPE_CL=:DRIVE_TYPE_CL,NAME=:NAME,DESCRIPTION=:DESCRIPTION,INTEGRAL_LF=:INTEGRAL_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE UNIT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_UNIT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.CENTRIFUGAL_COMPRESSOR
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_CYLINDER
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_EMISSIONS
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.COMPRESSOR_POCKET
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.ELECTRIC_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.RECIPROCATING_COMPRESSOR
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.RECIPROCATING_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    UPDATE PODS.TURBINE_DRIVE
                    SET UNIT_ID = NULL
                    WHERE UNIT_ID = :ID;

                    DELETE
                    FROM PODS.UNIT
                    WHERE COMPRESSOR_STATION_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_UNIT/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_UNIT/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="WORK_ORDER" schema="PODS" id="PODS_WORK_ORDER" comment="PODS.WORK_ORDER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT WORK_ORDER_ID ID, t.* FROM PODS.WORK_ORDER t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="WORK_ORDER_NUMBER" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="AFE" default="" type="String"/>
                <param name="STARTING_DATE" default="" type="DateTime"/>
                <param name="ENDING_DATE" default="" type="DateTime"/>
                <param name="ORDERED_DATE" default="" type="DateTime"/>
                <param name="PLANNED_START_DATE" default="" type="DateTime"/>
                <param name="PLANNED_END_DATE" default="" type="DateTime"/>
                <param name="VENDOR_COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="VENDOR_WORK_NUMBER" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="UNKNOWN" type="String"/>
                <param name="ID" direction="Output" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.WORK_ORDER(WORK_ORDER_GUID,WORK_ORDER_NUMBER,COMPANY_GCL,TYPE_CL,DESCRIPTION,AFE,STARTING_DATE,ENDING_DATE,ORDERED_DATE,PLANNED_START_DATE,PLANNED_END_DATE,VENDOR_COMPANY_GCL,VENDOR_WORK_NUMBER,SOURCE_GCL,COMMENTS)
                    VALUES(:WORK_ORDER_GUID,:WORK_ORDER_NUMBER,:COMPANY_GCL,:TYPE_CL,:DESCRIPTION,:AFE,:STARTING_DATE,:ENDING_DATE,:ORDERED_DATE,:PLANNED_START_DATE,:PLANNED_END_DATE,:VENDOR_COMPANY_GCL,:VENDOR_WORK_NUMBER,:SOURCE_GCL,:COMMENTS)
                    RETURNING WORK_ORDER_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="WORK_ORDER_NUMBER" default="" type="String"/>
                <param name="COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="AFE" default="" type="String"/>
                <param name="STARTING_DATE" default="" type="DateTime"/>
                <param name="ENDING_DATE" default="" type="DateTime"/>
                <param name="ORDERED_DATE" default="" type="DateTime"/>
                <param name="PLANNED_START_DATE" default="" type="DateTime"/>
                <param name="PLANNED_END_DATE" default="" type="DateTime"/>
                <param name="VENDOR_COMPANY_GCL" default="UNKNOWN" type="String"/>
                <param name="VENDOR_WORK_NUMBER" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.WORK_ORDER
                    SET WORK_ORDER_GUID=:WORK_ORDER_GUID,WORK_ORDER_NUMBER=:WORK_ORDER_NUMBER,COMPANY_GCL=:COMPANY_GCL,TYPE_CL=:TYPE_CL,DESCRIPTION=:DESCRIPTION,AFE=:AFE,STARTING_DATE=:STARTING_DATE,ENDING_DATE=:ENDING_DATE,ORDERED_DATE=:ORDERED_DATE,PLANNED_START_DATE=:PLANNED_START_DATE,PLANNED_END_DATE=:PLANNED_END_DATE,VENDOR_COMPANY_GCL=:VENDOR_COMPANY_GCL,VENDOR_WORK_NUMBER=:VENDOR_WORK_NUMBER,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE WORK_ORDER_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_WORK_ORDER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.ILI_INSPECTION_RANGE
                    SET WORK_ORDER_ID = NULL
                    WHERE WORK_ORDER_ID = :ID;

                    UPDATE PODS.MAINTENANCE
                    SET WORK_ORDER_ID = NULL
                    WHERE WORK_ORDER_ID = :ID;

                    DELETE
                    FROM PODS.WORK_ORDER
                    WHERE WORK_ORDER_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_WORK_ORDER/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_WORK_ORDER/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ROUTE" schema="PODS" id="PODS_ROUTE" comment="PODS.ROUTE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT r.ROUTE_ID ID
                    , r.*
                    ,s.SERIES_ID
                    ,s.DESCRIPTION AS SERIES_DESCRIPTION
                    ,s.SERIES
                    ,s.STATION_BEGIN
                    ,s.STATION_END
                    ,s.ASCENDING
                    FROM PODS.ROUTE r
                    JOIN PODS.SERIES s ON s.ROUTE_ID=r.ROUTE_ID
                    WHERE r.route_id!=0) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ROUTE_GUID" default="" type="String"/>
                <param name="LINE_ID" default="" type="Decimal"/>
                <param name="LINE_GUID" default="" type="String"/>
                <param name="EVENT_ID" default="" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SEQUENCE" default="" type="Decimal"/>
                <param name="TYPE_CL" default="" type="String"/>
                <param name="OPERATING_STATUS_GCL" default="" type="String"/>
                <param name="CURRENT_INDICATOR_LF" default="" type="String"/>
                <param name="PREVIOUS_ROUTE_ID" default="" type="Decimal"/>
                <param name="PREVIOUS_ROUTE_GUID" default="" type="String"/>
                <param name="EFFECTIVE_TO_DATE" default="" type="DateTime"/>
                <param name="ORIGINAL_ROUTE_ID" default="" type="Decimal"/>
                <param name="ORIGINAL_ROUTE_GUID" default="" type="String"/>
                <param name="PODS_USER" default="" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="SERIES_ID" default="" type="Int64"/>
                <param name="SERIES_DESCRIPTION" default="" type="String"/>
                <param name="SERIES" default="10" type="Decimal"/>
                <param name="STATION_BEGIN" default="0" type="Double"/>
                <param name="STATION_END" default="0" type="Double"/>
                <param name="ASCENDING" default="1" type="Decimal"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="USER_LOGIN" type="String" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.ROUTE(ROUTE_GUID,LINE_ID,LINE_GUID,EVENT_ID,EVENT_GUID,DESCRIPTION,SEQUENCE,TYPE_CL,OPERATING_STATUS_GCL,CURRENT_INDICATOR_LF,PREVIOUS_ROUTE_ID,PREVIOUS_ROUTE_GUID,EFFECTIVE_FROM_DATE,EFFECTIVE_TO_DATE,ORIGINAL_ROUTE_ID,ORIGINAL_ROUTE_GUID,PODS_USER,CREATE_DATE)
                    VALUES(:ROUTE_GUID,:LINE_ID,:LINE_GUID,:EVENT_ID,:EVENT_GUID,:DESCRIPTION,:SEQUENCE,:TYPE_CL,:OPERATING_STATUS_GCL,:CURRENT_INDICATOR_LF,:PREVIOUS_ROUTE_ID,:PREVIOUS_ROUTE_GUID,SYSDATE,:EFFECTIVE_TO_DATE,:ORIGINAL_ROUTE_ID,:ORIGINAL_ROUTE_GUID,:USER_LOGIN,SYSDATE)
                    RETURNING ROUTE_ID INTO :ID;

                    INSERT INTO PODS.SERIES(DESCRIPTION, LINE_ID, ASCENDING, ROUTE_ID, SERIES, STATION_BEGIN, STATION_END, CURRENT_INDICATOR_LF, EFFECTIVE_FROM_DATE, PODS_USER, CREATE_DATE)
                    VALUES(:DESCRIPTION, :LINE_ID, :ASCENDING, :ID, :SERIES, :STATION_BEGIN, :STATION_END, 'Y', SYSDATE,:USER_LOGIN, SYSDATE);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="SYS_OBJ_ID" type="Int64" direction="Input"/>
                <param name="ROUTE_GUID" default="" type="String" direction="Input"/>
                <param name="LINE_ID" default="" type="Decimal" direction="Input"/>
                <param name="LINE_GUID" default="" type="String" direction="Input"/>
                <param name="EVENT_ID" default="" type="Decimal" direction="Input"/>
                <param name="EVENT_GUID" default="" type="String" direction="Input"/>
                <param name="DESCRIPTION" default="" type="String" direction="Input"/>
                <param name="SEQUENCE" default="" type="Decimal" direction="Input"/>
                <param name="TYPE_CL" default="" type="String" direction="Input"/>
                <param name="OPERATING_STATUS_GCL" default="" type="String" direction="Input"/>
                <param name="CURRENT_INDICATOR_LF" default="" type="String" direction="Input"/>
                <param name="PREVIOUS_ROUTE_ID" default="" type="Decimal" direction="Input"/>
                <param name="PREVIOUS_ROUTE_GUID" default="" type="String" direction="Input"/>
                <param name="EFFECTIVE_FROM_DATE" default="" type="DateTime" direction="Input"/>
                <param name="EFFECTIVE_TO_DATE" default="" type="DateTime" direction="Input"/>
                <param name="ORIGINAL_ROUTE_ID" default="" type="Decimal" direction="Input"/>
                <param name="ORIGINAL_ROUTE_GUID" default="" type="String" direction="Input"/>
                <param name="PODS_USER" default="" type="String" direction="Input"/>
                <param name="CREATE_DATE" default="" type="DateTime" direction="Input"/>
                <param name="SERIES_ID" default="" type="Int64" direction="InputOutput"/>
                <param name="SERIES_DESCRIPTION" default="" type="String" direction="InputOutput"/>
                <param name="SERIES" default="10" type="Double" direction="InputOutput"/>
                <param name="STATION_BEGIN" default="0" type="Double" direction="InputOutput"/>
                <param name="STATION_END" default="0" type="Double" direction="InputOutput"/>
                <param name="ASCENDING" default="1" type="Int64" direction="InputOutput"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ROUTE r
                    SET r.ROUTE_GUID=:ROUTE_GUID,r.LINE_ID=:LINE_ID,r.LINE_GUID=:LINE_GUID,r.EVENT_ID=:EVENT_ID,r.EVENT_GUID=:EVENT_GUID,r.DESCRIPTION=:DESCRIPTION,r.SEQUENCE=:SEQUENCE,r.TYPE_CL=:TYPE_CL,r.OPERATING_STATUS_GCL=:OPERATING_STATUS_GCL,r.CURRENT_INDICATOR_LF=:CURRENT_INDICATOR_LF,r.PREVIOUS_ROUTE_ID=:PREVIOUS_ROUTE_ID,r.PREVIOUS_ROUTE_GUID=:PREVIOUS_ROUTE_GUID,r.EFFECTIVE_FROM_DATE=:EFFECTIVE_FROM_DATE,r.EFFECTIVE_TO_DATE=:EFFECTIVE_TO_DATE,r.ORIGINAL_ROUTE_ID=:ORIGINAL_ROUTE_ID,r.ORIGINAL_ROUTE_GUID=:ORIGINAL_ROUTE_GUID,r.PODS_USER=:PODS_USER,r.CREATE_DATE=:CREATE_DATE
                    WHERE r.ROUTE_ID = :SYS_OBJ_ID;

                    UPDATE PODS.SERIES s
                    SET s.DESCRIPTION=:SERIES_DESCRIPTION,s.SERIES=:SERIES,s.STATION_BEGIN=:STATION_BEGIN,s.STATION_END=:STATION_END,s.ASCENDING=:ASCENDING,s.LINE_ID=:LINE_ID,s.LINE_GUID=:LINE_GUID
                    WHERE s.ROUTE_ID = :SYS_OBJ_ID;

                    UPDATE PODS.STATION_POINT s
                    SET s.LINE_ID=:LINE_ID,s.LINE_GUID=:LINE_GUID
                    WHERE s.ROUTE_ID = :SYS_OBJ_ID;          END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ROUTE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE STATION_ID_BEGIN IN (SELECT STATION_ID
                    FROM PODS.STATION_POINT
                    WHERE ROUTE_ID = :ID )
                    OR STATION_ID_END   IN (SELECT STATION_ID
                    FROM PODS.STATION_POINT
                    WHERE ROUTE_ID = :ID );

                    UPDATE PODS.STATION_POINT
                    SET ROUTE_ID  = 0
                    ,LINE_ID = 0
                    ,SERIES = 0
                    ,SERIES_ID=0
                    ,MEASURE = 0
                    WHERE ROUTE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_NPMS_ROUTE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_NPMS_ROUTE/'||CAST(:ID AS VARCHAR(30));

                    DELETE
                    FROM PODS.NPMS_ROUTE
                    WHERE ROUTE_ID = :ID;


                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_SERIES/'||CAST(SERIES_ID AS VARCHAR(30))
                    FROM PODS.SERIES
                    WHERE ROUTE_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_SERIES/'||CAST(SERIES_ID AS VARCHAR(30))
                    FROM PODS.SERIES
                    WHERE ROUTE_ID = :ID);

                    UPDATE PODS.SERIES
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE ROUTE_ID = :ID;

                    UPDATE PODS.ROUTE
                    SET CURRENT_INDICATOR_LF = 'N'
                    WHERE ROUTE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_ROUTE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_ROUTE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SITE" schema="PODS" id="PODS_SITE" comment="PODS.SITE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT s.site_id ID, s.* FROM PODS.SITE s) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="SITE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OWNER" default="" type="String"/>
                <param name="OPERATOR" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="FRP_NUMBER" default="" type="Decimal"/>
                <param name="CITY" default="" type="String"/>
                <param name="STATE_GCL" default="UNKNOWN" type="String"/>
                <param name="LOCATION_ID" default="-1" type="Decimal"/>
                <param name="LOCATION_GUID" default="" type="String"/>
                <param name="SHAPE_ID" default="" type="Decimal"/>
                <param name="SHAPE_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SITE(SITE_GUID,TYPE_CL,NAME,OWNER,OPERATOR,CONTACT_ID,CONTACT_GUID,FRP_NUMBER,CITY,STATE_GCL,LOCATION_ID,LOCATION_GUID,SHAPE_ID,SHAPE_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:SITE_GUID,:TYPE_CL,:NAME,:OWNER,:OPERATOR,:CONTACT_ID,:CONTACT_GUID,:FRP_NUMBER,:CITY,:STATE_GCL,:LOCATION_ID,:LOCATION_GUID,:SHAPE_ID,:SHAPE_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING SITE_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="SITE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OWNER" default="" type="String"/>
                <param name="OPERATOR" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="FRP_NUMBER" default="" type="Decimal"/>
                <param name="CITY" default="" type="String"/>
                <param name="STATE_GCL" default="" type="String"/>
                <param name="LOCATION_ID" default="" type="Decimal"/>
                <param name="LOCATION_GUID" default="" type="String"/>
                <param name="SHAPE_ID" default="" type="Decimal"/>
                <param name="SHAPE_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SITE
                    SET SITE_GUID=:SITE_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,OWNER=:OWNER,OPERATOR=:OPERATOR,CONTACT_ID=:CONTACT_ID,CONTACT_GUID=:CONTACT_GUID,FRP_NUMBER=:FRP_NUMBER,CITY=:CITY,STATE_GCL=:STATE_GCL,LOCATION_ID=:LOCATION_ID,LOCATION_GUID=:LOCATION_GUID,SHAPE_ID=:SHAPE_ID,SHAPE_GUID=:SHAPE_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE SITE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SITE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    UPDATE PODS.STRUCTURE
                    SET SITE_ADDRESS_ID = NULL
                    WHERE SITE_ADDRESS_ID = ANY (SELECT SITE_ADDRESS_ID
                    FROM PODS.SITE
                    WHERE SITE_ID = :ID);


                    UPDATE PODS.POPULATED_AREA
                    SET SITE_ADDRESS_ID = NULL
                    WHERE SITE_ADDRESS_ID = ANY (SELECT SITE_ADDRESS_ID
                    FROM PODS.SITE
                    WHERE SITE_ID = :ID);

                    UPDATE PODS.OFFLINE_EVENT
                    SET SITE_ID = NULL
                    WHERE SITE_ID = :ID;

                    DELETE
                    FROM PODS.SITE
                    WHERE SITE_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_SITE/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_SITE/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SRV_DISTRICT_GCL" schema="PODS" id="PODS_SRV_DISTRICT_GCL" comment="PODS.SRV_DISTRICT_GCL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT d.SRV_DISTRICT_ID ID, d.* FROM PODS.SRV_DISTRICT_GCL d) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="SRV_DISTRICT_GUID" default="" type="String"/>
                <param name="COMPANY_GCL" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.SRV_DISTRICT_GCL(SRV_DISTRICT_GUID,COMPANY_GCL,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:SRV_DISTRICT_GUID,:COMPANY_GCL,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING SRV_DISTRICT_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="SRV_DISTRICT_GUID" default="" type="String"/>
                <param name="COMPANY_GCL" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="GID" default="" type="Decimal"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SRV_DISTRICT_GCL
                    SET SRV_DISTRICT_GUID=:SRV_DISTRICT_GUID,COMPANY_GCL=:COMPANY_GCL,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS,GID=:GID
                    WHERE SRV_DISTRICT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SRV_DISTRICT_GCL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.LOCATION SET SRV_DISTRICT_GCL = 0
                    WHERE SRV_DISTRICT_GCL = :ID;

                    DELETE FROM PODS.SRV_DISTRICT_GCL
                    WHERE SRV_DISTRICT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SRV_DISTRICT_GCL/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SRV_DISTRICT_GCL/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_SYSTEM_CL" schema="PODS" id="PODS_PIPE_SYSTEM_CL" comment="PODS.PIPE_SYSTEM_CL">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT d.PIPE_SYSTEM_ID ID, d.* FROM PODS.PIPE_SYSTEM_CL d) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="PIPE_SYSTEM_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.PIPE_SYSTEM_CL(PIPE_SYSTEM_GUID,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:PIPE_SYSTEM_GUID,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING PIPE_SYSTEM_ID INTO  :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="PIPE_SYSTEM_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.PIPE_SYSTEM_CL
                    SET PIPE_SYSTEM_GUID=:PIPE_SYSTEM_GUID,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE PIPE_SYSTEM_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_CL'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN

                    DELETE
                    FROM WEB50.PS_INDEX_OBJ
                    WHERE PIPE_SYSTEM_ID = :ID;

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID IN (SELECT 'PODS_PIPE_SYSTEM_BOUNDARY/'||CAST(PIPE_SYSTEM_ID AS VARCHAR(30))||';'
                    ||CAST(LINE_ID AS VARCHAR(30))||';'
                    ||CAST(KM_BEGIN AS VARCHAR(30))||';'
                    ||CAST(KM_END AS VARCHAR(30))||';'
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE PIPE_SYSTEM_ID = :ID)
                    OR RIGHT_OBJ_ID IN (SELECT 'PODS_PIPE_SYSTEM_BOUNDARY/'||CAST(PIPE_SYSTEM_ID AS VARCHAR(30))||';'
                    ||CAST(LINE_ID AS VARCHAR(30))||';'
                    ||CAST(KM_BEGIN AS VARCHAR(30))||';'
                    ||CAST(KM_END AS VARCHAR(30))||';'
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE PIPE_SYSTEM_ID = :ID);


                    DELETE
                    FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE PIPE_SYSTEM_ID = :ID;

                    DELETE
                    FROM PODS.PIPE_SYSTEM_CL
                    WHERE PIPE_SYSTEM_ID = :ID;

                    DELETE
                    FROM PODS.PIPE_SYSTEM_AXIS_G  ag
                    WHERE NOT EXISTS (SELECT 1
                    FROM PODS.PIPE_SYSTEM_CL ps
                    WHERE PS.AXIS_GID = AG.GID);

                    DELETE
                    FROM PODS.PIPE_SYSTEM_BUFFER_G bg
                    WHERE NOT EXISTS (SELECT 1
                    FROM PODS.PIPE_SYSTEM_CL ps
                    WHERE PS.BUFFER_GID = BG.GID);

                    DELETE
                    FROM WEB50.LNK_GATE
                    WHERE LEFT_OBJ_ID = 'PODS_PIPE_SYSTEM_CL/'||CAST(:ID AS VARCHAR(30))
                    OR RIGHT_OBJ_ID = 'PODS_PIPE_SYSTEM_CL/'||CAST(:ID AS VARCHAR(30));

                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_DATA" schema="PODS" id="PODS_ILI_DATA" comment="PODS.ILI_DATA">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.cluster_comment, c.r_595_2011_repair_method,
                    c.r_595_2011_depth_abrasion, c.r_595_2011_square_abrasion,
                    c.r_595_2011_length_pipe_repair, c.r_595_2011_comment,
                    c.sto_112_2007_assurance_factor,
                    c.sto_112_2007_destruct_pressure, c.sto_112_2007_allow_pressure,
                    c.sto_112_2007_performance_eval,
                    c.sto_173_2007_critical_pressure, c.sto_173_2007_danger_degree,
                    c.sto_173_2007_safe_pressure, c.sto_292_2007_danger_rank,
                    c.sto_401_2009_fail_probability
                    FROM pods.ili_data t JOIN pods.ili_anomaly_type_cl ia
                    ON t.anomaly_type_cl = ia.code AND ia.category_cl = 1
                    LEFT JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    e_id NUMERIC (16, 0);
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_DATA',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO e_id;

                    INSERT INTO PODS.ILI_DATA(EVENT_ID,ILI_DATA_GUID,EVENT_GUID,WELD_NUMBER,US_WELD_NUMBER,DATE_COLLECTED,ABSOLUTE_ODOMETER,US_WELD_ODOMETER,US_WELD_DISTANCE,DS_WELD_ODOMETER,DS_WELD_DISTANCE,US_AGM_DISTANCE,DS_AGM_DISTANCE,US_AGM_REFERENCE,DS_AGM_REFERENCE,RAW_REFERENCE_KEY,MAX_DEPTH_PCT,MAX_DEPTH_MEASURED,AVERAGE_DEPTH,LENGTH,WIDTH,ORIENTATION_DEG,ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL,MAX_DIAMETER,MIN_DIAMETER,OVALITY,AXIAL_OVALITY,SEAM_ORIENTATION,MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS,PIPE_SMYS,B31G_MAOP,B31G_ERF,MODB31G_MAOP,MODB31G_ERF,BPR_CALCULATED,BPR_PIG,BURST_PRESSURE,BPR_VARIANCE,RPR_CALCULATED,RPR_PIG,RPR_VARIANCE,MILEPOST,COORDINATE_ID,COORDINATE_GUID,CERTAINTY_INTERVAL,DEPTH_ACCURACY,LENGTH_ACCURACY,WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION,CONTROL_POINT_LF,ILI_CLUSTER_ID,ILI_CLUSTER_GUID,REF_EVENT_ID,REF_EVENT_GUID,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,STATION_REPORTED,CALIBRATED_MEASURE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(e_id,:ILI_DATA_GUID,:EVENT_GUID,:WELD_NUMBER,:US_WELD_NUMBER,:DATE_COLLECTED,:ABSOLUTE_ODOMETER,:US_WELD_ODOMETER,:US_WELD_DISTANCE,:DS_WELD_ODOMETER,:DS_WELD_DISTANCE,:US_AGM_DISTANCE,:DS_AGM_DISTANCE,:US_AGM_REFERENCE,:DS_AGM_REFERENCE,:RAW_REFERENCE_KEY,:MAX_DEPTH_PCT,:MAX_DEPTH_MEASURED,:AVERAGE_DEPTH,:LENGTH,:WIDTH,:ORIENTATION_DEG,:ANOMALY_TYPE_CL,:INTERNAL_EXTERNAL_CL,:ANOMALY_EXTENSION_CL,:MAX_DIAMETER,:MIN_DIAMETER,:OVALITY,:AXIAL_OVALITY,:SEAM_ORIENTATION,:MEASURED_WALL_THICKNESS,:NOMINAL_WALL_THICKNESS,:PIPE_SMYS,:B31G_MAOP,:B31G_ERF,:MODB31G_MAOP,:MODB31G_ERF,:BPR_CALCULATED,:BPR_PIG,:BURST_PRESSURE,:BPR_VARIANCE,:RPR_CALCULATED,:RPR_PIG,:RPR_VARIANCE,:MILEPOST,:COORDINATE_ID,:COORDINATE_GUID,:CERTAINTY_INTERVAL,:DEPTH_ACCURACY,:LENGTH_ACCURACY,:WIDTH_ACCURACY,:WITHIN_SPECIFICATION_LF,:FEATURE_DESCRIPTION,:CONTROL_POINT_LF,:ILI_CLUSTER_ID,:ILI_CLUSTER_GUID,:REF_EVENT_ID,:REF_EVENT_GUID,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:STATION_REPORTED,:CALIBRATED_MEASURE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING ILI_DATA_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_DATA
                    SET ILI_DATA_GUID=:ILI_DATA_GUID,EVENT_GUID=:EVENT_GUID,WELD_NUMBER=:WELD_NUMBER,US_WELD_NUMBER=:US_WELD_NUMBER,DATE_COLLECTED=:DATE_COLLECTED,ABSOLUTE_ODOMETER=:ABSOLUTE_ODOMETER,US_WELD_ODOMETER=:US_WELD_ODOMETER,US_WELD_DISTANCE=:US_WELD_DISTANCE,DS_WELD_ODOMETER=:DS_WELD_ODOMETER,DS_WELD_DISTANCE=:DS_WELD_DISTANCE,US_AGM_DISTANCE=:US_AGM_DISTANCE,DS_AGM_DISTANCE=:DS_AGM_DISTANCE,US_AGM_REFERENCE=:US_AGM_REFERENCE,DS_AGM_REFERENCE=:DS_AGM_REFERENCE,RAW_REFERENCE_KEY=:RAW_REFERENCE_KEY,MAX_DEPTH_PCT=:MAX_DEPTH_PCT,MAX_DEPTH_MEASURED=:MAX_DEPTH_MEASURED,AVERAGE_DEPTH=:AVERAGE_DEPTH,LENGTH=:LENGTH,WIDTH=:WIDTH,ORIENTATION_DEG=:ORIENTATION_DEG,ANOMALY_TYPE_CL=:ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL=:INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL=:ANOMALY_EXTENSION_CL,MAX_DIAMETER=:MAX_DIAMETER,MIN_DIAMETER=:MIN_DIAMETER,OVALITY=:OVALITY,AXIAL_OVALITY=:AXIAL_OVALITY,SEAM_ORIENTATION=:SEAM_ORIENTATION,MEASURED_WALL_THICKNESS=:MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS=:NOMINAL_WALL_THICKNESS,PIPE_SMYS=:PIPE_SMYS,B31G_MAOP=:B31G_MAOP,B31G_ERF=:B31G_ERF,MODB31G_MAOP=:MODB31G_MAOP,MODB31G_ERF=:MODB31G_ERF,BPR_CALCULATED=:BPR_CALCULATED,BPR_PIG=:BPR_PIG,BURST_PRESSURE=:BURST_PRESSURE,BPR_VARIANCE=:BPR_VARIANCE,RPR_CALCULATED=:RPR_CALCULATED,RPR_PIG=:RPR_PIG,RPR_VARIANCE=:RPR_VARIANCE,MILEPOST=:MILEPOST,COORDINATE_ID=:COORDINATE_ID,COORDINATE_GUID=:COORDINATE_GUID,CERTAINTY_INTERVAL=:CERTAINTY_INTERVAL,DEPTH_ACCURACY=:DEPTH_ACCURACY,LENGTH_ACCURACY=:LENGTH_ACCURACY,WIDTH_ACCURACY=:WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF=:WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION=:FEATURE_DESCRIPTION,CONTROL_POINT_LF=:CONTROL_POINT_LF,ILI_CLUSTER_ID=:ILI_CLUSTER_ID,ILI_CLUSTER_GUID=:ILI_CLUSTER_GUID,REF_EVENT_ID=:REF_EVENT_ID,REF_EVENT_GUID=:REF_EVENT_GUID,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,STATION_REPORTED=:STATION_REPORTED,CALIBRATED_MEASURE=:CALIBRATED_MEASURE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE ILI_DATA_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    DELETE FROM PODS.STO_ILI_DATA_CALC_ADV
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM PODS.STO_ILI_DATA_CALC
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM PODS.ILI_DATA
                    WHERE ILI_DATA_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_DATA" schema="PODS" id="PODS_ILI_DATA_FEATURE" comment="PODS.ILI_DATA">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT ILI_DATA_ID ID, t.* FROM PODS.ILI_DATA t JOIN pods.ili_anomaly_type_cl ia ON t.anomaly_type_cl = ia.code AND ia.category_cl = 2) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    e_id NUMERIC (16, 0);
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_DATA',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO e_id;

                    INSERT INTO PODS.ILI_DATA(EVENT_ID,ILI_DATA_GUID,EVENT_GUID,WELD_NUMBER,US_WELD_NUMBER,DATE_COLLECTED,ABSOLUTE_ODOMETER,US_WELD_ODOMETER,US_WELD_DISTANCE,DS_WELD_ODOMETER,DS_WELD_DISTANCE,US_AGM_DISTANCE,DS_AGM_DISTANCE,US_AGM_REFERENCE,DS_AGM_REFERENCE,RAW_REFERENCE_KEY,MAX_DEPTH_PCT,MAX_DEPTH_MEASURED,AVERAGE_DEPTH,LENGTH,WIDTH,ORIENTATION_DEG,ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL,MAX_DIAMETER,MIN_DIAMETER,OVALITY,AXIAL_OVALITY,SEAM_ORIENTATION,MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS,PIPE_SMYS,B31G_MAOP,B31G_ERF,MODB31G_MAOP,MODB31G_ERF,BPR_CALCULATED,BPR_PIG,BURST_PRESSURE,BPR_VARIANCE,RPR_CALCULATED,RPR_PIG,RPR_VARIANCE,MILEPOST,COORDINATE_ID,COORDINATE_GUID,CERTAINTY_INTERVAL,DEPTH_ACCURACY,LENGTH_ACCURACY,WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION,CONTROL_POINT_LF,ILI_CLUSTER_ID,ILI_CLUSTER_GUID,REF_EVENT_ID,REF_EVENT_GUID,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,STATION_REPORTED,CALIBRATED_MEASURE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(e_id,:ILI_DATA_GUID,:EVENT_GUID,:WELD_NUMBER,:US_WELD_NUMBER,:DATE_COLLECTED,:ABSOLUTE_ODOMETER,:US_WELD_ODOMETER,:US_WELD_DISTANCE,:DS_WELD_ODOMETER,:DS_WELD_DISTANCE,:US_AGM_DISTANCE,:DS_AGM_DISTANCE,:US_AGM_REFERENCE,:DS_AGM_REFERENCE,:RAW_REFERENCE_KEY,:MAX_DEPTH_PCT,:MAX_DEPTH_MEASURED,:AVERAGE_DEPTH,:LENGTH,:WIDTH,:ORIENTATION_DEG,:ANOMALY_TYPE_CL,:INTERNAL_EXTERNAL_CL,:ANOMALY_EXTENSION_CL,:MAX_DIAMETER,:MIN_DIAMETER,:OVALITY,:AXIAL_OVALITY,:SEAM_ORIENTATION,:MEASURED_WALL_THICKNESS,:NOMINAL_WALL_THICKNESS,:PIPE_SMYS,:B31G_MAOP,:B31G_ERF,:MODB31G_MAOP,:MODB31G_ERF,:BPR_CALCULATED,:BPR_PIG,:BURST_PRESSURE,:BPR_VARIANCE,:RPR_CALCULATED,:RPR_PIG,:RPR_VARIANCE,:MILEPOST,:COORDINATE_ID,:COORDINATE_GUID,:CERTAINTY_INTERVAL,:DEPTH_ACCURACY,:LENGTH_ACCURACY,:WIDTH_ACCURACY,:WITHIN_SPECIFICATION_LF,:FEATURE_DESCRIPTION,:CONTROL_POINT_LF,:ILI_CLUSTER_ID,:ILI_CLUSTER_GUID,:REF_EVENT_ID,:REF_EVENT_GUID,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:STATION_REPORTED,:CALIBRATED_MEASURE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING ILI_DATA_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_DATA
                    SET ILI_DATA_GUID=:ILI_DATA_GUID,EVENT_GUID=:EVENT_GUID,WELD_NUMBER=:WELD_NUMBER,US_WELD_NUMBER=:US_WELD_NUMBER,DATE_COLLECTED=:DATE_COLLECTED,ABSOLUTE_ODOMETER=:ABSOLUTE_ODOMETER,US_WELD_ODOMETER=:US_WELD_ODOMETER,US_WELD_DISTANCE=:US_WELD_DISTANCE,DS_WELD_ODOMETER=:DS_WELD_ODOMETER,DS_WELD_DISTANCE=:DS_WELD_DISTANCE,US_AGM_DISTANCE=:US_AGM_DISTANCE,DS_AGM_DISTANCE=:DS_AGM_DISTANCE,US_AGM_REFERENCE=:US_AGM_REFERENCE,DS_AGM_REFERENCE=:DS_AGM_REFERENCE,RAW_REFERENCE_KEY=:RAW_REFERENCE_KEY,MAX_DEPTH_PCT=:MAX_DEPTH_PCT,MAX_DEPTH_MEASURED=:MAX_DEPTH_MEASURED,AVERAGE_DEPTH=:AVERAGE_DEPTH,LENGTH=:LENGTH,WIDTH=:WIDTH,ORIENTATION_DEG=:ORIENTATION_DEG,ANOMALY_TYPE_CL=:ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL=:INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL=:ANOMALY_EXTENSION_CL,MAX_DIAMETER=:MAX_DIAMETER,MIN_DIAMETER=:MIN_DIAMETER,OVALITY=:OVALITY,AXIAL_OVALITY=:AXIAL_OVALITY,SEAM_ORIENTATION=:SEAM_ORIENTATION,MEASURED_WALL_THICKNESS=:MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS=:NOMINAL_WALL_THICKNESS,PIPE_SMYS=:PIPE_SMYS,B31G_MAOP=:B31G_MAOP,B31G_ERF=:B31G_ERF,MODB31G_MAOP=:MODB31G_MAOP,MODB31G_ERF=:MODB31G_ERF,BPR_CALCULATED=:BPR_CALCULATED,BPR_PIG=:BPR_PIG,BURST_PRESSURE=:BURST_PRESSURE,BPR_VARIANCE=:BPR_VARIANCE,RPR_CALCULATED=:RPR_CALCULATED,RPR_PIG=:RPR_PIG,RPR_VARIANCE=:RPR_VARIANCE,MILEPOST=:MILEPOST,COORDINATE_ID=:COORDINATE_ID,COORDINATE_GUID=:COORDINATE_GUID,CERTAINTY_INTERVAL=:CERTAINTY_INTERVAL,DEPTH_ACCURACY=:DEPTH_ACCURACY,LENGTH_ACCURACY=:LENGTH_ACCURACY,WIDTH_ACCURACY=:WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF=:WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION=:FEATURE_DESCRIPTION,CONTROL_POINT_LF=:CONTROL_POINT_LF,ILI_CLUSTER_ID=:ILI_CLUSTER_ID,ILI_CLUSTER_GUID=:ILI_CLUSTER_GUID,REF_EVENT_ID=:REF_EVENT_ID,REF_EVENT_GUID=:REF_EVENT_GUID,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,STATION_REPORTED=:STATION_REPORTED,CALIBRATED_MEASURE=:CALIBRATED_MEASURE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE ILI_DATA_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_FEATURE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    DELETE FROM PODS.STO_ILI_DATA_CALC
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM PODS.ILI_DATA
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_DATA" schema="PODS" id="PODS_ILI_DATA_JUNCTION" comment="PODS.ILI_DATA">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT ILI_DATA_ID ID, t.* FROM PODS.ILI_DATA t WHERE t.anomaly_type_cl = 5001) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    e_id NUMERIC (16, 0);
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_DATA',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO e_id;

                    INSERT INTO PODS.ILI_DATA(EVENT_ID,ILI_DATA_GUID,EVENT_GUID,WELD_NUMBER,US_WELD_NUMBER,DATE_COLLECTED,ABSOLUTE_ODOMETER,US_WELD_ODOMETER,US_WELD_DISTANCE,DS_WELD_ODOMETER,DS_WELD_DISTANCE,US_AGM_DISTANCE,DS_AGM_DISTANCE,US_AGM_REFERENCE,DS_AGM_REFERENCE,RAW_REFERENCE_KEY,MAX_DEPTH_PCT,MAX_DEPTH_MEASURED,AVERAGE_DEPTH,LENGTH,WIDTH,ORIENTATION_DEG,ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL,MAX_DIAMETER,MIN_DIAMETER,OVALITY,AXIAL_OVALITY,SEAM_ORIENTATION,MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS,PIPE_SMYS,B31G_MAOP,B31G_ERF,MODB31G_MAOP,MODB31G_ERF,BPR_CALCULATED,BPR_PIG,BURST_PRESSURE,BPR_VARIANCE,RPR_CALCULATED,RPR_PIG,RPR_VARIANCE,MILEPOST,COORDINATE_ID,COORDINATE_GUID,CERTAINTY_INTERVAL,DEPTH_ACCURACY,LENGTH_ACCURACY,WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION,CONTROL_POINT_LF,ILI_CLUSTER_ID,ILI_CLUSTER_GUID,REF_EVENT_ID,REF_EVENT_GUID,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,STATION_REPORTED,CALIBRATED_MEASURE,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(e_id,:ILI_DATA_GUID,:EVENT_GUID,:WELD_NUMBER,:US_WELD_NUMBER,:DATE_COLLECTED,:ABSOLUTE_ODOMETER,:US_WELD_ODOMETER,:US_WELD_DISTANCE,:DS_WELD_ODOMETER,:DS_WELD_DISTANCE,:US_AGM_DISTANCE,:DS_AGM_DISTANCE,:US_AGM_REFERENCE,:DS_AGM_REFERENCE,:RAW_REFERENCE_KEY,:MAX_DEPTH_PCT,:MAX_DEPTH_MEASURED,:AVERAGE_DEPTH,:LENGTH,:WIDTH,:ORIENTATION_DEG,:ANOMALY_TYPE_CL,:INTERNAL_EXTERNAL_CL,:ANOMALY_EXTENSION_CL,:MAX_DIAMETER,:MIN_DIAMETER,:OVALITY,:AXIAL_OVALITY,:SEAM_ORIENTATION,:MEASURED_WALL_THICKNESS,:NOMINAL_WALL_THICKNESS,:PIPE_SMYS,:B31G_MAOP,:B31G_ERF,:MODB31G_MAOP,:MODB31G_ERF,:BPR_CALCULATED,:BPR_PIG,:BURST_PRESSURE,:BPR_VARIANCE,:RPR_CALCULATED,:RPR_PIG,:RPR_VARIANCE,:MILEPOST,:COORDINATE_ID,:COORDINATE_GUID,:CERTAINTY_INTERVAL,:DEPTH_ACCURACY,:LENGTH_ACCURACY,:WIDTH_ACCURACY,:WITHIN_SPECIFICATION_LF,:FEATURE_DESCRIPTION,:CONTROL_POINT_LF,:ILI_CLUSTER_ID,:ILI_CLUSTER_GUID,:REF_EVENT_ID,:REF_EVENT_GUID,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:STATION_REPORTED,:CALIBRATED_MEASURE,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING ILI_DATA_ID INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_DATA_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WELD_NUMBER" default="" type="String"/>
                <param name="US_WELD_NUMBER" default="" type="String"/>
                <param name="DATE_COLLECTED" default="" type="DateTime"/>
                <param name="ABSOLUTE_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="US_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="DS_WELD_ODOMETER" default="" type="Decimal"/>
                <param name="DS_WELD_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="DS_AGM_DISTANCE" default="" type="Decimal"/>
                <param name="US_AGM_REFERENCE" default="" type="String"/>
                <param name="DS_AGM_REFERENCE" default="" type="String"/>
                <param name="RAW_REFERENCE_KEY" default="" type="String"/>
                <param name="MAX_DEPTH_PCT" default="" type="Decimal"/>
                <param name="MAX_DEPTH_MEASURED" default="" type="Decimal"/>
                <param name="AVERAGE_DEPTH" default="" type="Decimal"/>
                <param name="LENGTH" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="ORIENTATION_DEG" default="" type="Decimal"/>
                <param name="ANOMALY_TYPE_CL" default="0" type="Decimal"/>
                <param name="INTERNAL_EXTERNAL_CL" default="UNKNOWN" type="String"/>
                <param name="ANOMALY_EXTENSION_CL" default="UNKNOWN" type="String"/>
                <param name="MAX_DIAMETER" default="0" type="Decimal"/>
                <param name="MIN_DIAMETER" default="0" type="Decimal"/>
                <param name="OVALITY" default="" type="Decimal"/>
                <param name="AXIAL_OVALITY" default="" type="Decimal"/>
                <param name="SEAM_ORIENTATION" default="" type="Decimal"/>
                <param name="MEASURED_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS" default="0" type="Decimal"/>
                <param name="PIPE_SMYS" default="" type="Decimal"/>
                <param name="B31G_MAOP" default="" type="Decimal"/>
                <param name="B31G_ERF" default="" type="Decimal"/>
                <param name="MODB31G_MAOP" default="" type="Decimal"/>
                <param name="MODB31G_ERF" default="" type="Decimal"/>
                <param name="BPR_CALCULATED" default="" type="Decimal"/>
                <param name="BPR_PIG" default="" type="Decimal"/>
                <param name="BURST_PRESSURE" default="" type="Decimal"/>
                <param name="BPR_VARIANCE" default="" type="Decimal"/>
                <param name="RPR_CALCULATED" default="" type="Decimal"/>
                <param name="RPR_PIG" default="" type="Decimal"/>
                <param name="RPR_VARIANCE" default="" type="Decimal"/>
                <param name="MILEPOST" default="" type="String"/>
                <param name="COORDINATE_ID" default="-1" type="Decimal"/>
                <param name="COORDINATE_GUID" default="" type="String"/>
                <param name="CERTAINTY_INTERVAL" default="" type="String"/>
                <param name="DEPTH_ACCURACY" default="" type="String"/>
                <param name="LENGTH_ACCURACY" default="" type="String"/>
                <param name="WIDTH_ACCURACY" default="" type="String"/>
                <param name="WITHIN_SPECIFICATION_LF" default="" type="String"/>
                <param name="FEATURE_DESCRIPTION" default="" type="String"/>
                <param name="CONTROL_POINT_LF" default="" type="String"/>
                <param name="ILI_CLUSTER_ID" default="" type="Decimal"/>
                <param name="ILI_CLUSTER_GUID" default="" type="String"/>
                <param name="REF_EVENT_ID" default="" type="Decimal"/>
                <param name="REF_EVENT_GUID" default="" type="String"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="STATION_REPORTED" default="" type="String"/>
                <param name="CALIBRATED_MEASURE" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_DATA
                    SET ILI_DATA_GUID=:ILI_DATA_GUID,EVENT_GUID=:EVENT_GUID,WELD_NUMBER=:WELD_NUMBER,US_WELD_NUMBER=:US_WELD_NUMBER,DATE_COLLECTED=:DATE_COLLECTED,ABSOLUTE_ODOMETER=:ABSOLUTE_ODOMETER,US_WELD_ODOMETER=:US_WELD_ODOMETER,US_WELD_DISTANCE=:US_WELD_DISTANCE,DS_WELD_ODOMETER=:DS_WELD_ODOMETER,DS_WELD_DISTANCE=:DS_WELD_DISTANCE,US_AGM_DISTANCE=:US_AGM_DISTANCE,DS_AGM_DISTANCE=:DS_AGM_DISTANCE,US_AGM_REFERENCE=:US_AGM_REFERENCE,DS_AGM_REFERENCE=:DS_AGM_REFERENCE,RAW_REFERENCE_KEY=:RAW_REFERENCE_KEY,MAX_DEPTH_PCT=:MAX_DEPTH_PCT,MAX_DEPTH_MEASURED=:MAX_DEPTH_MEASURED,AVERAGE_DEPTH=:AVERAGE_DEPTH,LENGTH=:LENGTH,WIDTH=:WIDTH,ORIENTATION_DEG=:ORIENTATION_DEG,ANOMALY_TYPE_CL=:ANOMALY_TYPE_CL,INTERNAL_EXTERNAL_CL=:INTERNAL_EXTERNAL_CL,ANOMALY_EXTENSION_CL=:ANOMALY_EXTENSION_CL,MAX_DIAMETER=:MAX_DIAMETER,MIN_DIAMETER=:MIN_DIAMETER,OVALITY=:OVALITY,AXIAL_OVALITY=:AXIAL_OVALITY,SEAM_ORIENTATION=:SEAM_ORIENTATION,MEASURED_WALL_THICKNESS=:MEASURED_WALL_THICKNESS,NOMINAL_WALL_THICKNESS=:NOMINAL_WALL_THICKNESS,PIPE_SMYS=:PIPE_SMYS,B31G_MAOP=:B31G_MAOP,B31G_ERF=:B31G_ERF,MODB31G_MAOP=:MODB31G_MAOP,MODB31G_ERF=:MODB31G_ERF,BPR_CALCULATED=:BPR_CALCULATED,BPR_PIG=:BPR_PIG,BURST_PRESSURE=:BURST_PRESSURE,BPR_VARIANCE=:BPR_VARIANCE,RPR_CALCULATED=:RPR_CALCULATED,RPR_PIG=:RPR_PIG,RPR_VARIANCE=:RPR_VARIANCE,MILEPOST=:MILEPOST,COORDINATE_ID=:COORDINATE_ID,COORDINATE_GUID=:COORDINATE_GUID,CERTAINTY_INTERVAL=:CERTAINTY_INTERVAL,DEPTH_ACCURACY=:DEPTH_ACCURACY,LENGTH_ACCURACY=:LENGTH_ACCURACY,WIDTH_ACCURACY=:WIDTH_ACCURACY,WITHIN_SPECIFICATION_LF=:WITHIN_SPECIFICATION_LF,FEATURE_DESCRIPTION=:FEATURE_DESCRIPTION,CONTROL_POINT_LF=:CONTROL_POINT_LF,ILI_CLUSTER_ID=:ILI_CLUSTER_ID,ILI_CLUSTER_GUID=:ILI_CLUSTER_GUID,REF_EVENT_ID=:REF_EVENT_ID,REF_EVENT_GUID=:REF_EVENT_GUID,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,STATION_REPORTED=:STATION_REPORTED,CALIBRATED_MEASURE=:CALIBRATED_MEASURE,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE ILI_DATA_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_DATA_JUNCTION'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID IN (SELECT EVENT_ID FROM PODS.ILI_DATA WHERE ILI_DATA_ID = :ID);

                    DELETE FROM PODS.STO_ILI_DATA_CALC
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM PODS.ILI_DATA
                    WHERE ILI_DATA_ID = :ID;

                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_DATA/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="ILI_INSPECTION_RANGE" schema="PODS" id="PODS_ILI_INSPECTION_RANGE" comment="PODS.ILI_INSPECTION_RANGE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.ILI_INSPECTION_RANGE t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ILI_INSPECTION_RANGE_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WORK_ORDER_ID" default="" type="Decimal"/>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="ASCENDING" default="" type="Decimal"/>
                <param name="SEQUENCE" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="LAUNCHER_EVENT_ID" default="" type="Decimal"/>
                <param name="LAUNCHER_EVENT_GUID" default="" type="String"/>
                <param name="RECEIVER_EVENT_ID" default="" type="Decimal"/>
                <param name="RECEIVER_EVENT_GUID" default="" type="String"/>
                <param name="WELD_START_NUMBER" default="" type="String"/>
                <param name="WELD_INCREMENT" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE
                    v_ili_inspection_range_id NUMERIC (16, 0);
                    v_launcher_event_id NUMBER DEFAULT NULL;
                    v_receiver_event_id NUMBER DEFAULT NULL;
                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'ILI_INSP_RNG',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.ILI_INSPECTION_RANGE(EVENT_ID,ILI_INSPECTION_RANGE_GUID,EVENT_GUID,WORK_ORDER_ID,WORK_ORDER_GUID,START_ODOMETER,END_ODOMETER,ASCENDING,SEQUENCE,ILI_INSPECTION_ID,ILI_INSPECTION_GUID,LAUNCHER_EVENT_ID,LAUNCHER_EVENT_GUID,RECEIVER_EVENT_ID,RECEIVER_EVENT_GUID,WELD_START_NUMBER,WELD_INCREMENT,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:ILI_INSPECTION_RANGE_GUID,:EVENT_GUID,:WORK_ORDER_ID,:WORK_ORDER_GUID,:START_ODOMETER,:END_ODOMETER,:ASCENDING,:SEQUENCE,:ILI_INSPECTION_ID,:ILI_INSPECTION_GUID,:LAUNCHER_EVENT_ID,:LAUNCHER_EVENT_GUID,:RECEIVER_EVENT_ID,:RECEIVER_EVENT_GUID,:WELD_START_NUMBER,:WELD_INCREMENT,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING ILI_INSPECTION_RANGE_ID INTO v_ili_inspection_range_id;

                    SELECT MIN(LR.EVENT_ID)
                    INTO v_launcher_event_id
                    FROM PODS.ILI_INSPECTION_RANGE IR
                    JOIN PODS.EVENT_RANGE ER
                    ON IR.EVENT_ID = ER.EVENT_ID
                    JOIN PODS.STATION_POINT SPB
                    ON ER.STATION_ID_BEGIN = SPB.STATION_ID
                    JOIN PODS.STATION_POINT SPL
                    ON SPB.ROUTE_ID = SPL.ROUTE_ID
                    JOIN PODS.EVENT_RANGE ERL
                    ON ERL.STATION_ID_BEGIN = SPL.STATION_ID
                    JOIN PODS.LAUNCHER_RECEIVER LR
                    ON ERL.EVENT_ID = LR.EVENT_ID
                    WHERE ERL.FEATURE_ID = 'LAUNC_REC'
                    AND LR.TYPE_CL = 'LAUNCH_R_TYPE_06'  /* Запуск */
                    AND SPB.STATION = SPL.STATION
                    AND IR.ILI_INSPECTION_RANGE_ID = v_ili_inspection_range_id;


                    SELECT MIN(LR.EVENT_ID)
                    INTO v_receiver_event_id
                    FROM PODS.ILI_INSPECTION_RANGE IR
                    JOIN PODS.EVENT_RANGE ER
                    ON IR.EVENT_ID = ER.EVENT_ID
                    JOIN PODS.STATION_POINT SPB
                    ON ER.STATION_ID_BEGIN = SPB.STATION_ID
                    JOIN PODS.STATION_POINT SPL
                    ON SPB.ROUTE_ID = SPL.ROUTE_ID
                    JOIN PODS.EVENT_RANGE ERL
                    ON ERL.STATION_ID_BEGIN = SPL.STATION_ID
                    JOIN PODS.LAUNCHER_RECEIVER LR
                    ON ERL.EVENT_ID = LR.EVENT_ID
                    WHERE ERL.FEATURE_ID = 'LAUNC_REC'
                    AND LR.TYPE_CL = 'LAUNCH_R_TYPE_07' /* Прием */
                    AND SPB.STATION = SPL.STATION
                    AND IR.ILI_INSPECTION_RANGE_ID = v_ili_inspection_range_id;

                    UPDATE PODS.ILI_INSPECTION_RANGE
                    SET LAUNCHER_EVENT_ID = v_launcher_event_id
                    ,RECEIVER_EVENT_ID = v_receiver_event_id
                    WHERE ILI_INSPECTION_RANGE_ID = v_ili_inspection_range_id;



                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ILI_INSPECTION_RANGE_GUID" default="" type="String"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="WORK_ORDER_ID" default="" type="Decimal"/>
                <param name="WORK_ORDER_GUID" default="" type="String"/>
                <param name="START_ODOMETER" default="" type="Decimal"/>
                <param name="END_ODOMETER" default="" type="Decimal"/>
                <param name="ASCENDING" default="" type="Decimal"/>
                <param name="SEQUENCE" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_ID" default="" type="Decimal"/>
                <param name="ILI_INSPECTION_GUID" default="" type="String"/>
                <param name="LAUNCHER_EVENT_ID" default="" type="Decimal"/>
                <param name="LAUNCHER_EVENT_GUID" default="" type="String"/>
                <param name="RECEIVER_EVENT_ID" default="" type="Decimal"/>
                <param name="RECEIVER_EVENT_GUID" default="" type="String"/>
                <param name="WELD_START_NUMBER" default="" type="String"/>
                <param name="WELD_INCREMENT" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.ILI_INSPECTION_RANGE
                    SET ILI_INSPECTION_RANGE_GUID=:ILI_INSPECTION_RANGE_GUID,EVENT_GUID=:EVENT_GUID,WORK_ORDER_ID=:WORK_ORDER_ID,WORK_ORDER_GUID=:WORK_ORDER_GUID,START_ODOMETER=:START_ODOMETER,END_ODOMETER=:END_ODOMETER,ASCENDING=:ASCENDING,SEQUENCE=:SEQUENCE,ILI_INSPECTION_ID=:ILI_INSPECTION_ID,ILI_INSPECTION_GUID=:ILI_INSPECTION_GUID,LAUNCHER_EVENT_ID=:LAUNCHER_EVENT_ID,LAUNCHER_EVENT_GUID=:LAUNCHER_EVENT_GUID,RECEIVER_EVENT_ID=:RECEIVER_EVENT_ID,RECEIVER_EVENT_GUID=:RECEIVER_EVENT_GUID,WELD_START_NUMBER=:WELD_START_NUMBER,WELD_INCREMENT=:WELD_INCREMENT,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_ILI_INSPECTION_RANGE'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID  = :ID;

                    DELETE FROM PODS.ILI_INSPECTION_RANGE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_ILI_INSPECTION_RANGE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_ILI_INSPECTION_RANGE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="PIPE_SYSTEM_BOUNDARY" schema="PODS" id="PODS_PIPE_SYSTEM_BOUNDARY" comment="PODS.PIPE_SYSTEM_BOUNDARY">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>

                    SELECT * FROM (SELECT PIPE_SYSTEM_ID||';'||LINE_ID||';'||KM_BEGIN||';'||KM_END ID, t.* FROM PODS.PIPE_SYSTEM_BOUNDARY t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="PIPE_SYSTEM_ID" default="" type="Decimal"/>
                <param name="PIPE_SYSTEM_GUID" default="" type="String"/>
                <param name="LINE_ID" default="0" type="Decimal"/>
                <param name="KM_BEGIN" default="" type="Decimal"/>
                <param name="KM_END" default="" type="Decimal"/>
                <param name="EVENT_ID" default="" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TITLE_EVENT_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" direction="Output" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE var_tmp NUMERIC (6, 0);
                    BEGIN
                    SELECT COUNT(*) INTO var_tmp FROM PODS.PIPE_SYSTEM_BOUNDARY psb WHERE psb.TITLE_EVENT_INDICATOR_LF='Y' AND psb.PIPE_SYSTEM_ID = :PIPE_SYSTEM_ID;
                    IF var_tmp&gt;0 THEN
                    :TITLE_EVENT_INDICATOR_LF := 'N';
                    ELSE
                    :TITLE_EVENT_INDICATOR_LF := 'Y';
                    END IF;

                    INSERT INTO PODS.PIPE_SYSTEM_BOUNDARY(PIPE_SYSTEM_ID,PIPE_SYSTEM_GUID,LINE_ID,KM_BEGIN,KM_END,EVENT_ID,EVENT_GUID,TITLE_EVENT_INDICATOR_LF,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:PIPE_SYSTEM_ID,:PIPE_SYSTEM_GUID,:LINE_ID,:KM_BEGIN,:KM_END,:EVENT_ID,:EVENT_GUID,:TITLE_EVENT_INDICATOR_LF,:DESCRIPTION,:SOURCE_GCL,:COMMENTS)
                    RETURNING PIPE_SYSTEM_ID||';'||LINE_ID||';'||KM_BEGIN||';'||KM_END INTO :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="PIPE_SYSTEM_ID" default="" type="Decimal"/>
                <param name="PIPE_SYSTEM_GUID" default="" type="String"/>
                <param name="LINE_ID" default="0" type="Decimal"/>
                <param name="KM_BEGIN" default="" type="Decimal"/>
                <param name="KM_END" default="" type="Decimal"/>
                <param name="EVENT_ID" default="" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TITLE_EVENT_INDICATOR_LF" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    DECLARE var_tmp NUMERIC (6, 0);
                    BEGIN
                    SELECT COUNT(*) INTO var_tmp FROM PODS.PIPE_SYSTEM_BOUNDARY psb WHERE psb.TITLE_EVENT_INDICATOR_LF='Y' AND psb.PIPE_SYSTEM_ID = :PIPE_SYSTEM_ID;
                    IF var_tmp&gt;0 THEN
                    :TITLE_EVENT_INDICATOR_LF := 'N';
                    ELSE
                    :TITLE_EVENT_INDICATOR_LF := 'Y';
                    END IF;

                    UPDATE PODS.PIPE_SYSTEM_BOUNDARY
                    SET PIPE_SYSTEM_ID=:PIPE_SYSTEM_ID,PIPE_SYSTEM_GUID=:PIPE_SYSTEM_GUID,LINE_ID=:LINE_ID,KM_BEGIN=:KM_BEGIN,KM_END=:KM_END,EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TITLE_EVENT_INDICATOR_LF=:TITLE_EVENT_INDICATOR_LF,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE PIPE_SYSTEM_ID||';'||LINE_ID||';'||KM_BEGIN||';'||KM_END = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SYSTEM_BOUNDARY'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.PIPE_SYSTEM_BOUNDARY
                    WHERE PIPE_SYSTEM_ID||';'||LINE_ID||';'||KM_BEGIN||';'||KM_END = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_PIPE_SYSTEM_BOUNDARY/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_PIPE_SYSTEM_BOUNDARY/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRUCTURE" schema="PODS" id="PODS_STRUCTURE_CP_BLOCK" comment="PODS.STRUCTURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.STRUCTURE t WHERE t.TYPE_CL='STRUCT_TYPE_16') d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'STRUCTURE',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.STRUCTURE(OFFLINE_ID,OFFLINE_GUID,TYPE_CL,NAME,OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE,DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID,SITE_ADDRESS_GUID,CONTACT_ID,CONTACT_GUID,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:TYPE_CL,:NAME,:OCCUPANT_COUNT,:OCCUPANCY_CATEGORY_GCL,:DETERMINATION_DATE,:DETERMINATION_METHOD_GCL,:SITE_ADDRESS_ID,:SITE_ADDRESS_GUID,:CONTACT_ID,:CONTACT_GUID,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRUCTURE
                    SET OFFLINE_GUID=:OFFLINE_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,OCCUPANT_COUNT=:OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL=:OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID=:SITE_ADDRESS_ID,SITE_ADDRESS_GUID=:SITE_ADDRESS_GUID,CONTACT_ID=:CONTACT_ID,CONTACT_GUID=:CONTACT_GUID,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_BLOCK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.STRUCTURE
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="STRUCTURE" schema="PODS" id="PODS_STRUCTURE_CP_TRANS" comment="PODS.STRUCTURE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT OFFLINE_ID ID, t.* FROM PODS.STRUCTURE t WHERE t.TYPE_CL='STRUCT_TYPE_17') d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.OFFLINE_EVENT (OFFLINE_GUID, FEATURE_ID,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,CREATE_DATE,PODS_USER)
                    VALUES(:OFFLINE_GUID, 'STRUCTURE',SYSDATE,'Y',SYSDATE,:PODS_USER)
                    RETURNING OFFLINE_ID INTO :ID;

                    INSERT INTO PODS.STRUCTURE(OFFLINE_ID,OFFLINE_GUID,TYPE_CL,NAME,OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE,DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID,SITE_ADDRESS_GUID,CONTACT_ID,CONTACT_GUID,SOURCE_GCL)
                    VALUES(:ID,:OFFLINE_GUID,:TYPE_CL,:NAME,:OCCUPANT_COUNT,:OCCUPANCY_CATEGORY_GCL,:DETERMINATION_DATE,:DETERMINATION_METHOD_GCL,:SITE_ADDRESS_ID,:SITE_ADDRESS_GUID,:CONTACT_ID,:CONTACT_GUID,:SOURCE_GCL);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="OFFLINE_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="NAME" default="" type="String"/>
                <param name="OCCUPANT_COUNT" default="" type="Decimal"/>
                <param name="OCCUPANCY_CATEGORY_GCL" default="UNKNOWN" type="String"/>
                <param name="DETERMINATION_DATE" default="" type="DateTime"/>
                <param name="DETERMINATION_METHOD_GCL" default="UNKNOWN" type="String"/>
                <param name="SITE_ADDRESS_ID" default="" type="Decimal"/>
                <param name="SITE_ADDRESS_GUID" default="" type="String"/>
                <param name="CONTACT_ID" default="" type="Decimal"/>
                <param name="CONTACT_GUID" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STRUCTURE
                    SET OFFLINE_GUID=:OFFLINE_GUID,TYPE_CL=:TYPE_CL,NAME=:NAME,OCCUPANT_COUNT=:OCCUPANT_COUNT,OCCUPANCY_CATEGORY_GCL=:OCCUPANCY_CATEGORY_GCL,DETERMINATION_DATE=:DETERMINATION_DATE,DETERMINATION_METHOD_GCL=:DETERMINATION_METHOD_GCL,SITE_ADDRESS_ID=:SITE_ADDRESS_ID,SITE_ADDRESS_GUID=:SITE_ADDRESS_GUID,CONTACT_ID=:CONTACT_ID,CONTACT_GUID=:CONTACT_GUID,SOURCE_GCL=:SOURCE_GCL
                    WHERE OFFLINE_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_STRUCTURE_TRANS'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.STRUCTURE
                    WHERE OFFLINE_ID = :ID;

                    DELETE FROM pods.offline_event
                    WHERE offline_id = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_STRUCTURE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SHEET_NOTE" schema="PODS" id="PODS_SHEET_NOTE_LINK" comment="PODS.SHEET_NOTE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SHEET_NOTE t WHERE TYPE_CL IN ('C1400059')) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SHEET_NOTE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SHEET_NOTE(EVENT_ID,EVENT_GUID,TYPE_CL,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,INTERSECTION_ANGLE,WIDTH,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:INTERSECTION_ANGLE,:WIDTH,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SHEET_NOTE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,WIDTH=:WIDTH,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SHEET_NOTE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="FOREIGN_LINE_CROSSING" schema="PODS" id="PODS_FOREIGN_LINE_CROSSING_LINK" comment="PODS.FOREIGN_LINE_CROSSING">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT GEOGRAPHIC_ENTITY_ID ID, t.* FROM PODS.FOREIGN_LINE_CROSSING t
                    WHERE t.TYPE_CL = 'FL_CROSS_TYPE_13'
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.GEOGRAPHIC_ENTITY (ENTITY_GUID,TYPE_CL)
                    VALUES(:GEOGRAPHIC_ENTITY_GUID,'C2000018')
                    RETURNING ENTITY_ID INTO :ID;

                    INSERT INTO PODS.FOREIGN_LINE_CROSSING(GEOGRAPHIC_ENTITY_ID,EVENT_ID,EVENT_GUID,TYPE_CL,OWNER_CL,LINE_CLEARANCE,MATERIAL_CL,FOREIGN_DIAMETER,CROSSING_DATE,INTERSECTION_ANGLE,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,WIDTH,GEOGRAPHIC_ENTITY_GUID,DESCRIPTION,LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_ID,:EVENT_GUID,:TYPE_CL,:OWNER_CL,:LINE_CLEARANCE,:MATERIAL_CL,:FOREIGN_DIAMETER,:CROSSING_DATE,:INTERSECTION_ANGLE,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:WIDTH,:GEOGRAPHIC_ENTITY_GUID,:DESCRIPTION,:LINE_BELOW_GROUND_LF,:CROSSING_BELOW_GROUND_LF,:CROSSING_BELOW_LINE_LF,:FOREIGN_BOND_LF,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_ID" default="-20" type="Decimal"/>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="OWNER_CL" default="UNKNOWN" type="String"/>
                <param name="LINE_CLEARANCE" default="" type="Decimal"/>
                <param name="MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="FOREIGN_DIAMETER" default="0" type="Decimal"/>
                <param name="CROSSING_DATE" default="" type="DateTime"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="GEOGRAPHIC_ENTITY_GUID" default="" type="String"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="LINE_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_GROUND_LF" default="" type="String"/>
                <param name="CROSSING_BELOW_LINE_LF" default="" type="String"/>
                <param name="FOREIGN_BOND_LF" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.FOREIGN_LINE_CROSSING
                    SET EVENT_ID=:EVENT_ID,EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,OWNER_CL=:OWNER_CL,LINE_CLEARANCE=:LINE_CLEARANCE,MATERIAL_CL=:MATERIAL_CL,FOREIGN_DIAMETER=:FOREIGN_DIAMETER,CROSSING_DATE=:CROSSING_DATE,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,WIDTH=:WIDTH,GEOGRAPHIC_ENTITY_GUID=:GEOGRAPHIC_ENTITY_GUID,DESCRIPTION=:DESCRIPTION,LINE_BELOW_GROUND_LF=:LINE_BELOW_GROUND_LF,CROSSING_BELOW_GROUND_LF=:CROSSING_BELOW_GROUND_LF,CROSSING_BELOW_LINE_LF=:CROSSING_BELOW_LINE_LF,FOREIGN_BOND_LF=:FOREIGN_BOND_LF,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64" direction="Input"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_CP_FOREIGN_LINE_CROSSING'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    DELETE FROM PODS.FOREIGN_LINE_CROSSING
                    WHERE GEOGRAPHIC_ENTITY_ID = :ID;

                    DELETE FROM PODS.GEOGRAPHIC_ENTITY
                    WHERE ENTITY_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_CP_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_CP_FOREIGN_LINE_CROSSING/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="SHEET_NOTE" schema="PODS" id="PODS_SHEET_NOTE_FUND" comment="PODS.SHEET_NOTE">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.SHEET_NOTE t WHERE TYPE_CL IN ('C1400014')) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'SHEET_NOTE',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.SHEET_NOTE(EVENT_ID,EVENT_GUID,TYPE_CL,SOURCE_NUMBER,SCALED_GCL,DIRECTION_GCL,INTERSECTION_ANGLE,WIDTH,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:TYPE_CL,:SOURCE_NUMBER,:SCALED_GCL,:DIRECTION_GCL,:INTERSECTION_ANGLE,:WIDTH,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="SOURCE_NUMBER" default="" type="String"/>
                <param name="SCALED_GCL" default="UNKNOWN" type="String"/>
                <param name="DIRECTION_GCL" default="UNKNOWN" type="String"/>
                <param name="INTERSECTION_ANGLE" default="" type="Decimal"/>
                <param name="WIDTH" default="" type="Decimal"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.SHEET_NOTE
                    SET EVENT_GUID=:EVENT_GUID,TYPE_CL=:TYPE_CL,SOURCE_NUMBER=:SOURCE_NUMBER,SCALED_GCL=:SCALED_GCL,DIRECTION_GCL=:DIRECTION_GCL,INTERSECTION_ANGLE=:INTERSECTION_ANGLE,WIDTH=:WIDTH,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_SHEET_NOTE_LINK'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.SHEET_NOTE
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_SHEET_NOTE/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MARKER" schema="PODS" id="PODS_MARKER" comment="PODS.MARKER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.MARKER t WHERE t.MARKER_TYPE_GCL = 'MARKER_TYPE_01') d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'MARKER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.MARKER(EVENT_ID,EVENT_GUID,SIGN_TYPE_CL,MARKER_TYPE_GCL,MARKER_NUMBER,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SIGN_TYPE_CL,:MARKER_TYPE_GCL,:MARKER_NUMBER,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MARKER
                    SET EVENT_GUID=:EVENT_GUID,SIGN_TYPE_CL=:SIGN_TYPE_CL,MARKER_TYPE_GCL=:MARKER_TYPE_GCL,MARKER_NUMBER=:MARKER_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.MARKER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MARKER" schema="PODS" id="PODS_MARKER_POINT" comment="PODS.MARKER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.MARKER t WHERE t.MARKER_TYPE_GCL = 'MARKER_TYPE_06') d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'MARKER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.MARKER(EVENT_ID,EVENT_GUID,SIGN_TYPE_CL,MARKER_TYPE_GCL,MARKER_NUMBER,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SIGN_TYPE_CL,:MARKER_TYPE_GCL,:MARKER_NUMBER,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MARKER
                    SET EVENT_GUID=:EVENT_GUID,SIGN_TYPE_CL=:SIGN_TYPE_CL,MARKER_TYPE_GCL=:MARKER_TYPE_GCL,MARKER_NUMBER=:MARKER_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.MARKER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>
    <data table="MARKER" schema="PODS" id="PODS_MARKER_KM" comment="PODS.MARKER">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.* FROM PODS.MARKER t WHERE t.MARKER_TYPE_GCL = 'MARKER_TYPE_05') d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(:EVENT_GUID,'MARKER',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.MARKER(EVENT_ID,EVENT_GUID,SIGN_TYPE_CL,MARKER_TYPE_GCL,MARKER_NUMBER,DATE_INSTALLED,DESCRIPTION,SOURCE_GCL,COMMENTS)
                    VALUES(:ID,:EVENT_GUID,:SIGN_TYPE_CL,:MARKER_TYPE_GCL,:MARKER_NUMBER,:DATE_INSTALLED,:DESCRIPTION,:SOURCE_GCL,:COMMENTS);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="EVENT_GUID" default="" type="String"/>
                <param name="SIGN_TYPE_CL" default="UNKNOWN" type="String"/>
                <param name="MARKER_TYPE_GCL" default="UNKNOWN" type="String"/>
                <param name="MARKER_NUMBER" default="" type="Decimal"/>
                <param name="DATE_INSTALLED" default="" type="DateTime"/>
                <param name="DESCRIPTION" default="" type="String"/>
                <param name="SOURCE_GCL" default="UNKNOWN" type="String"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.MARKER
                    SET EVENT_GUID=:EVENT_GUID,SIGN_TYPE_CL=:SIGN_TYPE_CL,MARKER_TYPE_GCL=:MARKER_TYPE_GCL,MARKER_NUMBER=:MARKER_NUMBER,DATE_INSTALLED=:DATE_INSTALLED,DESCRIPTION=:DESCRIPTION,SOURCE_GCL=:SOURCE_GCL,COMMENTS=:COMMENTS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_MARKER'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.MARKER
                    WHERE EVENT_ID = :ID;
                    DELETE FROM WEB50.LNK_GATE WHERE LEFT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)) OR RIGHT_OBJ_ID = 'PODS_MARKER/'||CAST(:ID AS VARCHAR(30)); END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>

    <data table="STO_ILI_DATA_CALC" schema="PODS" id="PODS_STO_REPAIR_METHOD" comment="PODS.STO_ILI_DATA_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.CLUSTER_COMMENT,c.R_595_2011_REPAIR_METHOD,c.R_595_2011_DEPTH_ABRASION,
                    c.R_595_2011_SQUARE_ABRASION,c.R_595_2011_LENGTH_PIPE_REPAIR,c.R_595_2011_COMMENT,
                    c.STO_112_2007_ASSURANCE_FACTOR,c.STO_112_2007_DESTRUCT_PRESSURE,c.STO_112_2007_ALLOW_PRESSURE,
                    c.STO_112_2007_PERFORMANCE_EVAL,c.STO_173_2007_CRITICAL_PRESSURE,c.STO_173_2007_DANGER_DEGREE,
                    c.STO_173_2007_SAFE_PRESSURE,c.STO_173_2007_ACTUAL_SAFETY,c.STO_173_2007_STANDARD_SAFETY,
                    c.STO_292_2007_DANGER_RANK,c.STO_401_2009_FAIL_PROBABILITY,ca.r_620_2011_date_test,
                    ca.r_620_2011_date_repair, ca.sto_112_2007_work_press_koef,
                    ca.sto_112_2007_compress_strength, ca.sto_112_2007_length_koef,
                    ca.ltg_thickness_measured, ca.ltg_corrosion_speed,
                    ca.ltg_time_from_last_repair, ca.ltg_thickness_to_destroy,
                    ca.ltg_residual_life, ca.ltg_min_thickness_allow,
                    ca.ltg_actual_res_thickness, ca.ltg_probab_corrosion_speed,
                    ca.ltg_depth_to_destroy, ca.ltg_time_to_destroy,
                    ca.ltg_repair_method,ca.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    LEFT OUTER JOIN pods.sto_ili_data_calc_adv ca ON t.ili_data_id = ca.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_DATA_CALC" schema="PODS" id="PODS_STO_PERFORMANCE_EVAL" comment="PODS.STO_ILI_DATA_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.CLUSTER_COMMENT,c.R_595_2011_REPAIR_METHOD,c.R_595_2011_DEPTH_ABRASION,
                    c.R_595_2011_SQUARE_ABRASION,c.R_595_2011_LENGTH_PIPE_REPAIR,c.R_595_2011_COMMENT,
                    c.STO_112_2007_ASSURANCE_FACTOR,c.STO_112_2007_DESTRUCT_PRESSURE,c.STO_112_2007_ALLOW_PRESSURE,
                    c.STO_112_2007_PERFORMANCE_EVAL,c.STO_173_2007_CRITICAL_PRESSURE,c.STO_173_2007_DANGER_DEGREE,
                    c.STO_173_2007_SAFE_PRESSURE,c.STO_173_2007_ACTUAL_SAFETY,c.STO_173_2007_STANDARD_SAFETY,
                    c.STO_292_2007_DANGER_RANK,c.STO_401_2009_FAIL_PROBABILITY,ca.r_620_2011_date_test,
                    ca.r_620_2011_date_repair, ca.sto_112_2007_work_press_koef,
                    ca.sto_112_2007_compress_strength, ca.sto_112_2007_length_koef,
                    ca.ltg_thickness_measured, ca.ltg_corrosion_speed,
                    ca.ltg_time_from_last_repair, ca.ltg_thickness_to_destroy,
                    ca.ltg_residual_life, ca.ltg_min_thickness_allow,
                    ca.ltg_actual_res_thickness, ca.ltg_probab_corrosion_speed,
                    ca.ltg_depth_to_destroy, ca.ltg_time_to_destroy,
                    ca.ltg_repair_method,ca.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    LEFT OUTER JOIN pods.sto_ili_data_calc_adv ca ON t.ili_data_id = ca.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_DATA_CALC" schema="PODS" id="PODS_STO_DANGER_DEGREE" comment="PODS.STO_ILI_DATA_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.CLUSTER_COMMENT,c.R_595_2011_REPAIR_METHOD,c.R_595_2011_DEPTH_ABRASION,
                    c.R_595_2011_SQUARE_ABRASION,c.R_595_2011_LENGTH_PIPE_REPAIR,c.R_595_2011_COMMENT,
                    c.STO_112_2007_ASSURANCE_FACTOR,c.STO_112_2007_DESTRUCT_PRESSURE,c.STO_112_2007_ALLOW_PRESSURE,
                    c.STO_112_2007_PERFORMANCE_EVAL,c.STO_173_2007_CRITICAL_PRESSURE,c.STO_173_2007_DANGER_DEGREE,
                    c.STO_173_2007_SAFE_PRESSURE,c.STO_173_2007_ACTUAL_SAFETY,c.STO_173_2007_STANDARD_SAFETY,
                    c.STO_292_2007_DANGER_RANK,c.STO_401_2009_FAIL_PROBABILITY,ca.r_620_2011_date_test,
                    ca.r_620_2011_date_repair, ca.sto_112_2007_work_press_koef,
                    ca.sto_112_2007_compress_strength, ca.sto_112_2007_length_koef,
                    ca.ltg_thickness_measured, ca.ltg_corrosion_speed,
                    ca.ltg_time_from_last_repair, ca.ltg_thickness_to_destroy,
                    ca.ltg_residual_life, ca.ltg_min_thickness_allow,
                    ca.ltg_actual_res_thickness, ca.ltg_probab_corrosion_speed,
                    ca.ltg_depth_to_destroy, ca.ltg_time_to_destroy,
                    ca.ltg_repair_method,ca.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    LEFT OUTER JOIN pods.sto_ili_data_calc_adv ca ON t.ili_data_id = ca.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_DATA_CALC" schema="PODS" id="PODS_STO_DANGER_RANK" comment="PODS.STO_ILI_DATA_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.CLUSTER_COMMENT,c.R_595_2011_REPAIR_METHOD,c.R_595_2011_DEPTH_ABRASION,
                    c.R_595_2011_SQUARE_ABRASION,c.R_595_2011_LENGTH_PIPE_REPAIR,c.R_595_2011_COMMENT,
                    c.STO_112_2007_ASSURANCE_FACTOR,c.STO_112_2007_DESTRUCT_PRESSURE,c.STO_112_2007_ALLOW_PRESSURE,
                    c.STO_112_2007_PERFORMANCE_EVAL,c.STO_173_2007_CRITICAL_PRESSURE,c.STO_173_2007_DANGER_DEGREE,
                    c.STO_173_2007_SAFE_PRESSURE,c.STO_173_2007_ACTUAL_SAFETY,c.STO_173_2007_STANDARD_SAFETY,
                    c.STO_292_2007_DANGER_RANK,c.STO_401_2009_FAIL_PROBABILITY,ca.r_620_2011_date_test,
                    ca.r_620_2011_date_repair, ca.sto_112_2007_work_press_koef,
                    ca.sto_112_2007_compress_strength, ca.sto_112_2007_length_koef,
                    ca.ltg_thickness_measured, ca.ltg_corrosion_speed,
                    ca.ltg_time_from_last_repair, ca.ltg_thickness_to_destroy,
                    ca.ltg_residual_life, ca.ltg_min_thickness_allow,
                    ca.ltg_actual_res_thickness, ca.ltg_probab_corrosion_speed,
                    ca.ltg_depth_to_destroy, ca.ltg_time_to_destroy,
                    ca.ltg_repair_method,ca.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    LEFT OUTER JOIN pods.sto_ili_data_calc_adv ca ON t.ili_data_id = ca.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_DATA_CALC" schema="PODS" id="PODS_STO_FAIL_PROBABILITY" comment="PODS.STO_ILI_DATA_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.CLUSTER_COMMENT,c.R_595_2011_REPAIR_METHOD,c.R_595_2011_DEPTH_ABRASION,
                    c.R_595_2011_SQUARE_ABRASION,c.R_595_2011_LENGTH_PIPE_REPAIR,c.R_595_2011_COMMENT,
                    c.STO_112_2007_ASSURANCE_FACTOR,c.STO_112_2007_DESTRUCT_PRESSURE,c.STO_112_2007_ALLOW_PRESSURE,
                    c.STO_112_2007_PERFORMANCE_EVAL,c.STO_173_2007_CRITICAL_PRESSURE,c.STO_173_2007_DANGER_DEGREE,
                    c.STO_173_2007_SAFE_PRESSURE,c.STO_173_2007_ACTUAL_SAFETY,c.STO_173_2007_STANDARD_SAFETY,
                    c.STO_292_2007_DANGER_RANK,c.STO_401_2009_FAIL_PROBABILITY,ca.r_620_2011_date_test,
                    ca.r_620_2011_date_repair, ca.sto_112_2007_work_press_koef,
                    ca.sto_112_2007_compress_strength, ca.sto_112_2007_length_koef,
                    ca.ltg_thickness_measured, ca.ltg_corrosion_speed,
                    ca.ltg_time_from_last_repair, ca.ltg_thickness_to_destroy,
                    ca.ltg_residual_life, ca.ltg_min_thickness_allow,
                    ca.ltg_actual_res_thickness, ca.ltg_probab_corrosion_speed,
                    ca.ltg_depth_to_destroy, ca.ltg_time_to_destroy,
                    ca.ltg_repair_method,ca.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc c ON t.ili_data_id = c.ili_data_id
                    LEFT OUTER JOIN pods.sto_ili_data_calc_adv ca ON t.ili_data_id = ca.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_VALUE_PIPE" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_DAMAGE_MECHANICAL" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_VALUE_WELD" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_DAMAGE_CRACK" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_DAMAGE_CORROSION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_DAMAGE_DENT" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_DAMAGE_DUTY" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_PROJECTED_SCC" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_100_PROJECTED_COR" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_100_DANGER_DEG" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_100_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_100_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_VALUE_PIPE" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_DAMAGE_MECHANICAL" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_VALUE_WELD" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_DAMAGE_CRACK" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_DAMAGE_CORROSION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_DAMAGE_DENT" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_DAMAGE_DUTY" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id=" PODS_STO_VALVE_PROJECTED_SCC" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_VALVE_PROJECTED_COR" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_VALVE_DANGER_DEG" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_VALVE_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_VALVE_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_VALUE_PIPE" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_DAMAGE_MECHANICAL" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_VALUE_WELD" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_DAMAGE_CRACK" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_DAMAGE_CORROSION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_DAMAGE_DENT" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_VALUE_CONDITION" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_DAMAGE_DUTY" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_TIME_LIMIT_EXPL" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_OPTIM_TIM_BFR_ILI" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_MIN_UNIT_COST_YKM" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_FAILURE_PROBABLY" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_OP_REP_PIPE_COUNT" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_MEAN_TIME_FAIL" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_PROJECTED_SCC" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_NEXT_INSP_SCC" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_PROJECTED_COR" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_ILI_INSPECTION_CALC" schema="PODS" id="PODS_STO_RANGE_NEXT_INSP" comment="PODS.STO_ILI_INSPECTION_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_ILI_INSPECTION_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_RANGE_DANGER_DEG" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_RANGE_SEGMENT_CATEGORY" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>
    <data table="STO_EHZ_CALC" schema="PODS" id="PODS_STO_RANGE_TIME_TO_CRIT_DEPTH" comment="PODS.STO_EHZ_CALC">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>SELECT * FROM (SELECT t.EVENT_ID ID, t.*,spb.station STATION_BEG,spe.station STATION_END FROM PODS.STO_EHZ_CALC t,pods.event_range e,pods.station_point spb,pods.station_point spe where t.event_id=e.event_id and e.station_id_begin=spb.station_id and e.station_id_end=spe.station_id and e.current_indicator_lf='Y') d WHERE {FILTER}</query>
            </dbQuery>
        </select>
    </data>

    <data table="INFOTEH_REPAIR" schema="GIS_INTEGRATION50" id="INFOTEH_REPAIR" comment="GIS_INTEGRATION50.INFOTEH_REPAIR">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.ILI_DATA_ID,t.ILI_INSPECTION_ID,
                    c.infoteh_rep_id, c.infoteh_def_id, c.descr,
                    c.date_repair, c.length, c.width, c.new_diam_thick, c.comments
                    FROM pods.ili_data t JOIN GIS_INTEGRATION50.INFOTEH_REPAIR c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>

    <data table="INFOTEH_EXCAVATE" schema="GIS_INTEGRATION50" id="INFOTEH_EXCAVATE" comment="GIS_INTEGRATION50.INFOTEH_EXCAVATE">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.ILI_DATA_ID,t.ILI_INSPECTION_ID,
                    c.infoteh_excavate_id, c.infoteh_def_id, c.length,
                    c.width, c.def_type, c.date_excavate, c.extern_coating, c.orient, c.pipe
                    FROM pods.ili_data t JOIN GIS_INTEGRATION50.INFOTEH_EXCAVATE c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_ILI_DATA_CALC_ADV" schema="PODS" id="PODS_STO_DATE_TEST" comment="PODS.STO_ILI_DATA_CALC_ADV">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.cluster_comment, c.r_620_2011_date_test,
                    c.r_620_2011_date_repair, c.sto_112_2007_work_press_koef,
                    c.sto_112_2007_compress_strength, c.sto_112_2007_length_koef,
                    c.ltg_thickness_measured, c.ltg_corrosion_speed,
                    c.ltg_time_from_last_repair, c.ltg_thickness_to_destroy,
                    c.ltg_residual_life, c.ltg_min_thickness_allow,
                    c.ltg_actual_res_thickness, c.ltg_probab_corrosion_speed,
                    c.ltg_depth_to_destroy, c.ltg_time_to_destroy,
                    c.ltg_repair_method, c.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc_adv c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_ILI_DATA_CALC_ADV" schema="PODS" id="PODS_STO_DATE_REPAIR" comment="PODS.STO_ILI_DATA_CALC_ADV">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.cluster_comment, c.r_620_2011_date_test,
                    c.r_620_2011_date_repair, c.sto_112_2007_work_press_koef,
                    c.sto_112_2007_compress_strength, c.sto_112_2007_length_koef,
                    c.ltg_thickness_measured, c.ltg_corrosion_speed,
                    c.ltg_time_from_last_repair, c.ltg_thickness_to_destroy,
                    c.ltg_residual_life, c.ltg_min_thickness_allow,
                    c.ltg_actual_res_thickness, c.ltg_probab_corrosion_speed,
                    c.ltg_depth_to_destroy, c.ltg_time_to_destroy,
                    c.ltg_repair_method,
                    c.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc_adv c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_ILI_DATA_CALC_ADV" schema="PODS" id="PODS_LTG_KOCHETKOVA" comment="PODS.STO_ILI_DATA_CALC_ADV">
        <select>
            <dbQuery idField="ID">
                <var name="FILTER" default="1=1" />
                <query>
                    SELECT *
                    FROM (SELECT t.ili_data_id ID, t.*,
                    c.cluster_comment, c.r_620_2011_date_test,
                    c.r_620_2011_date_repair, c.sto_112_2007_work_press_koef,
                    c.sto_112_2007_compress_strength, c.sto_112_2007_length_koef,
                    c.ltg_thickness_measured, c.ltg_corrosion_speed,
                    c.ltg_time_from_last_repair, c.ltg_thickness_to_destroy,
                    c.ltg_residual_life, c.ltg_min_thickness_allow,
                    c.ltg_actual_res_thickness, c.ltg_probab_corrosion_speed,
                    c.ltg_depth_to_destroy, c.ltg_time_to_destroy,
                    c.ltg_repair_method,
                    c.pipe_params
                    FROM pods.ili_data t JOIN pods.sto_ili_data_calc_adv c ON t.ili_data_id = c.ili_data_id
                    ) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
    </data>

    <data table="STO_PIPE_SEGMENT_PARAMS" schema="PODS" id="PODS_STO_PIPE_SEGMENT_PARAMS" comment="PODS.STO_PIPE_SEGMENT_PARAMS">
        <select>
            <dbQuery idField="ID">
                <param name="USER_ID" default="-1" type="Int64"/>
                <var name="FILTER" default="1=1"/>
                <var name="LPU_ACCESS_FILTER" default="SELECT srv_district_id FROM PODS.SRV_DISTRICT_GCL"/>
                <query>
                    SELECT * FROM (SELECT EVENT_ID ID, t.event_id, t.route_id, t.station_begin, t.station_end,
                    t.dot_class_rating_cl, t.nominal_diameter_gcl,
                    t.nominal_wall_thickness_gcl, t.project_pressure,
                    t.test_pressure, t.work_pressure, t.pipe_long_seam_gcl,
                    t.pipe_segment_material_cl, t.pipe_segment_manufacturer_cl,
                    t.date_begin_exploitation, t.date_last_ili, t.cost_repair,
                    t.cost_replace_pipe, t.cost_ili_1_km, t.cost_excavate,
                    t.cost_capital_repair, coalesce(t.coat_code, 'UNKNOWN')||'@'||coalesce(t.coat_subcode, 'NONE') TYPE_SCL,
                    t.where_coating_applied_gcl, t.comments, t.create_date FROM pods.sto_pipe_segment_params t) d WHERE {FILTER}
                </query>
            </dbQuery>
        </select>
        <insert>
            <dbCommand>
                <param name="ROUTE_ID" default="0" type="Decimal"/>
                <param name="STATION_BEGIN" default="0" type="Decimal"/>
                <param name="STATION_END" default="0" type="Decimal"/>
                <param name="DOT_CLASS_RATING_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PROJECT_PRESSURE" default="" type="Decimal"/>
                <param name="TEST_PRESSURE" default="" type="Decimal"/>
                <param name="WORK_PRESSURE" default="" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SEGMENT_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SEGMENT_MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_BEGIN_EXPLOITATION" default="" type="DateTime"/>
                <param name="DATE_LAST_ILI" default="" type="DateTime"/>
                <param name="COST_REPAIR" default="" type="Decimal"/>
                <param name="COST_REPLACE_PIPE" default="" type="Decimal"/>
                <param name="COST_ILI_1_KM" default="" type="Decimal"/>
                <param name="COST_EXCAVATE" default="" type="Decimal"/>
                <param name="COST_CAPITAL_REPAIR" default="" type="Decimal"/>
                <param name="WHERE_COATING_APPLIED_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64" direction="Output"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.INSERT_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.INSERT_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    INSERT INTO PODS.EVENT_RANGE (EVENT_GUID,FEATURE_ID,STATION_ID_BEGIN,STATION_ID_END,PODS_USER,CREATE_DATE,EFFECTIVE_FROM_DATE,CURRENT_INDICATOR_LF,POSITIONING_TYPE_CL)
                    VALUES(null,'STO_PIPE_SEG_PAR',0,0,:PODS_USER,SYSDATE,SYSDATE,'Y','UNKNOWN')
                    RETURNING EVENT_ID INTO :ID;

                    INSERT INTO PODS.STO_PIPE_SEGMENT_PARAMS (EVENT_ID,ROUTE_ID,STATION_BEGIN,STATION_END,
                    DOT_CLASS_RATING_CL, NOMINAL_DIAMETER_GCL,       NOMINAL_WALL_THICKNESS_GCL, PROJECT_PRESSURE, TEST_PRESSURE, WORK_PRESSURE, PIPE_LONG_SEAM_GCL,
                    PIPE_SEGMENT_MATERIAL_CL, PIPE_SEGMENT_MANUFACTURER_CL, DATE_BEGIN_EXPLOITATION, DATE_LAST_ILI, COST_REPAIR,  COST_REPLACE_PIPE, COST_ILI_1_KM, COST_EXCAVATE, COST_CAPITAL_REPAIR, COAT_CODE, COAT_SUBCODE,  WHERE_COATING_APPLIED_GCL, COMMENTS, CREATE_DATE)
                    VALUES(:ID, :ROUTE_ID, 0,0,:DOT_CLASS_RATING_CL, :NOMINAL_DIAMETER_GCL,  :NOMINAL_WALL_THICKNESS_GCL, :PROJECT_PRESSURE,
                    :TEST_PRESSURE, :WORK_PRESSURE, :PIPE_LONG_SEAM_GCL, :PIPE_SEGMENT_MATERIAL_CL, :PIPE_SEGMENT_MANUFACTURER_CL,  :DATE_BEGIN_EXPLOITATION, :DATE_LAST_ILI, :COST_REPAIR, :COST_REPLACE_PIPE, :COST_ILI_1_KM, :COST_EXCAVATE, :COST_CAPITAL_REPAIR, REGEXP_REPLACE(:TYPE_SCL,'@.*',''),coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL), :WHERE_COATING_APPLIED_GCL, :COMMENTS, :CREATE_DATE);
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на добавление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </insert>
        <update>
            <dbCommand>
                <param name="ROUTE_ID" default="0" type="Decimal"/>
                <param name="STATION_BEGIN" default="" type="Decimal"/>
                <param name="STATION_END" default="" type="Decimal"/>
                <param name="DOT_CLASS_RATING_CL" default="UNKNOWN" type="String"/>
                <param name="NOMINAL_DIAMETER_GCL" default="0" type="Decimal"/>
                <param name="NOMINAL_WALL_THICKNESS_GCL" default="0" type="Decimal"/>
                <param name="PROJECT_PRESSURE" default="" type="Decimal"/>
                <param name="TEST_PRESSURE" default="" type="Decimal"/>
                <param name="WORK_PRESSURE" default="" type="Decimal"/>
                <param name="PIPE_LONG_SEAM_GCL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SEGMENT_MATERIAL_CL" default="UNKNOWN" type="String"/>
                <param name="PIPE_SEGMENT_MANUFACTURER_CL" default="UNKNOWN" type="String"/>
                <param name="DATE_BEGIN_EXPLOITATION" default="" type="DateTime"/>
                <param name="DATE_LAST_ILI" default="" type="DateTime"/>
                <param name="COST_REPAIR" default="" type="Decimal"/>
                <param name="COST_REPLACE_PIPE" default="" type="Decimal"/>
                <param name="COST_ILI_1_KM" default="" type="Decimal"/>
                <param name="COST_EXCAVATE" default="" type="Decimal"/>
                <param name="COST_CAPITAL_REPAIR" default="" type="Decimal"/>
                <param name="WHERE_COATING_APPLIED_GCL" default="UNKNOWN" type="String"/>
                <param name="TYPE_SCL" default="UNKNOWN" type="String"/>
                <param name="SUBTYPE_SCL" default="NONE" type="String"/>
                <param name="CREATE_DATE" default="" type="DateTime"/>
                <param name="COMMENTS" default="" type="String"/>
                <param name="ID" type="Int64"/>
                <param name="PODS_USER" type="String"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.UPDATE_PERMITTED = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.UPDATE_PERMITTED = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.STO_PIPE_SEGMENT_PARAMS
                    SET
                    DOT_CLASS_RATING_CL=:DOT_CLASS_RATING_CL, NOMINAL_DIAMETER_GCL=:NOMINAL_DIAMETER_GCL, NOMINAL_WALL_THICKNESS_GCL=:NOMINAL_WALL_THICKNESS_GCL, PROJECT_PRESSURE=:PROJECT_PRESSURE, TEST_PRESSURE=:TEST_PRESSURE, WORK_PRESSURE=:WORK_PRESSURE, PIPE_LONG_SEAM_GCL=:PIPE_LONG_SEAM_GCL,
                    PIPE_SEGMENT_MATERIAL_CL=:PIPE_SEGMENT_MATERIAL_CL, PIPE_SEGMENT_MANUFACTURER_CL=:PIPE_SEGMENT_MANUFACTURER_CL, DATE_BEGIN_EXPLOITATION=:DATE_BEGIN_EXPLOITATION, DATE_LAST_ILI=:DATE_LAST_ILI, COST_REPAIR=:COST_REPAIR,  COST_REPLACE_PIPE=:COST_REPLACE_PIPE, COST_ILI_1_KM=:COST_ILI_1_KM, COST_EXCAVATE=:COST_EXCAVATE, COST_CAPITAL_REPAIR=:COST_CAPITAL_REPAIR,COAT_CODE=REGEXP_REPLACE(:TYPE_SCL,'@.*',''),COAT_SUBCODE=coalesce(REPLACE(REGEXP_SUBSTR(:TYPE_SCL,'@.*'),'@',''),:SUBTYPE_SCL), WHERE_COATING_APPLIED_GCL=:WHERE_COATING_APPLIED_GCL, COMMENTS=:COMMENTS, CREATE_DATE=:CREATE_DATE
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на редактирование объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </update>
        <delete>
            <dbCommand>
                <param name="ID" type="Int64"/>
                <param name="USER_ID" default="-1" type="Int64"/>
                <query>
                    DECLARE
                    v_permission_granted NUMBER;
                    BEGIN

                    SELECT COUNT(*)
                    INTO v_permission_granted
                    FROM WEB50.B_USER_TO_B_ROLE u2r
                    WHERE u2r.USER_ID = :USER_ID
                    AND ((EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_DATA'
                    AND pr.DELETE_PERMITTED  = 1)
                    AND NOT EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'))
                    OR EXISTS (SELECT 1
                    FROM WEB50.B_ROLE_TO_B_POLICY r2p
                    JOIN WEB50.B_POLICY_RULES pr
                    ON r2p.POLICY_ID = pr.POLICY_ID
                    WHERE r2p.role_id = u2r.role_id
                    AND pr.CLASS_ID='PODS_PIPE_SEGMENT'
                    AND pr.DELETE_PERMITTED  = 1));

                    IF v_permission_granted &gt; 0
                    THEN
                    NULL;

                    BEGIN
                    UPDATE PODS.EVENT_RANGE
                    SET CURRENT_INDICATOR_LF='N'
                    WHERE EVENT_ID = :ID;

                    DELETE FROM PODS.STO_PIPE_SEGMENT_PARAMS
                    WHERE EVENT_ID = :ID;
                    END;

                    ELSE
                    RAISE_APPLICATION_ERROR(-20771,'Нет прав на удаление объектов. Обратитесь к администратору.');
                    END IF;
                    END;
                </query>
            </dbCommand>
        </delete>
    </data>

</root>
